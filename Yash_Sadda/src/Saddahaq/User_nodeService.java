/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Saddahaq;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class User_nodeService {

  public interface Iface {

    public boolean create_user(String first_name, String last_name, String user_name, String email, String location, int previlege, int time_created, int weight) throws org.apache.thrift.TException;

    public boolean user_subscribefeed(String user_name, String feed_type) throws org.apache.thrift.TException;

    public boolean edit_user(String first_name, String last_name, String user_name, String email, String location, int previlege) throws org.apache.thrift.TException;

    public boolean update_weight(String item_type, String item_id, int weight) throws org.apache.thrift.TException;

    public boolean add_friends(String user_name, String f_type, String f_ids) throws org.apache.thrift.TException;

    public String get_friends(String user_name) throws org.apache.thrift.TException;

    public String get_articles_hashtag(String user_name, String hash, int count, int prev_cnt) throws org.apache.thrift.TException;

    public String get_articles_space(String user_name, String space, int count, int prev_cnt, int admin_tagged) throws org.apache.thrift.TException;

    public boolean delete_user(String user_name) throws org.apache.thrift.TException;

    public boolean user_follow(String user_name1, String user_name2, int time) throws org.apache.thrift.TException;

    public boolean space_follow(String user_name, String id) throws org.apache.thrift.TException;

    public boolean space_tagitem(String space_id, String item_type, String item_id, String tag_type) throws org.apache.thrift.TException;

    public boolean space_isclosed(String id, int is_closed) throws org.apache.thrift.TException;

    public boolean user_unfollow(String user_name1, String user_name2) throws org.apache.thrift.TException;

    public boolean voteup_markfav_readlater(String user_name, String item_type, String item_id, String action, int time) throws org.apache.thrift.TException;

    public boolean votedown(String user_name, String item_type, String item_id, int time) throws org.apache.thrift.TException;

    public boolean user_remove_hashfav(String user_name, String tag_name) throws org.apache.thrift.TException;

    public boolean user_add_hashfav(String user_name, String tag_name) throws org.apache.thrift.TException;

    public boolean user_add_favtopic(String user_name, String topics) throws org.apache.thrift.TException;

    public boolean user_view(String user_name, String item_type, String item_id, int time) throws org.apache.thrift.TException;

    public String get_all_items(String item_type, String user_name, int count, int prev_cnt) throws org.apache.thrift.TException;

    public String get_user_data(String user_name) throws org.apache.thrift.TException;

    public String get_item_data(String item_type, String item_id) throws org.apache.thrift.TException;

    public String get_monthly_items() throws org.apache.thrift.TException;

    public boolean article_pushed(String id) throws org.apache.thrift.TException;

    public String stream(String user_name, String item_type, int count, int prev_cnt) throws org.apache.thrift.TException;

    public String context(String user_name, String item_type, String item_id, int count, int prev_cnt) throws org.apache.thrift.TException;

    public String notifications(String user_name, int count, int prev_cnt) throws org.apache.thrift.TException;

    public boolean create_article(String user_name, String a_id, String a_title_id, String a_title, String a_content, String a_summary, String a_fut_image, String a_cat, String a_subcat, String a_hashtags, String a_users, int a_time_created, String related_articles, String related_events, String mod_name, int stars, int is_edit, int is_closed) throws org.apache.thrift.TException;

    public boolean create_cfpost(String cf_user, String cf_id, String cf_title, String cf_url, String cf_content, String cf_fut_image, String cf_hashtags, int cf_time_created, int cf_end_date, int cf_amt_target, int cf_amt_raised, int cf_ppl_count, int is_edit) throws org.apache.thrift.TException;

    public boolean create_poll(String item_type, String item_id, String p_id, String p_qtn, int p_status, int p_time_created) throws org.apache.thrift.TException;

    public boolean respond_poll(String user_name, String p_id, int time) throws org.apache.thrift.TException;

    public boolean featured_item(String item_type, String item_id) throws org.apache.thrift.TException;

    public boolean headlines_item(String item_type, String item_id) throws org.apache.thrift.TException;

    public String get_tiles(String user_name, String cat, int count, int prev_cnt, String art_id, String tiles_type) throws org.apache.thrift.TException;

    public String get_tiles_temp(String user_name, String cat, int count, int prev_cnt, String art_id, String tiles_type) throws org.apache.thrift.TException;

    public String get_elections_home(String user_name, String filter_type, String filter_value, int count, int prev_cnt) throws org.apache.thrift.TException;

    public String get_elections_more(String user_name, String filter_type, String filter_value, String item_type, int count, int prev_cnt) throws org.apache.thrift.TException;

    public boolean delete_article(String id) throws org.apache.thrift.TException;

    public boolean delete_space(String id) throws org.apache.thrift.TException;

    public boolean delete_poll(String id) throws org.apache.thrift.TException;

    public String get_userfeed(String feed_type) throws org.apache.thrift.TException;

    public String get_itemfeed(String feed_type) throws org.apache.thrift.TException;

    public String get_trends(String cat) throws org.apache.thrift.TException;

    public String suggestions(String item_type, String item_id, String content, String cat, String hashtags, int count, int prev_cnt) throws org.apache.thrift.TException;

    public String suggestions_morenames(String item_type, String item_id) throws org.apache.thrift.TException;

    public String view_suggestions(String item_type, String item_id, String a_ids, int count, String user_name, String hashtags) throws org.apache.thrift.TException;

    public String cf_suggestions(String item_type, String item_id, String user_name) throws org.apache.thrift.TException;

    public String hashtag_suggestions(String item_type, String item_id, String content, String cat) throws org.apache.thrift.TException;

    public String search(String user_name, String content, int cnt, int prev_cnt, String item_type) throws org.apache.thrift.TException;

    public boolean add_feed(String item_type, String item_id) throws org.apache.thrift.TException;

    public boolean pin_item(String item_type, String item_id, String cat, String space_id) throws org.apache.thrift.TException;

    public boolean exclusive_article(String a_id, String cat) throws org.apache.thrift.TException;

    public String pin_article_category(String a_id) throws org.apache.thrift.TException;

    public String exclusive_article_category(String a_id) throws org.apache.thrift.TException;

    public String get_user_tiles(String user_name) throws org.apache.thrift.TException;

    public boolean create_event(String user_name, String e_id, String e_title_id, String e_title, String e_content, int e_date_time, int e_date_time_closing, int e_limit, String e_location, String e_cat, String e_subcat, String e_hashtags, String e_users, int e_time_created, String a_id, String e_summary, int is_edit, String e_fut_image, int is_closed) throws org.apache.thrift.TException;

    public boolean report_spam(String item_type, String item_id, String user_name, int time) throws org.apache.thrift.TException;

    public boolean delete_event(String id) throws org.apache.thrift.TException;

    public boolean event_response(String id, String user_name, int time) throws org.apache.thrift.TException;

    public boolean event_invite(String id, String user_name, String users, int time) throws org.apache.thrift.TException;

    public boolean event_notify(String user_name, String id, String content, int time) throws org.apache.thrift.TException;

    public boolean event_changeresponse(String id, String user_name, int time) throws org.apache.thrift.TException;

    public String get_events_category(String user_name, String category) throws org.apache.thrift.TException;

    public String get_leftpane(String user_name, String item_type, String content, String category) throws org.apache.thrift.TException;

    public String get_leftpane_more(String user_name, String item_type, String item_name, String content, String category, int count, int prev_cnt) throws org.apache.thrift.TException;

    public String get_more_events_category(String user_name, String category, int event_type) throws org.apache.thrift.TException;

    public String get_more_events(String user_name, String category) throws org.apache.thrift.TException;

    public String get_more_petitions() throws org.apache.thrift.TException;

    public String get_more_debates() throws org.apache.thrift.TException;

    public String get_more_townhalls() throws org.apache.thrift.TException;

    public String get_all_events(String user_name, String category, int count, int prev_cnt) throws org.apache.thrift.TException;

    public String get_all_petitions(int count, int prev_cnt) throws org.apache.thrift.TException;

    public String get_all_debates(int count, int prev_cnt) throws org.apache.thrift.TException;

    public String get_all_townhalls(int count, int prev_cnt) throws org.apache.thrift.TException;

    public boolean create_comment(String c_itemid, String c_itemgroup, String c_id, String c_content, String c_users, int c_time_created, String user_name) throws org.apache.thrift.TException;

    public boolean create_comment_own(String c_itemid, String c_itemgroup, String c_id, String c_content, String c_users, int c_time_created, String user_name) throws org.apache.thrift.TException;

    public boolean edit_comment(String user_name, String c_id, String c_content, String c_users, int c_time_created) throws org.apache.thrift.TException;

    public boolean delete_comment(String id) throws org.apache.thrift.TException;

    public boolean comment_spam(String id, String user_name, int time) throws org.apache.thrift.TException;

    public String get_all_comments(String user_name, String c_itemtype, String c_itemid) throws org.apache.thrift.TException;

    public String get_comments(String user_name, String c_id) throws org.apache.thrift.TException;

    public boolean debate_townhall_suggestion(String item_type, String user_name, String item_id, String item_topic, String item_celebrity, int item_time_created) throws org.apache.thrift.TException;

    public boolean debate_townhall_suggestion_voteup(String item_type, String user_name, String item_id) throws org.apache.thrift.TException;

    public boolean create_petition(String p_type, String user_name, String p_id, String p_title, String p_title_id, String p_content, String p_img_url, String p_to, int p_target, int p_count, int p_time_created, int p_end_date, String p_subcat, String p_hashtags, String p_cat, int is_edit, int is_closed) throws org.apache.thrift.TException;

    public boolean sign_petition(String user_name, String p_id, int time) throws org.apache.thrift.TException;

    public boolean update_petition_signs(String p_id, int signs) throws org.apache.thrift.TException;

    public boolean user_signed_petition(String user_name, String p_id) throws org.apache.thrift.TException;

    public boolean create_debate(String user_name, String d_id, String d_title, String d_title_id, String d_content, String d_img_url, String d_criteria, int d_duration, int d_date, int d_time_created, String d_subcat, String d_hashtags, int is_edit, int is_closed) throws org.apache.thrift.TException;

    public boolean debate_action(String user_name, String d_id, String action_type, String qtn_id, String qtn_content, int time) throws org.apache.thrift.TException;

    public boolean debate_comment(String d_id, String user_name, String comment, int time) throws org.apache.thrift.TException;

    public boolean debate_participate(String d_id, String user_name, String grp_name, String message, int time) throws org.apache.thrift.TException;

    public boolean debate_shortlist_guests(String d_id, String grp_name, String user_names) throws org.apache.thrift.TException;

    public boolean debate_change_moderator(String d_id, String d_moderators, int time) throws org.apache.thrift.TException;

    public boolean create_townhall(String user_name, String t_id, String t_title, String t_title_id, String t_content, String t_img_url, int t_date, int t_duration, int t_time_created, String t_celeb, String t_moderators, String t_subcat, String t_hashtags, int is_edit, int is_closed) throws org.apache.thrift.TException;

    public boolean townhall_action(String user_name, String t_id, String action_type, String qtn_id, String qtn_content, int time) throws org.apache.thrift.TException;

    public boolean townhall_comment(String t_id, String user_name, String comment, int time) throws org.apache.thrift.TException;

    public boolean townhall_approve_question(String t_id, String qtn_id) throws org.apache.thrift.TException;

    public boolean townhall_change_moderator(String t_id, String t_moderators, int time) throws org.apache.thrift.TException;

    public boolean delete_petition(String id) throws org.apache.thrift.TException;

    public boolean delete_debate(String id) throws org.apache.thrift.TException;

    public boolean delete_townhall(String id) throws org.apache.thrift.TException;

    public boolean delete_debate_townhall_suggestion(String item_type, String id) throws org.apache.thrift.TException;

    public void jar_check() throws org.apache.thrift.TException;

    public void tweet_sentiment(String hashtags) throws org.apache.thrift.TException;

    public String sentiment_analysis(String hashtag) throws org.apache.thrift.TException;

    public boolean create_space(String user_name, String space_id, String space_title_id, String space_title, String space_tagline, String space_fut_image, int space_time_created, int is_edit, int is_closed) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void create_user(String first_name, String last_name, String user_name, String email, String location, int previlege, int time_created, int weight, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_user_call> resultHandler) throws org.apache.thrift.TException;

    public void user_subscribefeed(String user_name, String feed_type, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_subscribefeed_call> resultHandler) throws org.apache.thrift.TException;

    public void edit_user(String first_name, String last_name, String user_name, String email, String location, int previlege, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.edit_user_call> resultHandler) throws org.apache.thrift.TException;

    public void update_weight(String item_type, String item_id, int weight, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.update_weight_call> resultHandler) throws org.apache.thrift.TException;

    public void add_friends(String user_name, String f_type, String f_ids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.add_friends_call> resultHandler) throws org.apache.thrift.TException;

    public void get_friends(String user_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_friends_call> resultHandler) throws org.apache.thrift.TException;

    public void get_articles_hashtag(String user_name, String hash, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_articles_hashtag_call> resultHandler) throws org.apache.thrift.TException;

    public void get_articles_space(String user_name, String space, int count, int prev_cnt, int admin_tagged, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_articles_space_call> resultHandler) throws org.apache.thrift.TException;

    public void delete_user(String user_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delete_user_call> resultHandler) throws org.apache.thrift.TException;

    public void user_follow(String user_name1, String user_name2, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_follow_call> resultHandler) throws org.apache.thrift.TException;

    public void space_follow(String user_name, String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.space_follow_call> resultHandler) throws org.apache.thrift.TException;

    public void space_tagitem(String space_id, String item_type, String item_id, String tag_type, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.space_tagitem_call> resultHandler) throws org.apache.thrift.TException;

    public void space_isclosed(String id, int is_closed, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.space_isclosed_call> resultHandler) throws org.apache.thrift.TException;

    public void user_unfollow(String user_name1, String user_name2, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_unfollow_call> resultHandler) throws org.apache.thrift.TException;

    public void voteup_markfav_readlater(String user_name, String item_type, String item_id, String action, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.voteup_markfav_readlater_call> resultHandler) throws org.apache.thrift.TException;

    public void votedown(String user_name, String item_type, String item_id, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.votedown_call> resultHandler) throws org.apache.thrift.TException;

    public void user_remove_hashfav(String user_name, String tag_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_remove_hashfav_call> resultHandler) throws org.apache.thrift.TException;

    public void user_add_hashfav(String user_name, String tag_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_add_hashfav_call> resultHandler) throws org.apache.thrift.TException;

    public void user_add_favtopic(String user_name, String topics, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_add_favtopic_call> resultHandler) throws org.apache.thrift.TException;

    public void user_view(String user_name, String item_type, String item_id, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_view_call> resultHandler) throws org.apache.thrift.TException;

    public void get_all_items(String item_type, String user_name, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_all_items_call> resultHandler) throws org.apache.thrift.TException;

    public void get_user_data(String user_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_user_data_call> resultHandler) throws org.apache.thrift.TException;

    public void get_item_data(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_item_data_call> resultHandler) throws org.apache.thrift.TException;

    public void get_monthly_items(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_monthly_items_call> resultHandler) throws org.apache.thrift.TException;

    public void article_pushed(String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.article_pushed_call> resultHandler) throws org.apache.thrift.TException;

    public void stream(String user_name, String item_type, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stream_call> resultHandler) throws org.apache.thrift.TException;

    public void context(String user_name, String item_type, String item_id, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.context_call> resultHandler) throws org.apache.thrift.TException;

    public void notifications(String user_name, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.notifications_call> resultHandler) throws org.apache.thrift.TException;

    public void create_article(String user_name, String a_id, String a_title_id, String a_title, String a_content, String a_summary, String a_fut_image, String a_cat, String a_subcat, String a_hashtags, String a_users, int a_time_created, String related_articles, String related_events, String mod_name, int stars, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_article_call> resultHandler) throws org.apache.thrift.TException;

    public void create_cfpost(String cf_user, String cf_id, String cf_title, String cf_url, String cf_content, String cf_fut_image, String cf_hashtags, int cf_time_created, int cf_end_date, int cf_amt_target, int cf_amt_raised, int cf_ppl_count, int is_edit, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_cfpost_call> resultHandler) throws org.apache.thrift.TException;

    public void create_poll(String item_type, String item_id, String p_id, String p_qtn, int p_status, int p_time_created, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_poll_call> resultHandler) throws org.apache.thrift.TException;

    public void respond_poll(String user_name, String p_id, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.respond_poll_call> resultHandler) throws org.apache.thrift.TException;

    public void featured_item(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.featured_item_call> resultHandler) throws org.apache.thrift.TException;

    public void headlines_item(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.headlines_item_call> resultHandler) throws org.apache.thrift.TException;

    public void get_tiles(String user_name, String cat, int count, int prev_cnt, String art_id, String tiles_type, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_tiles_call> resultHandler) throws org.apache.thrift.TException;

    public void get_tiles_temp(String user_name, String cat, int count, int prev_cnt, String art_id, String tiles_type, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_tiles_temp_call> resultHandler) throws org.apache.thrift.TException;

    public void get_elections_home(String user_name, String filter_type, String filter_value, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_elections_home_call> resultHandler) throws org.apache.thrift.TException;

    public void get_elections_more(String user_name, String filter_type, String filter_value, String item_type, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_elections_more_call> resultHandler) throws org.apache.thrift.TException;

    public void delete_article(String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delete_article_call> resultHandler) throws org.apache.thrift.TException;

    public void delete_space(String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delete_space_call> resultHandler) throws org.apache.thrift.TException;

    public void delete_poll(String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delete_poll_call> resultHandler) throws org.apache.thrift.TException;

    public void get_userfeed(String feed_type, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_userfeed_call> resultHandler) throws org.apache.thrift.TException;

    public void get_itemfeed(String feed_type, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_itemfeed_call> resultHandler) throws org.apache.thrift.TException;

    public void get_trends(String cat, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_trends_call> resultHandler) throws org.apache.thrift.TException;

    public void suggestions(String item_type, String item_id, String content, String cat, String hashtags, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.suggestions_call> resultHandler) throws org.apache.thrift.TException;

    public void suggestions_morenames(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.suggestions_morenames_call> resultHandler) throws org.apache.thrift.TException;

    public void view_suggestions(String item_type, String item_id, String a_ids, int count, String user_name, String hashtags, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.view_suggestions_call> resultHandler) throws org.apache.thrift.TException;

    public void cf_suggestions(String item_type, String item_id, String user_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.cf_suggestions_call> resultHandler) throws org.apache.thrift.TException;

    public void hashtag_suggestions(String item_type, String item_id, String content, String cat, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.hashtag_suggestions_call> resultHandler) throws org.apache.thrift.TException;

    public void search(String user_name, String content, int cnt, int prev_cnt, String item_type, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.search_call> resultHandler) throws org.apache.thrift.TException;

    public void add_feed(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.add_feed_call> resultHandler) throws org.apache.thrift.TException;

    public void pin_item(String item_type, String item_id, String cat, String space_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pin_item_call> resultHandler) throws org.apache.thrift.TException;

    public void exclusive_article(String a_id, String cat, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.exclusive_article_call> resultHandler) throws org.apache.thrift.TException;

    public void pin_article_category(String a_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pin_article_category_call> resultHandler) throws org.apache.thrift.TException;

    public void exclusive_article_category(String a_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.exclusive_article_category_call> resultHandler) throws org.apache.thrift.TException;

    public void get_user_tiles(String user_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_user_tiles_call> resultHandler) throws org.apache.thrift.TException;

    public void create_event(String user_name, String e_id, String e_title_id, String e_title, String e_content, int e_date_time, int e_date_time_closing, int e_limit, String e_location, String e_cat, String e_subcat, String e_hashtags, String e_users, int e_time_created, String a_id, String e_summary, int is_edit, String e_fut_image, int is_closed, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_event_call> resultHandler) throws org.apache.thrift.TException;

    public void report_spam(String item_type, String item_id, String user_name, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.report_spam_call> resultHandler) throws org.apache.thrift.TException;

    public void delete_event(String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delete_event_call> resultHandler) throws org.apache.thrift.TException;

    public void event_response(String id, String user_name, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.event_response_call> resultHandler) throws org.apache.thrift.TException;

    public void event_invite(String id, String user_name, String users, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.event_invite_call> resultHandler) throws org.apache.thrift.TException;

    public void event_notify(String user_name, String id, String content, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.event_notify_call> resultHandler) throws org.apache.thrift.TException;

    public void event_changeresponse(String id, String user_name, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.event_changeresponse_call> resultHandler) throws org.apache.thrift.TException;

    public void get_events_category(String user_name, String category, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_events_category_call> resultHandler) throws org.apache.thrift.TException;

    public void get_leftpane(String user_name, String item_type, String content, String category, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_leftpane_call> resultHandler) throws org.apache.thrift.TException;

    public void get_leftpane_more(String user_name, String item_type, String item_name, String content, String category, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_leftpane_more_call> resultHandler) throws org.apache.thrift.TException;

    public void get_more_events_category(String user_name, String category, int event_type, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_more_events_category_call> resultHandler) throws org.apache.thrift.TException;

    public void get_more_events(String user_name, String category, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_more_events_call> resultHandler) throws org.apache.thrift.TException;

    public void get_more_petitions(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_more_petitions_call> resultHandler) throws org.apache.thrift.TException;

    public void get_more_debates(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_more_debates_call> resultHandler) throws org.apache.thrift.TException;

    public void get_more_townhalls(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_more_townhalls_call> resultHandler) throws org.apache.thrift.TException;

    public void get_all_events(String user_name, String category, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_all_events_call> resultHandler) throws org.apache.thrift.TException;

    public void get_all_petitions(int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_all_petitions_call> resultHandler) throws org.apache.thrift.TException;

    public void get_all_debates(int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_all_debates_call> resultHandler) throws org.apache.thrift.TException;

    public void get_all_townhalls(int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_all_townhalls_call> resultHandler) throws org.apache.thrift.TException;

    public void create_comment(String c_itemid, String c_itemgroup, String c_id, String c_content, String c_users, int c_time_created, String user_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_comment_call> resultHandler) throws org.apache.thrift.TException;

    public void create_comment_own(String c_itemid, String c_itemgroup, String c_id, String c_content, String c_users, int c_time_created, String user_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_comment_own_call> resultHandler) throws org.apache.thrift.TException;

    public void edit_comment(String user_name, String c_id, String c_content, String c_users, int c_time_created, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.edit_comment_call> resultHandler) throws org.apache.thrift.TException;

    public void delete_comment(String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delete_comment_call> resultHandler) throws org.apache.thrift.TException;

    public void comment_spam(String id, String user_name, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.comment_spam_call> resultHandler) throws org.apache.thrift.TException;

    public void get_all_comments(String user_name, String c_itemtype, String c_itemid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_all_comments_call> resultHandler) throws org.apache.thrift.TException;

    public void get_comments(String user_name, String c_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_comments_call> resultHandler) throws org.apache.thrift.TException;

    public void debate_townhall_suggestion(String item_type, String user_name, String item_id, String item_topic, String item_celebrity, int item_time_created, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.debate_townhall_suggestion_call> resultHandler) throws org.apache.thrift.TException;

    public void debate_townhall_suggestion_voteup(String item_type, String user_name, String item_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.debate_townhall_suggestion_voteup_call> resultHandler) throws org.apache.thrift.TException;

    public void create_petition(String p_type, String user_name, String p_id, String p_title, String p_title_id, String p_content, String p_img_url, String p_to, int p_target, int p_count, int p_time_created, int p_end_date, String p_subcat, String p_hashtags, String p_cat, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_petition_call> resultHandler) throws org.apache.thrift.TException;

    public void sign_petition(String user_name, String p_id, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.sign_petition_call> resultHandler) throws org.apache.thrift.TException;

    public void update_petition_signs(String p_id, int signs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.update_petition_signs_call> resultHandler) throws org.apache.thrift.TException;

    public void user_signed_petition(String user_name, String p_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.user_signed_petition_call> resultHandler) throws org.apache.thrift.TException;

    public void create_debate(String user_name, String d_id, String d_title, String d_title_id, String d_content, String d_img_url, String d_criteria, int d_duration, int d_date, int d_time_created, String d_subcat, String d_hashtags, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_debate_call> resultHandler) throws org.apache.thrift.TException;

    public void debate_action(String user_name, String d_id, String action_type, String qtn_id, String qtn_content, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.debate_action_call> resultHandler) throws org.apache.thrift.TException;

    public void debate_comment(String d_id, String user_name, String comment, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.debate_comment_call> resultHandler) throws org.apache.thrift.TException;

    public void debate_participate(String d_id, String user_name, String grp_name, String message, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.debate_participate_call> resultHandler) throws org.apache.thrift.TException;

    public void debate_shortlist_guests(String d_id, String grp_name, String user_names, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.debate_shortlist_guests_call> resultHandler) throws org.apache.thrift.TException;

    public void debate_change_moderator(String d_id, String d_moderators, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.debate_change_moderator_call> resultHandler) throws org.apache.thrift.TException;

    public void create_townhall(String user_name, String t_id, String t_title, String t_title_id, String t_content, String t_img_url, int t_date, int t_duration, int t_time_created, String t_celeb, String t_moderators, String t_subcat, String t_hashtags, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_townhall_call> resultHandler) throws org.apache.thrift.TException;

    public void townhall_action(String user_name, String t_id, String action_type, String qtn_id, String qtn_content, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.townhall_action_call> resultHandler) throws org.apache.thrift.TException;

    public void townhall_comment(String t_id, String user_name, String comment, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.townhall_comment_call> resultHandler) throws org.apache.thrift.TException;

    public void townhall_approve_question(String t_id, String qtn_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.townhall_approve_question_call> resultHandler) throws org.apache.thrift.TException;

    public void townhall_change_moderator(String t_id, String t_moderators, int time, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.townhall_change_moderator_call> resultHandler) throws org.apache.thrift.TException;

    public void delete_petition(String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delete_petition_call> resultHandler) throws org.apache.thrift.TException;

    public void delete_debate(String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delete_debate_call> resultHandler) throws org.apache.thrift.TException;

    public void delete_townhall(String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delete_townhall_call> resultHandler) throws org.apache.thrift.TException;

    public void delete_debate_townhall_suggestion(String item_type, String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delete_debate_townhall_suggestion_call> resultHandler) throws org.apache.thrift.TException;

    public void jar_check(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.jar_check_call> resultHandler) throws org.apache.thrift.TException;

    public void tweet_sentiment(String hashtags, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.tweet_sentiment_call> resultHandler) throws org.apache.thrift.TException;

    public void sentiment_analysis(String hashtag, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.sentiment_analysis_call> resultHandler) throws org.apache.thrift.TException;

    public void create_space(String user_name, String space_id, String space_title_id, String space_title, String space_tagline, String space_fut_image, int space_time_created, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_space_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean create_user(String first_name, String last_name, String user_name, String email, String location, int previlege, int time_created, int weight) throws org.apache.thrift.TException
    {
      send_create_user(first_name, last_name, user_name, email, location, previlege, time_created, weight);
      return recv_create_user();
    }

    public void send_create_user(String first_name, String last_name, String user_name, String email, String location, int previlege, int time_created, int weight) throws org.apache.thrift.TException
    {
      create_user_args args = new create_user_args();
      args.setFirst_name(first_name);
      args.setLast_name(last_name);
      args.setUser_name(user_name);
      args.setEmail(email);
      args.setLocation(location);
      args.setPrevilege(previlege);
      args.setTime_created(time_created);
      args.setWeight(weight);
      sendBase("create_user", args);
    }

    public boolean recv_create_user() throws org.apache.thrift.TException
    {
      create_user_result result = new create_user_result();
      receiveBase(result, "create_user");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_user failed: unknown result");
    }

    public boolean user_subscribefeed(String user_name, String feed_type) throws org.apache.thrift.TException
    {
      send_user_subscribefeed(user_name, feed_type);
      return recv_user_subscribefeed();
    }

    public void send_user_subscribefeed(String user_name, String feed_type) throws org.apache.thrift.TException
    {
      user_subscribefeed_args args = new user_subscribefeed_args();
      args.setUser_name(user_name);
      args.setFeed_type(feed_type);
      sendBase("user_subscribefeed", args);
    }

    public boolean recv_user_subscribefeed() throws org.apache.thrift.TException
    {
      user_subscribefeed_result result = new user_subscribefeed_result();
      receiveBase(result, "user_subscribefeed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_subscribefeed failed: unknown result");
    }

    public boolean edit_user(String first_name, String last_name, String user_name, String email, String location, int previlege) throws org.apache.thrift.TException
    {
      send_edit_user(first_name, last_name, user_name, email, location, previlege);
      return recv_edit_user();
    }

    public void send_edit_user(String first_name, String last_name, String user_name, String email, String location, int previlege) throws org.apache.thrift.TException
    {
      edit_user_args args = new edit_user_args();
      args.setFirst_name(first_name);
      args.setLast_name(last_name);
      args.setUser_name(user_name);
      args.setEmail(email);
      args.setLocation(location);
      args.setPrevilege(previlege);
      sendBase("edit_user", args);
    }

    public boolean recv_edit_user() throws org.apache.thrift.TException
    {
      edit_user_result result = new edit_user_result();
      receiveBase(result, "edit_user");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "edit_user failed: unknown result");
    }

    public boolean update_weight(String item_type, String item_id, int weight) throws org.apache.thrift.TException
    {
      send_update_weight(item_type, item_id, weight);
      return recv_update_weight();
    }

    public void send_update_weight(String item_type, String item_id, int weight) throws org.apache.thrift.TException
    {
      update_weight_args args = new update_weight_args();
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      args.setWeight(weight);
      sendBase("update_weight", args);
    }

    public boolean recv_update_weight() throws org.apache.thrift.TException
    {
      update_weight_result result = new update_weight_result();
      receiveBase(result, "update_weight");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update_weight failed: unknown result");
    }

    public boolean add_friends(String user_name, String f_type, String f_ids) throws org.apache.thrift.TException
    {
      send_add_friends(user_name, f_type, f_ids);
      return recv_add_friends();
    }

    public void send_add_friends(String user_name, String f_type, String f_ids) throws org.apache.thrift.TException
    {
      add_friends_args args = new add_friends_args();
      args.setUser_name(user_name);
      args.setF_type(f_type);
      args.setF_ids(f_ids);
      sendBase("add_friends", args);
    }

    public boolean recv_add_friends() throws org.apache.thrift.TException
    {
      add_friends_result result = new add_friends_result();
      receiveBase(result, "add_friends");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "add_friends failed: unknown result");
    }

    public String get_friends(String user_name) throws org.apache.thrift.TException
    {
      send_get_friends(user_name);
      return recv_get_friends();
    }

    public void send_get_friends(String user_name) throws org.apache.thrift.TException
    {
      get_friends_args args = new get_friends_args();
      args.setUser_name(user_name);
      sendBase("get_friends", args);
    }

    public String recv_get_friends() throws org.apache.thrift.TException
    {
      get_friends_result result = new get_friends_result();
      receiveBase(result, "get_friends");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_friends failed: unknown result");
    }

    public String get_articles_hashtag(String user_name, String hash, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      send_get_articles_hashtag(user_name, hash, count, prev_cnt);
      return recv_get_articles_hashtag();
    }

    public void send_get_articles_hashtag(String user_name, String hash, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      get_articles_hashtag_args args = new get_articles_hashtag_args();
      args.setUser_name(user_name);
      args.setHash(hash);
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      sendBase("get_articles_hashtag", args);
    }

    public String recv_get_articles_hashtag() throws org.apache.thrift.TException
    {
      get_articles_hashtag_result result = new get_articles_hashtag_result();
      receiveBase(result, "get_articles_hashtag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_articles_hashtag failed: unknown result");
    }

    public String get_articles_space(String user_name, String space, int count, int prev_cnt, int admin_tagged) throws org.apache.thrift.TException
    {
      send_get_articles_space(user_name, space, count, prev_cnt, admin_tagged);
      return recv_get_articles_space();
    }

    public void send_get_articles_space(String user_name, String space, int count, int prev_cnt, int admin_tagged) throws org.apache.thrift.TException
    {
      get_articles_space_args args = new get_articles_space_args();
      args.setUser_name(user_name);
      args.setSpace(space);
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      args.setAdmin_tagged(admin_tagged);
      sendBase("get_articles_space", args);
    }

    public String recv_get_articles_space() throws org.apache.thrift.TException
    {
      get_articles_space_result result = new get_articles_space_result();
      receiveBase(result, "get_articles_space");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_articles_space failed: unknown result");
    }

    public boolean delete_user(String user_name) throws org.apache.thrift.TException
    {
      send_delete_user(user_name);
      return recv_delete_user();
    }

    public void send_delete_user(String user_name) throws org.apache.thrift.TException
    {
      delete_user_args args = new delete_user_args();
      args.setUser_name(user_name);
      sendBase("delete_user", args);
    }

    public boolean recv_delete_user() throws org.apache.thrift.TException
    {
      delete_user_result result = new delete_user_result();
      receiveBase(result, "delete_user");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_user failed: unknown result");
    }

    public boolean user_follow(String user_name1, String user_name2, int time) throws org.apache.thrift.TException
    {
      send_user_follow(user_name1, user_name2, time);
      return recv_user_follow();
    }

    public void send_user_follow(String user_name1, String user_name2, int time) throws org.apache.thrift.TException
    {
      user_follow_args args = new user_follow_args();
      args.setUser_name1(user_name1);
      args.setUser_name2(user_name2);
      args.setTime(time);
      sendBase("user_follow", args);
    }

    public boolean recv_user_follow() throws org.apache.thrift.TException
    {
      user_follow_result result = new user_follow_result();
      receiveBase(result, "user_follow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_follow failed: unknown result");
    }

    public boolean space_follow(String user_name, String id) throws org.apache.thrift.TException
    {
      send_space_follow(user_name, id);
      return recv_space_follow();
    }

    public void send_space_follow(String user_name, String id) throws org.apache.thrift.TException
    {
      space_follow_args args = new space_follow_args();
      args.setUser_name(user_name);
      args.setId(id);
      sendBase("space_follow", args);
    }

    public boolean recv_space_follow() throws org.apache.thrift.TException
    {
      space_follow_result result = new space_follow_result();
      receiveBase(result, "space_follow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "space_follow failed: unknown result");
    }

    public boolean space_tagitem(String space_id, String item_type, String item_id, String tag_type) throws org.apache.thrift.TException
    {
      send_space_tagitem(space_id, item_type, item_id, tag_type);
      return recv_space_tagitem();
    }

    public void send_space_tagitem(String space_id, String item_type, String item_id, String tag_type) throws org.apache.thrift.TException
    {
      space_tagitem_args args = new space_tagitem_args();
      args.setSpace_id(space_id);
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      args.setTag_type(tag_type);
      sendBase("space_tagitem", args);
    }

    public boolean recv_space_tagitem() throws org.apache.thrift.TException
    {
      space_tagitem_result result = new space_tagitem_result();
      receiveBase(result, "space_tagitem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "space_tagitem failed: unknown result");
    }

    public boolean space_isclosed(String id, int is_closed) throws org.apache.thrift.TException
    {
      send_space_isclosed(id, is_closed);
      return recv_space_isclosed();
    }

    public void send_space_isclosed(String id, int is_closed) throws org.apache.thrift.TException
    {
      space_isclosed_args args = new space_isclosed_args();
      args.setId(id);
      args.setIs_closed(is_closed);
      sendBase("space_isclosed", args);
    }

    public boolean recv_space_isclosed() throws org.apache.thrift.TException
    {
      space_isclosed_result result = new space_isclosed_result();
      receiveBase(result, "space_isclosed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "space_isclosed failed: unknown result");
    }

    public boolean user_unfollow(String user_name1, String user_name2) throws org.apache.thrift.TException
    {
      send_user_unfollow(user_name1, user_name2);
      return recv_user_unfollow();
    }

    public void send_user_unfollow(String user_name1, String user_name2) throws org.apache.thrift.TException
    {
      user_unfollow_args args = new user_unfollow_args();
      args.setUser_name1(user_name1);
      args.setUser_name2(user_name2);
      sendBase("user_unfollow", args);
    }

    public boolean recv_user_unfollow() throws org.apache.thrift.TException
    {
      user_unfollow_result result = new user_unfollow_result();
      receiveBase(result, "user_unfollow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_unfollow failed: unknown result");
    }

    public boolean voteup_markfav_readlater(String user_name, String item_type, String item_id, String action, int time) throws org.apache.thrift.TException
    {
      send_voteup_markfav_readlater(user_name, item_type, item_id, action, time);
      return recv_voteup_markfav_readlater();
    }

    public void send_voteup_markfav_readlater(String user_name, String item_type, String item_id, String action, int time) throws org.apache.thrift.TException
    {
      voteup_markfav_readlater_args args = new voteup_markfav_readlater_args();
      args.setUser_name(user_name);
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      args.setAction(action);
      args.setTime(time);
      sendBase("voteup_markfav_readlater", args);
    }

    public boolean recv_voteup_markfav_readlater() throws org.apache.thrift.TException
    {
      voteup_markfav_readlater_result result = new voteup_markfav_readlater_result();
      receiveBase(result, "voteup_markfav_readlater");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "voteup_markfav_readlater failed: unknown result");
    }

    public boolean votedown(String user_name, String item_type, String item_id, int time) throws org.apache.thrift.TException
    {
      send_votedown(user_name, item_type, item_id, time);
      return recv_votedown();
    }

    public void send_votedown(String user_name, String item_type, String item_id, int time) throws org.apache.thrift.TException
    {
      votedown_args args = new votedown_args();
      args.setUser_name(user_name);
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      args.setTime(time);
      sendBase("votedown", args);
    }

    public boolean recv_votedown() throws org.apache.thrift.TException
    {
      votedown_result result = new votedown_result();
      receiveBase(result, "votedown");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "votedown failed: unknown result");
    }

    public boolean user_remove_hashfav(String user_name, String tag_name) throws org.apache.thrift.TException
    {
      send_user_remove_hashfav(user_name, tag_name);
      return recv_user_remove_hashfav();
    }

    public void send_user_remove_hashfav(String user_name, String tag_name) throws org.apache.thrift.TException
    {
      user_remove_hashfav_args args = new user_remove_hashfav_args();
      args.setUser_name(user_name);
      args.setTag_name(tag_name);
      sendBase("user_remove_hashfav", args);
    }

    public boolean recv_user_remove_hashfav() throws org.apache.thrift.TException
    {
      user_remove_hashfav_result result = new user_remove_hashfav_result();
      receiveBase(result, "user_remove_hashfav");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_remove_hashfav failed: unknown result");
    }

    public boolean user_add_hashfav(String user_name, String tag_name) throws org.apache.thrift.TException
    {
      send_user_add_hashfav(user_name, tag_name);
      return recv_user_add_hashfav();
    }

    public void send_user_add_hashfav(String user_name, String tag_name) throws org.apache.thrift.TException
    {
      user_add_hashfav_args args = new user_add_hashfav_args();
      args.setUser_name(user_name);
      args.setTag_name(tag_name);
      sendBase("user_add_hashfav", args);
    }

    public boolean recv_user_add_hashfav() throws org.apache.thrift.TException
    {
      user_add_hashfav_result result = new user_add_hashfav_result();
      receiveBase(result, "user_add_hashfav");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_add_hashfav failed: unknown result");
    }

    public boolean user_add_favtopic(String user_name, String topics) throws org.apache.thrift.TException
    {
      send_user_add_favtopic(user_name, topics);
      return recv_user_add_favtopic();
    }

    public void send_user_add_favtopic(String user_name, String topics) throws org.apache.thrift.TException
    {
      user_add_favtopic_args args = new user_add_favtopic_args();
      args.setUser_name(user_name);
      args.setTopics(topics);
      sendBase("user_add_favtopic", args);
    }

    public boolean recv_user_add_favtopic() throws org.apache.thrift.TException
    {
      user_add_favtopic_result result = new user_add_favtopic_result();
      receiveBase(result, "user_add_favtopic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_add_favtopic failed: unknown result");
    }

    public boolean user_view(String user_name, String item_type, String item_id, int time) throws org.apache.thrift.TException
    {
      send_user_view(user_name, item_type, item_id, time);
      return recv_user_view();
    }

    public void send_user_view(String user_name, String item_type, String item_id, int time) throws org.apache.thrift.TException
    {
      user_view_args args = new user_view_args();
      args.setUser_name(user_name);
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      args.setTime(time);
      sendBase("user_view", args);
    }

    public boolean recv_user_view() throws org.apache.thrift.TException
    {
      user_view_result result = new user_view_result();
      receiveBase(result, "user_view");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_view failed: unknown result");
    }

    public String get_all_items(String item_type, String user_name, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      send_get_all_items(item_type, user_name, count, prev_cnt);
      return recv_get_all_items();
    }

    public void send_get_all_items(String item_type, String user_name, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      get_all_items_args args = new get_all_items_args();
      args.setItem_type(item_type);
      args.setUser_name(user_name);
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      sendBase("get_all_items", args);
    }

    public String recv_get_all_items() throws org.apache.thrift.TException
    {
      get_all_items_result result = new get_all_items_result();
      receiveBase(result, "get_all_items");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_all_items failed: unknown result");
    }

    public String get_user_data(String user_name) throws org.apache.thrift.TException
    {
      send_get_user_data(user_name);
      return recv_get_user_data();
    }

    public void send_get_user_data(String user_name) throws org.apache.thrift.TException
    {
      get_user_data_args args = new get_user_data_args();
      args.setUser_name(user_name);
      sendBase("get_user_data", args);
    }

    public String recv_get_user_data() throws org.apache.thrift.TException
    {
      get_user_data_result result = new get_user_data_result();
      receiveBase(result, "get_user_data");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_user_data failed: unknown result");
    }

    public String get_item_data(String item_type, String item_id) throws org.apache.thrift.TException
    {
      send_get_item_data(item_type, item_id);
      return recv_get_item_data();
    }

    public void send_get_item_data(String item_type, String item_id) throws org.apache.thrift.TException
    {
      get_item_data_args args = new get_item_data_args();
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      sendBase("get_item_data", args);
    }

    public String recv_get_item_data() throws org.apache.thrift.TException
    {
      get_item_data_result result = new get_item_data_result();
      receiveBase(result, "get_item_data");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_item_data failed: unknown result");
    }

    public String get_monthly_items() throws org.apache.thrift.TException
    {
      send_get_monthly_items();
      return recv_get_monthly_items();
    }

    public void send_get_monthly_items() throws org.apache.thrift.TException
    {
      get_monthly_items_args args = new get_monthly_items_args();
      sendBase("get_monthly_items", args);
    }

    public String recv_get_monthly_items() throws org.apache.thrift.TException
    {
      get_monthly_items_result result = new get_monthly_items_result();
      receiveBase(result, "get_monthly_items");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_monthly_items failed: unknown result");
    }

    public boolean article_pushed(String id) throws org.apache.thrift.TException
    {
      send_article_pushed(id);
      return recv_article_pushed();
    }

    public void send_article_pushed(String id) throws org.apache.thrift.TException
    {
      article_pushed_args args = new article_pushed_args();
      args.setId(id);
      sendBase("article_pushed", args);
    }

    public boolean recv_article_pushed() throws org.apache.thrift.TException
    {
      article_pushed_result result = new article_pushed_result();
      receiveBase(result, "article_pushed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "article_pushed failed: unknown result");
    }

    public String stream(String user_name, String item_type, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      send_stream(user_name, item_type, count, prev_cnt);
      return recv_stream();
    }

    public void send_stream(String user_name, String item_type, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      stream_args args = new stream_args();
      args.setUser_name(user_name);
      args.setItem_type(item_type);
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      sendBase("stream", args);
    }

    public String recv_stream() throws org.apache.thrift.TException
    {
      stream_result result = new stream_result();
      receiveBase(result, "stream");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stream failed: unknown result");
    }

    public String context(String user_name, String item_type, String item_id, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      send_context(user_name, item_type, item_id, count, prev_cnt);
      return recv_context();
    }

    public void send_context(String user_name, String item_type, String item_id, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      context_args args = new context_args();
      args.setUser_name(user_name);
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      sendBase("context", args);
    }

    public String recv_context() throws org.apache.thrift.TException
    {
      context_result result = new context_result();
      receiveBase(result, "context");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "context failed: unknown result");
    }

    public String notifications(String user_name, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      send_notifications(user_name, count, prev_cnt);
      return recv_notifications();
    }

    public void send_notifications(String user_name, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      notifications_args args = new notifications_args();
      args.setUser_name(user_name);
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      sendBase("notifications", args);
    }

    public String recv_notifications() throws org.apache.thrift.TException
    {
      notifications_result result = new notifications_result();
      receiveBase(result, "notifications");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "notifications failed: unknown result");
    }

    public boolean create_article(String user_name, String a_id, String a_title_id, String a_title, String a_content, String a_summary, String a_fut_image, String a_cat, String a_subcat, String a_hashtags, String a_users, int a_time_created, String related_articles, String related_events, String mod_name, int stars, int is_edit, int is_closed) throws org.apache.thrift.TException
    {
      send_create_article(user_name, a_id, a_title_id, a_title, a_content, a_summary, a_fut_image, a_cat, a_subcat, a_hashtags, a_users, a_time_created, related_articles, related_events, mod_name, stars, is_edit, is_closed);
      return recv_create_article();
    }

    public void send_create_article(String user_name, String a_id, String a_title_id, String a_title, String a_content, String a_summary, String a_fut_image, String a_cat, String a_subcat, String a_hashtags, String a_users, int a_time_created, String related_articles, String related_events, String mod_name, int stars, int is_edit, int is_closed) throws org.apache.thrift.TException
    {
      create_article_args args = new create_article_args();
      args.setUser_name(user_name);
      args.setA_id(a_id);
      args.setA_title_id(a_title_id);
      args.setA_title(a_title);
      args.setA_content(a_content);
      args.setA_summary(a_summary);
      args.setA_fut_image(a_fut_image);
      args.setA_cat(a_cat);
      args.setA_subcat(a_subcat);
      args.setA_hashtags(a_hashtags);
      args.setA_users(a_users);
      args.setA_time_created(a_time_created);
      args.setRelated_articles(related_articles);
      args.setRelated_events(related_events);
      args.setMod_name(mod_name);
      args.setStars(stars);
      args.setIs_edit(is_edit);
      args.setIs_closed(is_closed);
      sendBase("create_article", args);
    }

    public boolean recv_create_article() throws org.apache.thrift.TException
    {
      create_article_result result = new create_article_result();
      receiveBase(result, "create_article");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_article failed: unknown result");
    }

    public boolean create_cfpost(String cf_user, String cf_id, String cf_title, String cf_url, String cf_content, String cf_fut_image, String cf_hashtags, int cf_time_created, int cf_end_date, int cf_amt_target, int cf_amt_raised, int cf_ppl_count, int is_edit) throws org.apache.thrift.TException
    {
      send_create_cfpost(cf_user, cf_id, cf_title, cf_url, cf_content, cf_fut_image, cf_hashtags, cf_time_created, cf_end_date, cf_amt_target, cf_amt_raised, cf_ppl_count, is_edit);
      return recv_create_cfpost();
    }

    public void send_create_cfpost(String cf_user, String cf_id, String cf_title, String cf_url, String cf_content, String cf_fut_image, String cf_hashtags, int cf_time_created, int cf_end_date, int cf_amt_target, int cf_amt_raised, int cf_ppl_count, int is_edit) throws org.apache.thrift.TException
    {
      create_cfpost_args args = new create_cfpost_args();
      args.setCf_user(cf_user);
      args.setCf_id(cf_id);
      args.setCf_title(cf_title);
      args.setCf_url(cf_url);
      args.setCf_content(cf_content);
      args.setCf_fut_image(cf_fut_image);
      args.setCf_hashtags(cf_hashtags);
      args.setCf_time_created(cf_time_created);
      args.setCf_end_date(cf_end_date);
      args.setCf_amt_target(cf_amt_target);
      args.setCf_amt_raised(cf_amt_raised);
      args.setCf_ppl_count(cf_ppl_count);
      args.setIs_edit(is_edit);
      sendBase("create_cfpost", args);
    }

    public boolean recv_create_cfpost() throws org.apache.thrift.TException
    {
      create_cfpost_result result = new create_cfpost_result();
      receiveBase(result, "create_cfpost");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_cfpost failed: unknown result");
    }

    public boolean create_poll(String item_type, String item_id, String p_id, String p_qtn, int p_status, int p_time_created) throws org.apache.thrift.TException
    {
      send_create_poll(item_type, item_id, p_id, p_qtn, p_status, p_time_created);
      return recv_create_poll();
    }

    public void send_create_poll(String item_type, String item_id, String p_id, String p_qtn, int p_status, int p_time_created) throws org.apache.thrift.TException
    {
      create_poll_args args = new create_poll_args();
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      args.setP_id(p_id);
      args.setP_qtn(p_qtn);
      args.setP_status(p_status);
      args.setP_time_created(p_time_created);
      sendBase("create_poll", args);
    }

    public boolean recv_create_poll() throws org.apache.thrift.TException
    {
      create_poll_result result = new create_poll_result();
      receiveBase(result, "create_poll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_poll failed: unknown result");
    }

    public boolean respond_poll(String user_name, String p_id, int time) throws org.apache.thrift.TException
    {
      send_respond_poll(user_name, p_id, time);
      return recv_respond_poll();
    }

    public void send_respond_poll(String user_name, String p_id, int time) throws org.apache.thrift.TException
    {
      respond_poll_args args = new respond_poll_args();
      args.setUser_name(user_name);
      args.setP_id(p_id);
      args.setTime(time);
      sendBase("respond_poll", args);
    }

    public boolean recv_respond_poll() throws org.apache.thrift.TException
    {
      respond_poll_result result = new respond_poll_result();
      receiveBase(result, "respond_poll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "respond_poll failed: unknown result");
    }

    public boolean featured_item(String item_type, String item_id) throws org.apache.thrift.TException
    {
      send_featured_item(item_type, item_id);
      return recv_featured_item();
    }

    public void send_featured_item(String item_type, String item_id) throws org.apache.thrift.TException
    {
      featured_item_args args = new featured_item_args();
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      sendBase("featured_item", args);
    }

    public boolean recv_featured_item() throws org.apache.thrift.TException
    {
      featured_item_result result = new featured_item_result();
      receiveBase(result, "featured_item");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "featured_item failed: unknown result");
    }

    public boolean headlines_item(String item_type, String item_id) throws org.apache.thrift.TException
    {
      send_headlines_item(item_type, item_id);
      return recv_headlines_item();
    }

    public void send_headlines_item(String item_type, String item_id) throws org.apache.thrift.TException
    {
      headlines_item_args args = new headlines_item_args();
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      sendBase("headlines_item", args);
    }

    public boolean recv_headlines_item() throws org.apache.thrift.TException
    {
      headlines_item_result result = new headlines_item_result();
      receiveBase(result, "headlines_item");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "headlines_item failed: unknown result");
    }

    public String get_tiles(String user_name, String cat, int count, int prev_cnt, String art_id, String tiles_type) throws org.apache.thrift.TException
    {
      send_get_tiles(user_name, cat, count, prev_cnt, art_id, tiles_type);
      return recv_get_tiles();
    }

    public void send_get_tiles(String user_name, String cat, int count, int prev_cnt, String art_id, String tiles_type) throws org.apache.thrift.TException
    {
      get_tiles_args args = new get_tiles_args();
      args.setUser_name(user_name);
      args.setCat(cat);
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      args.setArt_id(art_id);
      args.setTiles_type(tiles_type);
      sendBase("get_tiles", args);
    }

    public String recv_get_tiles() throws org.apache.thrift.TException
    {
      get_tiles_result result = new get_tiles_result();
      receiveBase(result, "get_tiles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_tiles failed: unknown result");
    }

    public String get_tiles_temp(String user_name, String cat, int count, int prev_cnt, String art_id, String tiles_type) throws org.apache.thrift.TException
    {
      send_get_tiles_temp(user_name, cat, count, prev_cnt, art_id, tiles_type);
      return recv_get_tiles_temp();
    }

    public void send_get_tiles_temp(String user_name, String cat, int count, int prev_cnt, String art_id, String tiles_type) throws org.apache.thrift.TException
    {
      get_tiles_temp_args args = new get_tiles_temp_args();
      args.setUser_name(user_name);
      args.setCat(cat);
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      args.setArt_id(art_id);
      args.setTiles_type(tiles_type);
      sendBase("get_tiles_temp", args);
    }

    public String recv_get_tiles_temp() throws org.apache.thrift.TException
    {
      get_tiles_temp_result result = new get_tiles_temp_result();
      receiveBase(result, "get_tiles_temp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_tiles_temp failed: unknown result");
    }

    public String get_elections_home(String user_name, String filter_type, String filter_value, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      send_get_elections_home(user_name, filter_type, filter_value, count, prev_cnt);
      return recv_get_elections_home();
    }

    public void send_get_elections_home(String user_name, String filter_type, String filter_value, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      get_elections_home_args args = new get_elections_home_args();
      args.setUser_name(user_name);
      args.setFilter_type(filter_type);
      args.setFilter_value(filter_value);
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      sendBase("get_elections_home", args);
    }

    public String recv_get_elections_home() throws org.apache.thrift.TException
    {
      get_elections_home_result result = new get_elections_home_result();
      receiveBase(result, "get_elections_home");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_elections_home failed: unknown result");
    }

    public String get_elections_more(String user_name, String filter_type, String filter_value, String item_type, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      send_get_elections_more(user_name, filter_type, filter_value, item_type, count, prev_cnt);
      return recv_get_elections_more();
    }

    public void send_get_elections_more(String user_name, String filter_type, String filter_value, String item_type, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      get_elections_more_args args = new get_elections_more_args();
      args.setUser_name(user_name);
      args.setFilter_type(filter_type);
      args.setFilter_value(filter_value);
      args.setItem_type(item_type);
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      sendBase("get_elections_more", args);
    }

    public String recv_get_elections_more() throws org.apache.thrift.TException
    {
      get_elections_more_result result = new get_elections_more_result();
      receiveBase(result, "get_elections_more");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_elections_more failed: unknown result");
    }

    public boolean delete_article(String id) throws org.apache.thrift.TException
    {
      send_delete_article(id);
      return recv_delete_article();
    }

    public void send_delete_article(String id) throws org.apache.thrift.TException
    {
      delete_article_args args = new delete_article_args();
      args.setId(id);
      sendBase("delete_article", args);
    }

    public boolean recv_delete_article() throws org.apache.thrift.TException
    {
      delete_article_result result = new delete_article_result();
      receiveBase(result, "delete_article");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_article failed: unknown result");
    }

    public boolean delete_space(String id) throws org.apache.thrift.TException
    {
      send_delete_space(id);
      return recv_delete_space();
    }

    public void send_delete_space(String id) throws org.apache.thrift.TException
    {
      delete_space_args args = new delete_space_args();
      args.setId(id);
      sendBase("delete_space", args);
    }

    public boolean recv_delete_space() throws org.apache.thrift.TException
    {
      delete_space_result result = new delete_space_result();
      receiveBase(result, "delete_space");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_space failed: unknown result");
    }

    public boolean delete_poll(String id) throws org.apache.thrift.TException
    {
      send_delete_poll(id);
      return recv_delete_poll();
    }

    public void send_delete_poll(String id) throws org.apache.thrift.TException
    {
      delete_poll_args args = new delete_poll_args();
      args.setId(id);
      sendBase("delete_poll", args);
    }

    public boolean recv_delete_poll() throws org.apache.thrift.TException
    {
      delete_poll_result result = new delete_poll_result();
      receiveBase(result, "delete_poll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_poll failed: unknown result");
    }

    public String get_userfeed(String feed_type) throws org.apache.thrift.TException
    {
      send_get_userfeed(feed_type);
      return recv_get_userfeed();
    }

    public void send_get_userfeed(String feed_type) throws org.apache.thrift.TException
    {
      get_userfeed_args args = new get_userfeed_args();
      args.setFeed_type(feed_type);
      sendBase("get_userfeed", args);
    }

    public String recv_get_userfeed() throws org.apache.thrift.TException
    {
      get_userfeed_result result = new get_userfeed_result();
      receiveBase(result, "get_userfeed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_userfeed failed: unknown result");
    }

    public String get_itemfeed(String feed_type) throws org.apache.thrift.TException
    {
      send_get_itemfeed(feed_type);
      return recv_get_itemfeed();
    }

    public void send_get_itemfeed(String feed_type) throws org.apache.thrift.TException
    {
      get_itemfeed_args args = new get_itemfeed_args();
      args.setFeed_type(feed_type);
      sendBase("get_itemfeed", args);
    }

    public String recv_get_itemfeed() throws org.apache.thrift.TException
    {
      get_itemfeed_result result = new get_itemfeed_result();
      receiveBase(result, "get_itemfeed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_itemfeed failed: unknown result");
    }

    public String get_trends(String cat) throws org.apache.thrift.TException
    {
      send_get_trends(cat);
      return recv_get_trends();
    }

    public void send_get_trends(String cat) throws org.apache.thrift.TException
    {
      get_trends_args args = new get_trends_args();
      args.setCat(cat);
      sendBase("get_trends", args);
    }

    public String recv_get_trends() throws org.apache.thrift.TException
    {
      get_trends_result result = new get_trends_result();
      receiveBase(result, "get_trends");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_trends failed: unknown result");
    }

    public String suggestions(String item_type, String item_id, String content, String cat, String hashtags, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      send_suggestions(item_type, item_id, content, cat, hashtags, count, prev_cnt);
      return recv_suggestions();
    }

    public void send_suggestions(String item_type, String item_id, String content, String cat, String hashtags, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      suggestions_args args = new suggestions_args();
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      args.setContent(content);
      args.setCat(cat);
      args.setHashtags(hashtags);
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      sendBase("suggestions", args);
    }

    public String recv_suggestions() throws org.apache.thrift.TException
    {
      suggestions_result result = new suggestions_result();
      receiveBase(result, "suggestions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "suggestions failed: unknown result");
    }

    public String suggestions_morenames(String item_type, String item_id) throws org.apache.thrift.TException
    {
      send_suggestions_morenames(item_type, item_id);
      return recv_suggestions_morenames();
    }

    public void send_suggestions_morenames(String item_type, String item_id) throws org.apache.thrift.TException
    {
      suggestions_morenames_args args = new suggestions_morenames_args();
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      sendBase("suggestions_morenames", args);
    }

    public String recv_suggestions_morenames() throws org.apache.thrift.TException
    {
      suggestions_morenames_result result = new suggestions_morenames_result();
      receiveBase(result, "suggestions_morenames");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "suggestions_morenames failed: unknown result");
    }

    public String view_suggestions(String item_type, String item_id, String a_ids, int count, String user_name, String hashtags) throws org.apache.thrift.TException
    {
      send_view_suggestions(item_type, item_id, a_ids, count, user_name, hashtags);
      return recv_view_suggestions();
    }

    public void send_view_suggestions(String item_type, String item_id, String a_ids, int count, String user_name, String hashtags) throws org.apache.thrift.TException
    {
      view_suggestions_args args = new view_suggestions_args();
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      args.setA_ids(a_ids);
      args.setCount(count);
      args.setUser_name(user_name);
      args.setHashtags(hashtags);
      sendBase("view_suggestions", args);
    }

    public String recv_view_suggestions() throws org.apache.thrift.TException
    {
      view_suggestions_result result = new view_suggestions_result();
      receiveBase(result, "view_suggestions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "view_suggestions failed: unknown result");
    }

    public String cf_suggestions(String item_type, String item_id, String user_name) throws org.apache.thrift.TException
    {
      send_cf_suggestions(item_type, item_id, user_name);
      return recv_cf_suggestions();
    }

    public void send_cf_suggestions(String item_type, String item_id, String user_name) throws org.apache.thrift.TException
    {
      cf_suggestions_args args = new cf_suggestions_args();
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      args.setUser_name(user_name);
      sendBase("cf_suggestions", args);
    }

    public String recv_cf_suggestions() throws org.apache.thrift.TException
    {
      cf_suggestions_result result = new cf_suggestions_result();
      receiveBase(result, "cf_suggestions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cf_suggestions failed: unknown result");
    }

    public String hashtag_suggestions(String item_type, String item_id, String content, String cat) throws org.apache.thrift.TException
    {
      send_hashtag_suggestions(item_type, item_id, content, cat);
      return recv_hashtag_suggestions();
    }

    public void send_hashtag_suggestions(String item_type, String item_id, String content, String cat) throws org.apache.thrift.TException
    {
      hashtag_suggestions_args args = new hashtag_suggestions_args();
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      args.setContent(content);
      args.setCat(cat);
      sendBase("hashtag_suggestions", args);
    }

    public String recv_hashtag_suggestions() throws org.apache.thrift.TException
    {
      hashtag_suggestions_result result = new hashtag_suggestions_result();
      receiveBase(result, "hashtag_suggestions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hashtag_suggestions failed: unknown result");
    }

    public String search(String user_name, String content, int cnt, int prev_cnt, String item_type) throws org.apache.thrift.TException
    {
      send_search(user_name, content, cnt, prev_cnt, item_type);
      return recv_search();
    }

    public void send_search(String user_name, String content, int cnt, int prev_cnt, String item_type) throws org.apache.thrift.TException
    {
      search_args args = new search_args();
      args.setUser_name(user_name);
      args.setContent(content);
      args.setCnt(cnt);
      args.setPrev_cnt(prev_cnt);
      args.setItem_type(item_type);
      sendBase("search", args);
    }

    public String recv_search() throws org.apache.thrift.TException
    {
      search_result result = new search_result();
      receiveBase(result, "search");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "search failed: unknown result");
    }

    public boolean add_feed(String item_type, String item_id) throws org.apache.thrift.TException
    {
      send_add_feed(item_type, item_id);
      return recv_add_feed();
    }

    public void send_add_feed(String item_type, String item_id) throws org.apache.thrift.TException
    {
      add_feed_args args = new add_feed_args();
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      sendBase("add_feed", args);
    }

    public boolean recv_add_feed() throws org.apache.thrift.TException
    {
      add_feed_result result = new add_feed_result();
      receiveBase(result, "add_feed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "add_feed failed: unknown result");
    }

    public boolean pin_item(String item_type, String item_id, String cat, String space_id) throws org.apache.thrift.TException
    {
      send_pin_item(item_type, item_id, cat, space_id);
      return recv_pin_item();
    }

    public void send_pin_item(String item_type, String item_id, String cat, String space_id) throws org.apache.thrift.TException
    {
      pin_item_args args = new pin_item_args();
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      args.setCat(cat);
      args.setSpace_id(space_id);
      sendBase("pin_item", args);
    }

    public boolean recv_pin_item() throws org.apache.thrift.TException
    {
      pin_item_result result = new pin_item_result();
      receiveBase(result, "pin_item");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pin_item failed: unknown result");
    }

    public boolean exclusive_article(String a_id, String cat) throws org.apache.thrift.TException
    {
      send_exclusive_article(a_id, cat);
      return recv_exclusive_article();
    }

    public void send_exclusive_article(String a_id, String cat) throws org.apache.thrift.TException
    {
      exclusive_article_args args = new exclusive_article_args();
      args.setA_id(a_id);
      args.setCat(cat);
      sendBase("exclusive_article", args);
    }

    public boolean recv_exclusive_article() throws org.apache.thrift.TException
    {
      exclusive_article_result result = new exclusive_article_result();
      receiveBase(result, "exclusive_article");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exclusive_article failed: unknown result");
    }

    public String pin_article_category(String a_id) throws org.apache.thrift.TException
    {
      send_pin_article_category(a_id);
      return recv_pin_article_category();
    }

    public void send_pin_article_category(String a_id) throws org.apache.thrift.TException
    {
      pin_article_category_args args = new pin_article_category_args();
      args.setA_id(a_id);
      sendBase("pin_article_category", args);
    }

    public String recv_pin_article_category() throws org.apache.thrift.TException
    {
      pin_article_category_result result = new pin_article_category_result();
      receiveBase(result, "pin_article_category");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pin_article_category failed: unknown result");
    }

    public String exclusive_article_category(String a_id) throws org.apache.thrift.TException
    {
      send_exclusive_article_category(a_id);
      return recv_exclusive_article_category();
    }

    public void send_exclusive_article_category(String a_id) throws org.apache.thrift.TException
    {
      exclusive_article_category_args args = new exclusive_article_category_args();
      args.setA_id(a_id);
      sendBase("exclusive_article_category", args);
    }

    public String recv_exclusive_article_category() throws org.apache.thrift.TException
    {
      exclusive_article_category_result result = new exclusive_article_category_result();
      receiveBase(result, "exclusive_article_category");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exclusive_article_category failed: unknown result");
    }

    public String get_user_tiles(String user_name) throws org.apache.thrift.TException
    {
      send_get_user_tiles(user_name);
      return recv_get_user_tiles();
    }

    public void send_get_user_tiles(String user_name) throws org.apache.thrift.TException
    {
      get_user_tiles_args args = new get_user_tiles_args();
      args.setUser_name(user_name);
      sendBase("get_user_tiles", args);
    }

    public String recv_get_user_tiles() throws org.apache.thrift.TException
    {
      get_user_tiles_result result = new get_user_tiles_result();
      receiveBase(result, "get_user_tiles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_user_tiles failed: unknown result");
    }

    public boolean create_event(String user_name, String e_id, String e_title_id, String e_title, String e_content, int e_date_time, int e_date_time_closing, int e_limit, String e_location, String e_cat, String e_subcat, String e_hashtags, String e_users, int e_time_created, String a_id, String e_summary, int is_edit, String e_fut_image, int is_closed) throws org.apache.thrift.TException
    {
      send_create_event(user_name, e_id, e_title_id, e_title, e_content, e_date_time, e_date_time_closing, e_limit, e_location, e_cat, e_subcat, e_hashtags, e_users, e_time_created, a_id, e_summary, is_edit, e_fut_image, is_closed);
      return recv_create_event();
    }

    public void send_create_event(String user_name, String e_id, String e_title_id, String e_title, String e_content, int e_date_time, int e_date_time_closing, int e_limit, String e_location, String e_cat, String e_subcat, String e_hashtags, String e_users, int e_time_created, String a_id, String e_summary, int is_edit, String e_fut_image, int is_closed) throws org.apache.thrift.TException
    {
      create_event_args args = new create_event_args();
      args.setUser_name(user_name);
      args.setE_id(e_id);
      args.setE_title_id(e_title_id);
      args.setE_title(e_title);
      args.setE_content(e_content);
      args.setE_date_time(e_date_time);
      args.setE_date_time_closing(e_date_time_closing);
      args.setE_limit(e_limit);
      args.setE_location(e_location);
      args.setE_cat(e_cat);
      args.setE_subcat(e_subcat);
      args.setE_hashtags(e_hashtags);
      args.setE_users(e_users);
      args.setE_time_created(e_time_created);
      args.setA_id(a_id);
      args.setE_summary(e_summary);
      args.setIs_edit(is_edit);
      args.setE_fut_image(e_fut_image);
      args.setIs_closed(is_closed);
      sendBase("create_event", args);
    }

    public boolean recv_create_event() throws org.apache.thrift.TException
    {
      create_event_result result = new create_event_result();
      receiveBase(result, "create_event");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_event failed: unknown result");
    }

    public boolean report_spam(String item_type, String item_id, String user_name, int time) throws org.apache.thrift.TException
    {
      send_report_spam(item_type, item_id, user_name, time);
      return recv_report_spam();
    }

    public void send_report_spam(String item_type, String item_id, String user_name, int time) throws org.apache.thrift.TException
    {
      report_spam_args args = new report_spam_args();
      args.setItem_type(item_type);
      args.setItem_id(item_id);
      args.setUser_name(user_name);
      args.setTime(time);
      sendBase("report_spam", args);
    }

    public boolean recv_report_spam() throws org.apache.thrift.TException
    {
      report_spam_result result = new report_spam_result();
      receiveBase(result, "report_spam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "report_spam failed: unknown result");
    }

    public boolean delete_event(String id) throws org.apache.thrift.TException
    {
      send_delete_event(id);
      return recv_delete_event();
    }

    public void send_delete_event(String id) throws org.apache.thrift.TException
    {
      delete_event_args args = new delete_event_args();
      args.setId(id);
      sendBase("delete_event", args);
    }

    public boolean recv_delete_event() throws org.apache.thrift.TException
    {
      delete_event_result result = new delete_event_result();
      receiveBase(result, "delete_event");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_event failed: unknown result");
    }

    public boolean event_response(String id, String user_name, int time) throws org.apache.thrift.TException
    {
      send_event_response(id, user_name, time);
      return recv_event_response();
    }

    public void send_event_response(String id, String user_name, int time) throws org.apache.thrift.TException
    {
      event_response_args args = new event_response_args();
      args.setId(id);
      args.setUser_name(user_name);
      args.setTime(time);
      sendBase("event_response", args);
    }

    public boolean recv_event_response() throws org.apache.thrift.TException
    {
      event_response_result result = new event_response_result();
      receiveBase(result, "event_response");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "event_response failed: unknown result");
    }

    public boolean event_invite(String id, String user_name, String users, int time) throws org.apache.thrift.TException
    {
      send_event_invite(id, user_name, users, time);
      return recv_event_invite();
    }

    public void send_event_invite(String id, String user_name, String users, int time) throws org.apache.thrift.TException
    {
      event_invite_args args = new event_invite_args();
      args.setId(id);
      args.setUser_name(user_name);
      args.setUsers(users);
      args.setTime(time);
      sendBase("event_invite", args);
    }

    public boolean recv_event_invite() throws org.apache.thrift.TException
    {
      event_invite_result result = new event_invite_result();
      receiveBase(result, "event_invite");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "event_invite failed: unknown result");
    }

    public boolean event_notify(String user_name, String id, String content, int time) throws org.apache.thrift.TException
    {
      send_event_notify(user_name, id, content, time);
      return recv_event_notify();
    }

    public void send_event_notify(String user_name, String id, String content, int time) throws org.apache.thrift.TException
    {
      event_notify_args args = new event_notify_args();
      args.setUser_name(user_name);
      args.setId(id);
      args.setContent(content);
      args.setTime(time);
      sendBase("event_notify", args);
    }

    public boolean recv_event_notify() throws org.apache.thrift.TException
    {
      event_notify_result result = new event_notify_result();
      receiveBase(result, "event_notify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "event_notify failed: unknown result");
    }

    public boolean event_changeresponse(String id, String user_name, int time) throws org.apache.thrift.TException
    {
      send_event_changeresponse(id, user_name, time);
      return recv_event_changeresponse();
    }

    public void send_event_changeresponse(String id, String user_name, int time) throws org.apache.thrift.TException
    {
      event_changeresponse_args args = new event_changeresponse_args();
      args.setId(id);
      args.setUser_name(user_name);
      args.setTime(time);
      sendBase("event_changeresponse", args);
    }

    public boolean recv_event_changeresponse() throws org.apache.thrift.TException
    {
      event_changeresponse_result result = new event_changeresponse_result();
      receiveBase(result, "event_changeresponse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "event_changeresponse failed: unknown result");
    }

    public String get_events_category(String user_name, String category) throws org.apache.thrift.TException
    {
      send_get_events_category(user_name, category);
      return recv_get_events_category();
    }

    public void send_get_events_category(String user_name, String category) throws org.apache.thrift.TException
    {
      get_events_category_args args = new get_events_category_args();
      args.setUser_name(user_name);
      args.setCategory(category);
      sendBase("get_events_category", args);
    }

    public String recv_get_events_category() throws org.apache.thrift.TException
    {
      get_events_category_result result = new get_events_category_result();
      receiveBase(result, "get_events_category");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_events_category failed: unknown result");
    }

    public String get_leftpane(String user_name, String item_type, String content, String category) throws org.apache.thrift.TException
    {
      send_get_leftpane(user_name, item_type, content, category);
      return recv_get_leftpane();
    }

    public void send_get_leftpane(String user_name, String item_type, String content, String category) throws org.apache.thrift.TException
    {
      get_leftpane_args args = new get_leftpane_args();
      args.setUser_name(user_name);
      args.setItem_type(item_type);
      args.setContent(content);
      args.setCategory(category);
      sendBase("get_leftpane", args);
    }

    public String recv_get_leftpane() throws org.apache.thrift.TException
    {
      get_leftpane_result result = new get_leftpane_result();
      receiveBase(result, "get_leftpane");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_leftpane failed: unknown result");
    }

    public String get_leftpane_more(String user_name, String item_type, String item_name, String content, String category, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      send_get_leftpane_more(user_name, item_type, item_name, content, category, count, prev_cnt);
      return recv_get_leftpane_more();
    }

    public void send_get_leftpane_more(String user_name, String item_type, String item_name, String content, String category, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      get_leftpane_more_args args = new get_leftpane_more_args();
      args.setUser_name(user_name);
      args.setItem_type(item_type);
      args.setItem_name(item_name);
      args.setContent(content);
      args.setCategory(category);
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      sendBase("get_leftpane_more", args);
    }

    public String recv_get_leftpane_more() throws org.apache.thrift.TException
    {
      get_leftpane_more_result result = new get_leftpane_more_result();
      receiveBase(result, "get_leftpane_more");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_leftpane_more failed: unknown result");
    }

    public String get_more_events_category(String user_name, String category, int event_type) throws org.apache.thrift.TException
    {
      send_get_more_events_category(user_name, category, event_type);
      return recv_get_more_events_category();
    }

    public void send_get_more_events_category(String user_name, String category, int event_type) throws org.apache.thrift.TException
    {
      get_more_events_category_args args = new get_more_events_category_args();
      args.setUser_name(user_name);
      args.setCategory(category);
      args.setEvent_type(event_type);
      sendBase("get_more_events_category", args);
    }

    public String recv_get_more_events_category() throws org.apache.thrift.TException
    {
      get_more_events_category_result result = new get_more_events_category_result();
      receiveBase(result, "get_more_events_category");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_more_events_category failed: unknown result");
    }

    public String get_more_events(String user_name, String category) throws org.apache.thrift.TException
    {
      send_get_more_events(user_name, category);
      return recv_get_more_events();
    }

    public void send_get_more_events(String user_name, String category) throws org.apache.thrift.TException
    {
      get_more_events_args args = new get_more_events_args();
      args.setUser_name(user_name);
      args.setCategory(category);
      sendBase("get_more_events", args);
    }

    public String recv_get_more_events() throws org.apache.thrift.TException
    {
      get_more_events_result result = new get_more_events_result();
      receiveBase(result, "get_more_events");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_more_events failed: unknown result");
    }

    public String get_more_petitions() throws org.apache.thrift.TException
    {
      send_get_more_petitions();
      return recv_get_more_petitions();
    }

    public void send_get_more_petitions() throws org.apache.thrift.TException
    {
      get_more_petitions_args args = new get_more_petitions_args();
      sendBase("get_more_petitions", args);
    }

    public String recv_get_more_petitions() throws org.apache.thrift.TException
    {
      get_more_petitions_result result = new get_more_petitions_result();
      receiveBase(result, "get_more_petitions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_more_petitions failed: unknown result");
    }

    public String get_more_debates() throws org.apache.thrift.TException
    {
      send_get_more_debates();
      return recv_get_more_debates();
    }

    public void send_get_more_debates() throws org.apache.thrift.TException
    {
      get_more_debates_args args = new get_more_debates_args();
      sendBase("get_more_debates", args);
    }

    public String recv_get_more_debates() throws org.apache.thrift.TException
    {
      get_more_debates_result result = new get_more_debates_result();
      receiveBase(result, "get_more_debates");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_more_debates failed: unknown result");
    }

    public String get_more_townhalls() throws org.apache.thrift.TException
    {
      send_get_more_townhalls();
      return recv_get_more_townhalls();
    }

    public void send_get_more_townhalls() throws org.apache.thrift.TException
    {
      get_more_townhalls_args args = new get_more_townhalls_args();
      sendBase("get_more_townhalls", args);
    }

    public String recv_get_more_townhalls() throws org.apache.thrift.TException
    {
      get_more_townhalls_result result = new get_more_townhalls_result();
      receiveBase(result, "get_more_townhalls");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_more_townhalls failed: unknown result");
    }

    public String get_all_events(String user_name, String category, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      send_get_all_events(user_name, category, count, prev_cnt);
      return recv_get_all_events();
    }

    public void send_get_all_events(String user_name, String category, int count, int prev_cnt) throws org.apache.thrift.TException
    {
      get_all_events_args args = new get_all_events_args();
      args.setUser_name(user_name);
      args.setCategory(category);
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      sendBase("get_all_events", args);
    }

    public String recv_get_all_events() throws org.apache.thrift.TException
    {
      get_all_events_result result = new get_all_events_result();
      receiveBase(result, "get_all_events");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_all_events failed: unknown result");
    }

    public String get_all_petitions(int count, int prev_cnt) throws org.apache.thrift.TException
    {
      send_get_all_petitions(count, prev_cnt);
      return recv_get_all_petitions();
    }

    public void send_get_all_petitions(int count, int prev_cnt) throws org.apache.thrift.TException
    {
      get_all_petitions_args args = new get_all_petitions_args();
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      sendBase("get_all_petitions", args);
    }

    public String recv_get_all_petitions() throws org.apache.thrift.TException
    {
      get_all_petitions_result result = new get_all_petitions_result();
      receiveBase(result, "get_all_petitions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_all_petitions failed: unknown result");
    }

    public String get_all_debates(int count, int prev_cnt) throws org.apache.thrift.TException
    {
      send_get_all_debates(count, prev_cnt);
      return recv_get_all_debates();
    }

    public void send_get_all_debates(int count, int prev_cnt) throws org.apache.thrift.TException
    {
      get_all_debates_args args = new get_all_debates_args();
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      sendBase("get_all_debates", args);
    }

    public String recv_get_all_debates() throws org.apache.thrift.TException
    {
      get_all_debates_result result = new get_all_debates_result();
      receiveBase(result, "get_all_debates");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_all_debates failed: unknown result");
    }

    public String get_all_townhalls(int count, int prev_cnt) throws org.apache.thrift.TException
    {
      send_get_all_townhalls(count, prev_cnt);
      return recv_get_all_townhalls();
    }

    public void send_get_all_townhalls(int count, int prev_cnt) throws org.apache.thrift.TException
    {
      get_all_townhalls_args args = new get_all_townhalls_args();
      args.setCount(count);
      args.setPrev_cnt(prev_cnt);
      sendBase("get_all_townhalls", args);
    }

    public String recv_get_all_townhalls() throws org.apache.thrift.TException
    {
      get_all_townhalls_result result = new get_all_townhalls_result();
      receiveBase(result, "get_all_townhalls");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_all_townhalls failed: unknown result");
    }

    public boolean create_comment(String c_itemid, String c_itemgroup, String c_id, String c_content, String c_users, int c_time_created, String user_name) throws org.apache.thrift.TException
    {
      send_create_comment(c_itemid, c_itemgroup, c_id, c_content, c_users, c_time_created, user_name);
      return recv_create_comment();
    }

    public void send_create_comment(String c_itemid, String c_itemgroup, String c_id, String c_content, String c_users, int c_time_created, String user_name) throws org.apache.thrift.TException
    {
      create_comment_args args = new create_comment_args();
      args.setC_itemid(c_itemid);
      args.setC_itemgroup(c_itemgroup);
      args.setC_id(c_id);
      args.setC_content(c_content);
      args.setC_users(c_users);
      args.setC_time_created(c_time_created);
      args.setUser_name(user_name);
      sendBase("create_comment", args);
    }

    public boolean recv_create_comment() throws org.apache.thrift.TException
    {
      create_comment_result result = new create_comment_result();
      receiveBase(result, "create_comment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_comment failed: unknown result");
    }

    public boolean create_comment_own(String c_itemid, String c_itemgroup, String c_id, String c_content, String c_users, int c_time_created, String user_name) throws org.apache.thrift.TException
    {
      send_create_comment_own(c_itemid, c_itemgroup, c_id, c_content, c_users, c_time_created, user_name);
      return recv_create_comment_own();
    }

    public void send_create_comment_own(String c_itemid, String c_itemgroup, String c_id, String c_content, String c_users, int c_time_created, String user_name) throws org.apache.thrift.TException
    {
      create_comment_own_args args = new create_comment_own_args();
      args.setC_itemid(c_itemid);
      args.setC_itemgroup(c_itemgroup);
      args.setC_id(c_id);
      args.setC_content(c_content);
      args.setC_users(c_users);
      args.setC_time_created(c_time_created);
      args.setUser_name(user_name);
      sendBase("create_comment_own", args);
    }

    public boolean recv_create_comment_own() throws org.apache.thrift.TException
    {
      create_comment_own_result result = new create_comment_own_result();
      receiveBase(result, "create_comment_own");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_comment_own failed: unknown result");
    }

    public boolean edit_comment(String user_name, String c_id, String c_content, String c_users, int c_time_created) throws org.apache.thrift.TException
    {
      send_edit_comment(user_name, c_id, c_content, c_users, c_time_created);
      return recv_edit_comment();
    }

    public void send_edit_comment(String user_name, String c_id, String c_content, String c_users, int c_time_created) throws org.apache.thrift.TException
    {
      edit_comment_args args = new edit_comment_args();
      args.setUser_name(user_name);
      args.setC_id(c_id);
      args.setC_content(c_content);
      args.setC_users(c_users);
      args.setC_time_created(c_time_created);
      sendBase("edit_comment", args);
    }

    public boolean recv_edit_comment() throws org.apache.thrift.TException
    {
      edit_comment_result result = new edit_comment_result();
      receiveBase(result, "edit_comment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "edit_comment failed: unknown result");
    }

    public boolean delete_comment(String id) throws org.apache.thrift.TException
    {
      send_delete_comment(id);
      return recv_delete_comment();
    }

    public void send_delete_comment(String id) throws org.apache.thrift.TException
    {
      delete_comment_args args = new delete_comment_args();
      args.setId(id);
      sendBase("delete_comment", args);
    }

    public boolean recv_delete_comment() throws org.apache.thrift.TException
    {
      delete_comment_result result = new delete_comment_result();
      receiveBase(result, "delete_comment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_comment failed: unknown result");
    }

    public boolean comment_spam(String id, String user_name, int time) throws org.apache.thrift.TException
    {
      send_comment_spam(id, user_name, time);
      return recv_comment_spam();
    }

    public void send_comment_spam(String id, String user_name, int time) throws org.apache.thrift.TException
    {
      comment_spam_args args = new comment_spam_args();
      args.setId(id);
      args.setUser_name(user_name);
      args.setTime(time);
      sendBase("comment_spam", args);
    }

    public boolean recv_comment_spam() throws org.apache.thrift.TException
    {
      comment_spam_result result = new comment_spam_result();
      receiveBase(result, "comment_spam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "comment_spam failed: unknown result");
    }

    public String get_all_comments(String user_name, String c_itemtype, String c_itemid) throws org.apache.thrift.TException
    {
      send_get_all_comments(user_name, c_itemtype, c_itemid);
      return recv_get_all_comments();
    }

    public void send_get_all_comments(String user_name, String c_itemtype, String c_itemid) throws org.apache.thrift.TException
    {
      get_all_comments_args args = new get_all_comments_args();
      args.setUser_name(user_name);
      args.setC_itemtype(c_itemtype);
      args.setC_itemid(c_itemid);
      sendBase("get_all_comments", args);
    }

    public String recv_get_all_comments() throws org.apache.thrift.TException
    {
      get_all_comments_result result = new get_all_comments_result();
      receiveBase(result, "get_all_comments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_all_comments failed: unknown result");
    }

    public String get_comments(String user_name, String c_id) throws org.apache.thrift.TException
    {
      send_get_comments(user_name, c_id);
      return recv_get_comments();
    }

    public void send_get_comments(String user_name, String c_id) throws org.apache.thrift.TException
    {
      get_comments_args args = new get_comments_args();
      args.setUser_name(user_name);
      args.setC_id(c_id);
      sendBase("get_comments", args);
    }

    public String recv_get_comments() throws org.apache.thrift.TException
    {
      get_comments_result result = new get_comments_result();
      receiveBase(result, "get_comments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_comments failed: unknown result");
    }

    public boolean debate_townhall_suggestion(String item_type, String user_name, String item_id, String item_topic, String item_celebrity, int item_time_created) throws org.apache.thrift.TException
    {
      send_debate_townhall_suggestion(item_type, user_name, item_id, item_topic, item_celebrity, item_time_created);
      return recv_debate_townhall_suggestion();
    }

    public void send_debate_townhall_suggestion(String item_type, String user_name, String item_id, String item_topic, String item_celebrity, int item_time_created) throws org.apache.thrift.TException
    {
      debate_townhall_suggestion_args args = new debate_townhall_suggestion_args();
      args.setItem_type(item_type);
      args.setUser_name(user_name);
      args.setItem_id(item_id);
      args.setItem_topic(item_topic);
      args.setItem_celebrity(item_celebrity);
      args.setItem_time_created(item_time_created);
      sendBase("debate_townhall_suggestion", args);
    }

    public boolean recv_debate_townhall_suggestion() throws org.apache.thrift.TException
    {
      debate_townhall_suggestion_result result = new debate_townhall_suggestion_result();
      receiveBase(result, "debate_townhall_suggestion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "debate_townhall_suggestion failed: unknown result");
    }

    public boolean debate_townhall_suggestion_voteup(String item_type, String user_name, String item_id) throws org.apache.thrift.TException
    {
      send_debate_townhall_suggestion_voteup(item_type, user_name, item_id);
      return recv_debate_townhall_suggestion_voteup();
    }

    public void send_debate_townhall_suggestion_voteup(String item_type, String user_name, String item_id) throws org.apache.thrift.TException
    {
      debate_townhall_suggestion_voteup_args args = new debate_townhall_suggestion_voteup_args();
      args.setItem_type(item_type);
      args.setUser_name(user_name);
      args.setItem_id(item_id);
      sendBase("debate_townhall_suggestion_voteup", args);
    }

    public boolean recv_debate_townhall_suggestion_voteup() throws org.apache.thrift.TException
    {
      debate_townhall_suggestion_voteup_result result = new debate_townhall_suggestion_voteup_result();
      receiveBase(result, "debate_townhall_suggestion_voteup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "debate_townhall_suggestion_voteup failed: unknown result");
    }

    public boolean create_petition(String p_type, String user_name, String p_id, String p_title, String p_title_id, String p_content, String p_img_url, String p_to, int p_target, int p_count, int p_time_created, int p_end_date, String p_subcat, String p_hashtags, String p_cat, int is_edit, int is_closed) throws org.apache.thrift.TException
    {
      send_create_petition(p_type, user_name, p_id, p_title, p_title_id, p_content, p_img_url, p_to, p_target, p_count, p_time_created, p_end_date, p_subcat, p_hashtags, p_cat, is_edit, is_closed);
      return recv_create_petition();
    }

    public void send_create_petition(String p_type, String user_name, String p_id, String p_title, String p_title_id, String p_content, String p_img_url, String p_to, int p_target, int p_count, int p_time_created, int p_end_date, String p_subcat, String p_hashtags, String p_cat, int is_edit, int is_closed) throws org.apache.thrift.TException
    {
      create_petition_args args = new create_petition_args();
      args.setP_type(p_type);
      args.setUser_name(user_name);
      args.setP_id(p_id);
      args.setP_title(p_title);
      args.setP_title_id(p_title_id);
      args.setP_content(p_content);
      args.setP_img_url(p_img_url);
      args.setP_to(p_to);
      args.setP_target(p_target);
      args.setP_count(p_count);
      args.setP_time_created(p_time_created);
      args.setP_end_date(p_end_date);
      args.setP_subcat(p_subcat);
      args.setP_hashtags(p_hashtags);
      args.setP_cat(p_cat);
      args.setIs_edit(is_edit);
      args.setIs_closed(is_closed);
      sendBase("create_petition", args);
    }

    public boolean recv_create_petition() throws org.apache.thrift.TException
    {
      create_petition_result result = new create_petition_result();
      receiveBase(result, "create_petition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_petition failed: unknown result");
    }

    public boolean sign_petition(String user_name, String p_id, int time) throws org.apache.thrift.TException
    {
      send_sign_petition(user_name, p_id, time);
      return recv_sign_petition();
    }

    public void send_sign_petition(String user_name, String p_id, int time) throws org.apache.thrift.TException
    {
      sign_petition_args args = new sign_petition_args();
      args.setUser_name(user_name);
      args.setP_id(p_id);
      args.setTime(time);
      sendBase("sign_petition", args);
    }

    public boolean recv_sign_petition() throws org.apache.thrift.TException
    {
      sign_petition_result result = new sign_petition_result();
      receiveBase(result, "sign_petition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sign_petition failed: unknown result");
    }

    public boolean update_petition_signs(String p_id, int signs) throws org.apache.thrift.TException
    {
      send_update_petition_signs(p_id, signs);
      return recv_update_petition_signs();
    }

    public void send_update_petition_signs(String p_id, int signs) throws org.apache.thrift.TException
    {
      update_petition_signs_args args = new update_petition_signs_args();
      args.setP_id(p_id);
      args.setSigns(signs);
      sendBase("update_petition_signs", args);
    }

    public boolean recv_update_petition_signs() throws org.apache.thrift.TException
    {
      update_petition_signs_result result = new update_petition_signs_result();
      receiveBase(result, "update_petition_signs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update_petition_signs failed: unknown result");
    }

    public boolean user_signed_petition(String user_name, String p_id) throws org.apache.thrift.TException
    {
      send_user_signed_petition(user_name, p_id);
      return recv_user_signed_petition();
    }

    public void send_user_signed_petition(String user_name, String p_id) throws org.apache.thrift.TException
    {
      user_signed_petition_args args = new user_signed_petition_args();
      args.setUser_name(user_name);
      args.setP_id(p_id);
      sendBase("user_signed_petition", args);
    }

    public boolean recv_user_signed_petition() throws org.apache.thrift.TException
    {
      user_signed_petition_result result = new user_signed_petition_result();
      receiveBase(result, "user_signed_petition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "user_signed_petition failed: unknown result");
    }

    public boolean create_debate(String user_name, String d_id, String d_title, String d_title_id, String d_content, String d_img_url, String d_criteria, int d_duration, int d_date, int d_time_created, String d_subcat, String d_hashtags, int is_edit, int is_closed) throws org.apache.thrift.TException
    {
      send_create_debate(user_name, d_id, d_title, d_title_id, d_content, d_img_url, d_criteria, d_duration, d_date, d_time_created, d_subcat, d_hashtags, is_edit, is_closed);
      return recv_create_debate();
    }

    public void send_create_debate(String user_name, String d_id, String d_title, String d_title_id, String d_content, String d_img_url, String d_criteria, int d_duration, int d_date, int d_time_created, String d_subcat, String d_hashtags, int is_edit, int is_closed) throws org.apache.thrift.TException
    {
      create_debate_args args = new create_debate_args();
      args.setUser_name(user_name);
      args.setD_id(d_id);
      args.setD_title(d_title);
      args.setD_title_id(d_title_id);
      args.setD_content(d_content);
      args.setD_img_url(d_img_url);
      args.setD_criteria(d_criteria);
      args.setD_duration(d_duration);
      args.setD_date(d_date);
      args.setD_time_created(d_time_created);
      args.setD_subcat(d_subcat);
      args.setD_hashtags(d_hashtags);
      args.setIs_edit(is_edit);
      args.setIs_closed(is_closed);
      sendBase("create_debate", args);
    }

    public boolean recv_create_debate() throws org.apache.thrift.TException
    {
      create_debate_result result = new create_debate_result();
      receiveBase(result, "create_debate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_debate failed: unknown result");
    }

    public boolean debate_action(String user_name, String d_id, String action_type, String qtn_id, String qtn_content, int time) throws org.apache.thrift.TException
    {
      send_debate_action(user_name, d_id, action_type, qtn_id, qtn_content, time);
      return recv_debate_action();
    }

    public void send_debate_action(String user_name, String d_id, String action_type, String qtn_id, String qtn_content, int time) throws org.apache.thrift.TException
    {
      debate_action_args args = new debate_action_args();
      args.setUser_name(user_name);
      args.setD_id(d_id);
      args.setAction_type(action_type);
      args.setQtn_id(qtn_id);
      args.setQtn_content(qtn_content);
      args.setTime(time);
      sendBase("debate_action", args);
    }

    public boolean recv_debate_action() throws org.apache.thrift.TException
    {
      debate_action_result result = new debate_action_result();
      receiveBase(result, "debate_action");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "debate_action failed: unknown result");
    }

    public boolean debate_comment(String d_id, String user_name, String comment, int time) throws org.apache.thrift.TException
    {
      send_debate_comment(d_id, user_name, comment, time);
      return recv_debate_comment();
    }

    public void send_debate_comment(String d_id, String user_name, String comment, int time) throws org.apache.thrift.TException
    {
      debate_comment_args args = new debate_comment_args();
      args.setD_id(d_id);
      args.setUser_name(user_name);
      args.setComment(comment);
      args.setTime(time);
      sendBase("debate_comment", args);
    }

    public boolean recv_debate_comment() throws org.apache.thrift.TException
    {
      debate_comment_result result = new debate_comment_result();
      receiveBase(result, "debate_comment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "debate_comment failed: unknown result");
    }

    public boolean debate_participate(String d_id, String user_name, String grp_name, String message, int time) throws org.apache.thrift.TException
    {
      send_debate_participate(d_id, user_name, grp_name, message, time);
      return recv_debate_participate();
    }

    public void send_debate_participate(String d_id, String user_name, String grp_name, String message, int time) throws org.apache.thrift.TException
    {
      debate_participate_args args = new debate_participate_args();
      args.setD_id(d_id);
      args.setUser_name(user_name);
      args.setGrp_name(grp_name);
      args.setMessage(message);
      args.setTime(time);
      sendBase("debate_participate", args);
    }

    public boolean recv_debate_participate() throws org.apache.thrift.TException
    {
      debate_participate_result result = new debate_participate_result();
      receiveBase(result, "debate_participate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "debate_participate failed: unknown result");
    }

    public boolean debate_shortlist_guests(String d_id, String grp_name, String user_names) throws org.apache.thrift.TException
    {
      send_debate_shortlist_guests(d_id, grp_name, user_names);
      return recv_debate_shortlist_guests();
    }

    public void send_debate_shortlist_guests(String d_id, String grp_name, String user_names) throws org.apache.thrift.TException
    {
      debate_shortlist_guests_args args = new debate_shortlist_guests_args();
      args.setD_id(d_id);
      args.setGrp_name(grp_name);
      args.setUser_names(user_names);
      sendBase("debate_shortlist_guests", args);
    }

    public boolean recv_debate_shortlist_guests() throws org.apache.thrift.TException
    {
      debate_shortlist_guests_result result = new debate_shortlist_guests_result();
      receiveBase(result, "debate_shortlist_guests");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "debate_shortlist_guests failed: unknown result");
    }

    public boolean debate_change_moderator(String d_id, String d_moderators, int time) throws org.apache.thrift.TException
    {
      send_debate_change_moderator(d_id, d_moderators, time);
      return recv_debate_change_moderator();
    }

    public void send_debate_change_moderator(String d_id, String d_moderators, int time) throws org.apache.thrift.TException
    {
      debate_change_moderator_args args = new debate_change_moderator_args();
      args.setD_id(d_id);
      args.setD_moderators(d_moderators);
      args.setTime(time);
      sendBase("debate_change_moderator", args);
    }

    public boolean recv_debate_change_moderator() throws org.apache.thrift.TException
    {
      debate_change_moderator_result result = new debate_change_moderator_result();
      receiveBase(result, "debate_change_moderator");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "debate_change_moderator failed: unknown result");
    }

    public boolean create_townhall(String user_name, String t_id, String t_title, String t_title_id, String t_content, String t_img_url, int t_date, int t_duration, int t_time_created, String t_celeb, String t_moderators, String t_subcat, String t_hashtags, int is_edit, int is_closed) throws org.apache.thrift.TException
    {
      send_create_townhall(user_name, t_id, t_title, t_title_id, t_content, t_img_url, t_date, t_duration, t_time_created, t_celeb, t_moderators, t_subcat, t_hashtags, is_edit, is_closed);
      return recv_create_townhall();
    }

    public void send_create_townhall(String user_name, String t_id, String t_title, String t_title_id, String t_content, String t_img_url, int t_date, int t_duration, int t_time_created, String t_celeb, String t_moderators, String t_subcat, String t_hashtags, int is_edit, int is_closed) throws org.apache.thrift.TException
    {
      create_townhall_args args = new create_townhall_args();
      args.setUser_name(user_name);
      args.setT_id(t_id);
      args.setT_title(t_title);
      args.setT_title_id(t_title_id);
      args.setT_content(t_content);
      args.setT_img_url(t_img_url);
      args.setT_date(t_date);
      args.setT_duration(t_duration);
      args.setT_time_created(t_time_created);
      args.setT_celeb(t_celeb);
      args.setT_moderators(t_moderators);
      args.setT_subcat(t_subcat);
      args.setT_hashtags(t_hashtags);
      args.setIs_edit(is_edit);
      args.setIs_closed(is_closed);
      sendBase("create_townhall", args);
    }

    public boolean recv_create_townhall() throws org.apache.thrift.TException
    {
      create_townhall_result result = new create_townhall_result();
      receiveBase(result, "create_townhall");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_townhall failed: unknown result");
    }

    public boolean townhall_action(String user_name, String t_id, String action_type, String qtn_id, String qtn_content, int time) throws org.apache.thrift.TException
    {
      send_townhall_action(user_name, t_id, action_type, qtn_id, qtn_content, time);
      return recv_townhall_action();
    }

    public void send_townhall_action(String user_name, String t_id, String action_type, String qtn_id, String qtn_content, int time) throws org.apache.thrift.TException
    {
      townhall_action_args args = new townhall_action_args();
      args.setUser_name(user_name);
      args.setT_id(t_id);
      args.setAction_type(action_type);
      args.setQtn_id(qtn_id);
      args.setQtn_content(qtn_content);
      args.setTime(time);
      sendBase("townhall_action", args);
    }

    public boolean recv_townhall_action() throws org.apache.thrift.TException
    {
      townhall_action_result result = new townhall_action_result();
      receiveBase(result, "townhall_action");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "townhall_action failed: unknown result");
    }

    public boolean townhall_comment(String t_id, String user_name, String comment, int time) throws org.apache.thrift.TException
    {
      send_townhall_comment(t_id, user_name, comment, time);
      return recv_townhall_comment();
    }

    public void send_townhall_comment(String t_id, String user_name, String comment, int time) throws org.apache.thrift.TException
    {
      townhall_comment_args args = new townhall_comment_args();
      args.setT_id(t_id);
      args.setUser_name(user_name);
      args.setComment(comment);
      args.setTime(time);
      sendBase("townhall_comment", args);
    }

    public boolean recv_townhall_comment() throws org.apache.thrift.TException
    {
      townhall_comment_result result = new townhall_comment_result();
      receiveBase(result, "townhall_comment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "townhall_comment failed: unknown result");
    }

    public boolean townhall_approve_question(String t_id, String qtn_id) throws org.apache.thrift.TException
    {
      send_townhall_approve_question(t_id, qtn_id);
      return recv_townhall_approve_question();
    }

    public void send_townhall_approve_question(String t_id, String qtn_id) throws org.apache.thrift.TException
    {
      townhall_approve_question_args args = new townhall_approve_question_args();
      args.setT_id(t_id);
      args.setQtn_id(qtn_id);
      sendBase("townhall_approve_question", args);
    }

    public boolean recv_townhall_approve_question() throws org.apache.thrift.TException
    {
      townhall_approve_question_result result = new townhall_approve_question_result();
      receiveBase(result, "townhall_approve_question");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "townhall_approve_question failed: unknown result");
    }

    public boolean townhall_change_moderator(String t_id, String t_moderators, int time) throws org.apache.thrift.TException
    {
      send_townhall_change_moderator(t_id, t_moderators, time);
      return recv_townhall_change_moderator();
    }

    public void send_townhall_change_moderator(String t_id, String t_moderators, int time) throws org.apache.thrift.TException
    {
      townhall_change_moderator_args args = new townhall_change_moderator_args();
      args.setT_id(t_id);
      args.setT_moderators(t_moderators);
      args.setTime(time);
      sendBase("townhall_change_moderator", args);
    }

    public boolean recv_townhall_change_moderator() throws org.apache.thrift.TException
    {
      townhall_change_moderator_result result = new townhall_change_moderator_result();
      receiveBase(result, "townhall_change_moderator");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "townhall_change_moderator failed: unknown result");
    }

    public boolean delete_petition(String id) throws org.apache.thrift.TException
    {
      send_delete_petition(id);
      return recv_delete_petition();
    }

    public void send_delete_petition(String id) throws org.apache.thrift.TException
    {
      delete_petition_args args = new delete_petition_args();
      args.setId(id);
      sendBase("delete_petition", args);
    }

    public boolean recv_delete_petition() throws org.apache.thrift.TException
    {
      delete_petition_result result = new delete_petition_result();
      receiveBase(result, "delete_petition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_petition failed: unknown result");
    }

    public boolean delete_debate(String id) throws org.apache.thrift.TException
    {
      send_delete_debate(id);
      return recv_delete_debate();
    }

    public void send_delete_debate(String id) throws org.apache.thrift.TException
    {
      delete_debate_args args = new delete_debate_args();
      args.setId(id);
      sendBase("delete_debate", args);
    }

    public boolean recv_delete_debate() throws org.apache.thrift.TException
    {
      delete_debate_result result = new delete_debate_result();
      receiveBase(result, "delete_debate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_debate failed: unknown result");
    }

    public boolean delete_townhall(String id) throws org.apache.thrift.TException
    {
      send_delete_townhall(id);
      return recv_delete_townhall();
    }

    public void send_delete_townhall(String id) throws org.apache.thrift.TException
    {
      delete_townhall_args args = new delete_townhall_args();
      args.setId(id);
      sendBase("delete_townhall", args);
    }

    public boolean recv_delete_townhall() throws org.apache.thrift.TException
    {
      delete_townhall_result result = new delete_townhall_result();
      receiveBase(result, "delete_townhall");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_townhall failed: unknown result");
    }

    public boolean delete_debate_townhall_suggestion(String item_type, String id) throws org.apache.thrift.TException
    {
      send_delete_debate_townhall_suggestion(item_type, id);
      return recv_delete_debate_townhall_suggestion();
    }

    public void send_delete_debate_townhall_suggestion(String item_type, String id) throws org.apache.thrift.TException
    {
      delete_debate_townhall_suggestion_args args = new delete_debate_townhall_suggestion_args();
      args.setItem_type(item_type);
      args.setId(id);
      sendBase("delete_debate_townhall_suggestion", args);
    }

    public boolean recv_delete_debate_townhall_suggestion() throws org.apache.thrift.TException
    {
      delete_debate_townhall_suggestion_result result = new delete_debate_townhall_suggestion_result();
      receiveBase(result, "delete_debate_townhall_suggestion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_debate_townhall_suggestion failed: unknown result");
    }

    public void jar_check() throws org.apache.thrift.TException
    {
      send_jar_check();
      recv_jar_check();
    }

    public void send_jar_check() throws org.apache.thrift.TException
    {
      jar_check_args args = new jar_check_args();
      sendBase("jar_check", args);
    }

    public void recv_jar_check() throws org.apache.thrift.TException
    {
      jar_check_result result = new jar_check_result();
      receiveBase(result, "jar_check");
      return;
    }

    public void tweet_sentiment(String hashtags) throws org.apache.thrift.TException
    {
      send_tweet_sentiment(hashtags);
      recv_tweet_sentiment();
    }

    public void send_tweet_sentiment(String hashtags) throws org.apache.thrift.TException
    {
      tweet_sentiment_args args = new tweet_sentiment_args();
      args.setHashtags(hashtags);
      sendBase("tweet_sentiment", args);
    }

    public void recv_tweet_sentiment() throws org.apache.thrift.TException
    {
      tweet_sentiment_result result = new tweet_sentiment_result();
      receiveBase(result, "tweet_sentiment");
      return;
    }

    public String sentiment_analysis(String hashtag) throws org.apache.thrift.TException
    {
      send_sentiment_analysis(hashtag);
      return recv_sentiment_analysis();
    }

    public void send_sentiment_analysis(String hashtag) throws org.apache.thrift.TException
    {
      sentiment_analysis_args args = new sentiment_analysis_args();
      args.setHashtag(hashtag);
      sendBase("sentiment_analysis", args);
    }

    public String recv_sentiment_analysis() throws org.apache.thrift.TException
    {
      sentiment_analysis_result result = new sentiment_analysis_result();
      receiveBase(result, "sentiment_analysis");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sentiment_analysis failed: unknown result");
    }

    public boolean create_space(String user_name, String space_id, String space_title_id, String space_title, String space_tagline, String space_fut_image, int space_time_created, int is_edit, int is_closed) throws org.apache.thrift.TException
    {
      send_create_space(user_name, space_id, space_title_id, space_title, space_tagline, space_fut_image, space_time_created, is_edit, is_closed);
      return recv_create_space();
    }

    public void send_create_space(String user_name, String space_id, String space_title_id, String space_title, String space_tagline, String space_fut_image, int space_time_created, int is_edit, int is_closed) throws org.apache.thrift.TException
    {
      create_space_args args = new create_space_args();
      args.setUser_name(user_name);
      args.setSpace_id(space_id);
      args.setSpace_title_id(space_title_id);
      args.setSpace_title(space_title);
      args.setSpace_tagline(space_tagline);
      args.setSpace_fut_image(space_fut_image);
      args.setSpace_time_created(space_time_created);
      args.setIs_edit(is_edit);
      args.setIs_closed(is_closed);
      sendBase("create_space", args);
    }

    public boolean recv_create_space() throws org.apache.thrift.TException
    {
      create_space_result result = new create_space_result();
      receiveBase(result, "create_space");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_space failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void create_user(String first_name, String last_name, String user_name, String email, String location, int previlege, int time_created, int weight, org.apache.thrift.async.AsyncMethodCallback<create_user_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_user_call method_call = new create_user_call(first_name, last_name, user_name, email, location, previlege, time_created, weight, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_user_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String first_name;
      private String last_name;
      private String user_name;
      private String email;
      private String location;
      private int previlege;
      private int time_created;
      private int weight;
      public create_user_call(String first_name, String last_name, String user_name, String email, String location, int previlege, int time_created, int weight, org.apache.thrift.async.AsyncMethodCallback<create_user_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.first_name = first_name;
        this.last_name = last_name;
        this.user_name = user_name;
        this.email = email;
        this.location = location;
        this.previlege = previlege;
        this.time_created = time_created;
        this.weight = weight;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_user", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_user_args args = new create_user_args();
        args.setFirst_name(first_name);
        args.setLast_name(last_name);
        args.setUser_name(user_name);
        args.setEmail(email);
        args.setLocation(location);
        args.setPrevilege(previlege);
        args.setTime_created(time_created);
        args.setWeight(weight);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_user();
      }
    }

    public void user_subscribefeed(String user_name, String feed_type, org.apache.thrift.async.AsyncMethodCallback<user_subscribefeed_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_subscribefeed_call method_call = new user_subscribefeed_call(user_name, feed_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_subscribefeed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String feed_type;
      public user_subscribefeed_call(String user_name, String feed_type, org.apache.thrift.async.AsyncMethodCallback<user_subscribefeed_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.feed_type = feed_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_subscribefeed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_subscribefeed_args args = new user_subscribefeed_args();
        args.setUser_name(user_name);
        args.setFeed_type(feed_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_subscribefeed();
      }
    }

    public void edit_user(String first_name, String last_name, String user_name, String email, String location, int previlege, org.apache.thrift.async.AsyncMethodCallback<edit_user_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      edit_user_call method_call = new edit_user_call(first_name, last_name, user_name, email, location, previlege, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class edit_user_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String first_name;
      private String last_name;
      private String user_name;
      private String email;
      private String location;
      private int previlege;
      public edit_user_call(String first_name, String last_name, String user_name, String email, String location, int previlege, org.apache.thrift.async.AsyncMethodCallback<edit_user_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.first_name = first_name;
        this.last_name = last_name;
        this.user_name = user_name;
        this.email = email;
        this.location = location;
        this.previlege = previlege;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("edit_user", org.apache.thrift.protocol.TMessageType.CALL, 0));
        edit_user_args args = new edit_user_args();
        args.setFirst_name(first_name);
        args.setLast_name(last_name);
        args.setUser_name(user_name);
        args.setEmail(email);
        args.setLocation(location);
        args.setPrevilege(previlege);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_edit_user();
      }
    }

    public void update_weight(String item_type, String item_id, int weight, org.apache.thrift.async.AsyncMethodCallback<update_weight_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_weight_call method_call = new update_weight_call(item_type, item_id, weight, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_weight_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String item_id;
      private int weight;
      public update_weight_call(String item_type, String item_id, int weight, org.apache.thrift.async.AsyncMethodCallback<update_weight_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.item_id = item_id;
        this.weight = weight;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update_weight", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_weight_args args = new update_weight_args();
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.setWeight(weight);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_update_weight();
      }
    }

    public void add_friends(String user_name, String f_type, String f_ids, org.apache.thrift.async.AsyncMethodCallback<add_friends_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      add_friends_call method_call = new add_friends_call(user_name, f_type, f_ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class add_friends_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String f_type;
      private String f_ids;
      public add_friends_call(String user_name, String f_type, String f_ids, org.apache.thrift.async.AsyncMethodCallback<add_friends_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.f_type = f_type;
        this.f_ids = f_ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add_friends", org.apache.thrift.protocol.TMessageType.CALL, 0));
        add_friends_args args = new add_friends_args();
        args.setUser_name(user_name);
        args.setF_type(f_type);
        args.setF_ids(f_ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_add_friends();
      }
    }

    public void get_friends(String user_name, org.apache.thrift.async.AsyncMethodCallback<get_friends_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_friends_call method_call = new get_friends_call(user_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_friends_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      public get_friends_call(String user_name, org.apache.thrift.async.AsyncMethodCallback<get_friends_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_friends", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_friends_args args = new get_friends_args();
        args.setUser_name(user_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_friends();
      }
    }

    public void get_articles_hashtag(String user_name, String hash, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_articles_hashtag_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_articles_hashtag_call method_call = new get_articles_hashtag_call(user_name, hash, count, prev_cnt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_articles_hashtag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String hash;
      private int count;
      private int prev_cnt;
      public get_articles_hashtag_call(String user_name, String hash, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_articles_hashtag_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.hash = hash;
        this.count = count;
        this.prev_cnt = prev_cnt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_articles_hashtag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_articles_hashtag_args args = new get_articles_hashtag_args();
        args.setUser_name(user_name);
        args.setHash(hash);
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_articles_hashtag();
      }
    }

    public void get_articles_space(String user_name, String space, int count, int prev_cnt, int admin_tagged, org.apache.thrift.async.AsyncMethodCallback<get_articles_space_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_articles_space_call method_call = new get_articles_space_call(user_name, space, count, prev_cnt, admin_tagged, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_articles_space_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String space;
      private int count;
      private int prev_cnt;
      private int admin_tagged;
      public get_articles_space_call(String user_name, String space, int count, int prev_cnt, int admin_tagged, org.apache.thrift.async.AsyncMethodCallback<get_articles_space_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.space = space;
        this.count = count;
        this.prev_cnt = prev_cnt;
        this.admin_tagged = admin_tagged;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_articles_space", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_articles_space_args args = new get_articles_space_args();
        args.setUser_name(user_name);
        args.setSpace(space);
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.setAdmin_tagged(admin_tagged);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_articles_space();
      }
    }

    public void delete_user(String user_name, org.apache.thrift.async.AsyncMethodCallback<delete_user_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_user_call method_call = new delete_user_call(user_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_user_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      public delete_user_call(String user_name, org.apache.thrift.async.AsyncMethodCallback<delete_user_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_user", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_user_args args = new delete_user_args();
        args.setUser_name(user_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_user();
      }
    }

    public void user_follow(String user_name1, String user_name2, int time, org.apache.thrift.async.AsyncMethodCallback<user_follow_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_follow_call method_call = new user_follow_call(user_name1, user_name2, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_follow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name1;
      private String user_name2;
      private int time;
      public user_follow_call(String user_name1, String user_name2, int time, org.apache.thrift.async.AsyncMethodCallback<user_follow_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name1 = user_name1;
        this.user_name2 = user_name2;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_follow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_follow_args args = new user_follow_args();
        args.setUser_name1(user_name1);
        args.setUser_name2(user_name2);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_follow();
      }
    }

    public void space_follow(String user_name, String id, org.apache.thrift.async.AsyncMethodCallback<space_follow_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      space_follow_call method_call = new space_follow_call(user_name, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class space_follow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String id;
      public space_follow_call(String user_name, String id, org.apache.thrift.async.AsyncMethodCallback<space_follow_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("space_follow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        space_follow_args args = new space_follow_args();
        args.setUser_name(user_name);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_space_follow();
      }
    }

    public void space_tagitem(String space_id, String item_type, String item_id, String tag_type, org.apache.thrift.async.AsyncMethodCallback<space_tagitem_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      space_tagitem_call method_call = new space_tagitem_call(space_id, item_type, item_id, tag_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class space_tagitem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String space_id;
      private String item_type;
      private String item_id;
      private String tag_type;
      public space_tagitem_call(String space_id, String item_type, String item_id, String tag_type, org.apache.thrift.async.AsyncMethodCallback<space_tagitem_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.space_id = space_id;
        this.item_type = item_type;
        this.item_id = item_id;
        this.tag_type = tag_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("space_tagitem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        space_tagitem_args args = new space_tagitem_args();
        args.setSpace_id(space_id);
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.setTag_type(tag_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_space_tagitem();
      }
    }

    public void space_isclosed(String id, int is_closed, org.apache.thrift.async.AsyncMethodCallback<space_isclosed_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      space_isclosed_call method_call = new space_isclosed_call(id, is_closed, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class space_isclosed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private int is_closed;
      public space_isclosed_call(String id, int is_closed, org.apache.thrift.async.AsyncMethodCallback<space_isclosed_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.is_closed = is_closed;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("space_isclosed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        space_isclosed_args args = new space_isclosed_args();
        args.setId(id);
        args.setIs_closed(is_closed);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_space_isclosed();
      }
    }

    public void user_unfollow(String user_name1, String user_name2, org.apache.thrift.async.AsyncMethodCallback<user_unfollow_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_unfollow_call method_call = new user_unfollow_call(user_name1, user_name2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_unfollow_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name1;
      private String user_name2;
      public user_unfollow_call(String user_name1, String user_name2, org.apache.thrift.async.AsyncMethodCallback<user_unfollow_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name1 = user_name1;
        this.user_name2 = user_name2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_unfollow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_unfollow_args args = new user_unfollow_args();
        args.setUser_name1(user_name1);
        args.setUser_name2(user_name2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_unfollow();
      }
    }

    public void voteup_markfav_readlater(String user_name, String item_type, String item_id, String action, int time, org.apache.thrift.async.AsyncMethodCallback<voteup_markfav_readlater_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      voteup_markfav_readlater_call method_call = new voteup_markfav_readlater_call(user_name, item_type, item_id, action, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class voteup_markfav_readlater_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String item_type;
      private String item_id;
      private String action;
      private int time;
      public voteup_markfav_readlater_call(String user_name, String item_type, String item_id, String action, int time, org.apache.thrift.async.AsyncMethodCallback<voteup_markfav_readlater_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.item_type = item_type;
        this.item_id = item_id;
        this.action = action;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("voteup_markfav_readlater", org.apache.thrift.protocol.TMessageType.CALL, 0));
        voteup_markfav_readlater_args args = new voteup_markfav_readlater_args();
        args.setUser_name(user_name);
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.setAction(action);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_voteup_markfav_readlater();
      }
    }

    public void votedown(String user_name, String item_type, String item_id, int time, org.apache.thrift.async.AsyncMethodCallback<votedown_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      votedown_call method_call = new votedown_call(user_name, item_type, item_id, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class votedown_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String item_type;
      private String item_id;
      private int time;
      public votedown_call(String user_name, String item_type, String item_id, int time, org.apache.thrift.async.AsyncMethodCallback<votedown_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.item_type = item_type;
        this.item_id = item_id;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("votedown", org.apache.thrift.protocol.TMessageType.CALL, 0));
        votedown_args args = new votedown_args();
        args.setUser_name(user_name);
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_votedown();
      }
    }

    public void user_remove_hashfav(String user_name, String tag_name, org.apache.thrift.async.AsyncMethodCallback<user_remove_hashfav_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_remove_hashfav_call method_call = new user_remove_hashfav_call(user_name, tag_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_remove_hashfav_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String tag_name;
      public user_remove_hashfav_call(String user_name, String tag_name, org.apache.thrift.async.AsyncMethodCallback<user_remove_hashfav_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.tag_name = tag_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_remove_hashfav", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_remove_hashfav_args args = new user_remove_hashfav_args();
        args.setUser_name(user_name);
        args.setTag_name(tag_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_remove_hashfav();
      }
    }

    public void user_add_hashfav(String user_name, String tag_name, org.apache.thrift.async.AsyncMethodCallback<user_add_hashfav_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_add_hashfav_call method_call = new user_add_hashfav_call(user_name, tag_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_add_hashfav_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String tag_name;
      public user_add_hashfav_call(String user_name, String tag_name, org.apache.thrift.async.AsyncMethodCallback<user_add_hashfav_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.tag_name = tag_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_add_hashfav", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_add_hashfav_args args = new user_add_hashfav_args();
        args.setUser_name(user_name);
        args.setTag_name(tag_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_add_hashfav();
      }
    }

    public void user_add_favtopic(String user_name, String topics, org.apache.thrift.async.AsyncMethodCallback<user_add_favtopic_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_add_favtopic_call method_call = new user_add_favtopic_call(user_name, topics, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_add_favtopic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String topics;
      public user_add_favtopic_call(String user_name, String topics, org.apache.thrift.async.AsyncMethodCallback<user_add_favtopic_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.topics = topics;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_add_favtopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_add_favtopic_args args = new user_add_favtopic_args();
        args.setUser_name(user_name);
        args.setTopics(topics);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_add_favtopic();
      }
    }

    public void user_view(String user_name, String item_type, String item_id, int time, org.apache.thrift.async.AsyncMethodCallback<user_view_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_view_call method_call = new user_view_call(user_name, item_type, item_id, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_view_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String item_type;
      private String item_id;
      private int time;
      public user_view_call(String user_name, String item_type, String item_id, int time, org.apache.thrift.async.AsyncMethodCallback<user_view_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.item_type = item_type;
        this.item_id = item_id;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_view", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_view_args args = new user_view_args();
        args.setUser_name(user_name);
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_view();
      }
    }

    public void get_all_items(String item_type, String user_name, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_all_items_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_all_items_call method_call = new get_all_items_call(item_type, user_name, count, prev_cnt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_all_items_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String user_name;
      private int count;
      private int prev_cnt;
      public get_all_items_call(String item_type, String user_name, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_all_items_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.user_name = user_name;
        this.count = count;
        this.prev_cnt = prev_cnt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_all_items", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_all_items_args args = new get_all_items_args();
        args.setItem_type(item_type);
        args.setUser_name(user_name);
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_all_items();
      }
    }

    public void get_user_data(String user_name, org.apache.thrift.async.AsyncMethodCallback<get_user_data_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_user_data_call method_call = new get_user_data_call(user_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_user_data_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      public get_user_data_call(String user_name, org.apache.thrift.async.AsyncMethodCallback<get_user_data_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_user_data", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_user_data_args args = new get_user_data_args();
        args.setUser_name(user_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_user_data();
      }
    }

    public void get_item_data(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<get_item_data_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_item_data_call method_call = new get_item_data_call(item_type, item_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_item_data_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String item_id;
      public get_item_data_call(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<get_item_data_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.item_id = item_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_item_data", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_item_data_args args = new get_item_data_args();
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_item_data();
      }
    }

    public void get_monthly_items(org.apache.thrift.async.AsyncMethodCallback<get_monthly_items_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_monthly_items_call method_call = new get_monthly_items_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_monthly_items_call extends org.apache.thrift.async.TAsyncMethodCall {
      public get_monthly_items_call(org.apache.thrift.async.AsyncMethodCallback<get_monthly_items_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_monthly_items", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_monthly_items_args args = new get_monthly_items_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_monthly_items();
      }
    }

    public void article_pushed(String id, org.apache.thrift.async.AsyncMethodCallback<article_pushed_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      article_pushed_call method_call = new article_pushed_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class article_pushed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public article_pushed_call(String id, org.apache.thrift.async.AsyncMethodCallback<article_pushed_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("article_pushed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        article_pushed_args args = new article_pushed_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_article_pushed();
      }
    }

    public void stream(String user_name, String item_type, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<stream_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stream_call method_call = new stream_call(user_name, item_type, count, prev_cnt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stream_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String item_type;
      private int count;
      private int prev_cnt;
      public stream_call(String user_name, String item_type, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<stream_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.item_type = item_type;
        this.count = count;
        this.prev_cnt = prev_cnt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stream", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stream_args args = new stream_args();
        args.setUser_name(user_name);
        args.setItem_type(item_type);
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stream();
      }
    }

    public void context(String user_name, String item_type, String item_id, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<context_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      context_call method_call = new context_call(user_name, item_type, item_id, count, prev_cnt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class context_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String item_type;
      private String item_id;
      private int count;
      private int prev_cnt;
      public context_call(String user_name, String item_type, String item_id, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<context_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.item_type = item_type;
        this.item_id = item_id;
        this.count = count;
        this.prev_cnt = prev_cnt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("context", org.apache.thrift.protocol.TMessageType.CALL, 0));
        context_args args = new context_args();
        args.setUser_name(user_name);
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_context();
      }
    }

    public void notifications(String user_name, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<notifications_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifications_call method_call = new notifications_call(user_name, count, prev_cnt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifications_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private int count;
      private int prev_cnt;
      public notifications_call(String user_name, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<notifications_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.count = count;
        this.prev_cnt = prev_cnt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifications", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifications_args args = new notifications_args();
        args.setUser_name(user_name);
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_notifications();
      }
    }

    public void create_article(String user_name, String a_id, String a_title_id, String a_title, String a_content, String a_summary, String a_fut_image, String a_cat, String a_subcat, String a_hashtags, String a_users, int a_time_created, String related_articles, String related_events, String mod_name, int stars, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<create_article_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_article_call method_call = new create_article_call(user_name, a_id, a_title_id, a_title, a_content, a_summary, a_fut_image, a_cat, a_subcat, a_hashtags, a_users, a_time_created, related_articles, related_events, mod_name, stars, is_edit, is_closed, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_article_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String a_id;
      private String a_title_id;
      private String a_title;
      private String a_content;
      private String a_summary;
      private String a_fut_image;
      private String a_cat;
      private String a_subcat;
      private String a_hashtags;
      private String a_users;
      private int a_time_created;
      private String related_articles;
      private String related_events;
      private String mod_name;
      private int stars;
      private int is_edit;
      private int is_closed;
      public create_article_call(String user_name, String a_id, String a_title_id, String a_title, String a_content, String a_summary, String a_fut_image, String a_cat, String a_subcat, String a_hashtags, String a_users, int a_time_created, String related_articles, String related_events, String mod_name, int stars, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<create_article_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.a_id = a_id;
        this.a_title_id = a_title_id;
        this.a_title = a_title;
        this.a_content = a_content;
        this.a_summary = a_summary;
        this.a_fut_image = a_fut_image;
        this.a_cat = a_cat;
        this.a_subcat = a_subcat;
        this.a_hashtags = a_hashtags;
        this.a_users = a_users;
        this.a_time_created = a_time_created;
        this.related_articles = related_articles;
        this.related_events = related_events;
        this.mod_name = mod_name;
        this.stars = stars;
        this.is_edit = is_edit;
        this.is_closed = is_closed;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_article", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_article_args args = new create_article_args();
        args.setUser_name(user_name);
        args.setA_id(a_id);
        args.setA_title_id(a_title_id);
        args.setA_title(a_title);
        args.setA_content(a_content);
        args.setA_summary(a_summary);
        args.setA_fut_image(a_fut_image);
        args.setA_cat(a_cat);
        args.setA_subcat(a_subcat);
        args.setA_hashtags(a_hashtags);
        args.setA_users(a_users);
        args.setA_time_created(a_time_created);
        args.setRelated_articles(related_articles);
        args.setRelated_events(related_events);
        args.setMod_name(mod_name);
        args.setStars(stars);
        args.setIs_edit(is_edit);
        args.setIs_closed(is_closed);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_article();
      }
    }

    public void create_cfpost(String cf_user, String cf_id, String cf_title, String cf_url, String cf_content, String cf_fut_image, String cf_hashtags, int cf_time_created, int cf_end_date, int cf_amt_target, int cf_amt_raised, int cf_ppl_count, int is_edit, org.apache.thrift.async.AsyncMethodCallback<create_cfpost_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_cfpost_call method_call = new create_cfpost_call(cf_user, cf_id, cf_title, cf_url, cf_content, cf_fut_image, cf_hashtags, cf_time_created, cf_end_date, cf_amt_target, cf_amt_raised, cf_ppl_count, is_edit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_cfpost_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cf_user;
      private String cf_id;
      private String cf_title;
      private String cf_url;
      private String cf_content;
      private String cf_fut_image;
      private String cf_hashtags;
      private int cf_time_created;
      private int cf_end_date;
      private int cf_amt_target;
      private int cf_amt_raised;
      private int cf_ppl_count;
      private int is_edit;
      public create_cfpost_call(String cf_user, String cf_id, String cf_title, String cf_url, String cf_content, String cf_fut_image, String cf_hashtags, int cf_time_created, int cf_end_date, int cf_amt_target, int cf_amt_raised, int cf_ppl_count, int is_edit, org.apache.thrift.async.AsyncMethodCallback<create_cfpost_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cf_user = cf_user;
        this.cf_id = cf_id;
        this.cf_title = cf_title;
        this.cf_url = cf_url;
        this.cf_content = cf_content;
        this.cf_fut_image = cf_fut_image;
        this.cf_hashtags = cf_hashtags;
        this.cf_time_created = cf_time_created;
        this.cf_end_date = cf_end_date;
        this.cf_amt_target = cf_amt_target;
        this.cf_amt_raised = cf_amt_raised;
        this.cf_ppl_count = cf_ppl_count;
        this.is_edit = is_edit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_cfpost", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_cfpost_args args = new create_cfpost_args();
        args.setCf_user(cf_user);
        args.setCf_id(cf_id);
        args.setCf_title(cf_title);
        args.setCf_url(cf_url);
        args.setCf_content(cf_content);
        args.setCf_fut_image(cf_fut_image);
        args.setCf_hashtags(cf_hashtags);
        args.setCf_time_created(cf_time_created);
        args.setCf_end_date(cf_end_date);
        args.setCf_amt_target(cf_amt_target);
        args.setCf_amt_raised(cf_amt_raised);
        args.setCf_ppl_count(cf_ppl_count);
        args.setIs_edit(is_edit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_cfpost();
      }
    }

    public void create_poll(String item_type, String item_id, String p_id, String p_qtn, int p_status, int p_time_created, org.apache.thrift.async.AsyncMethodCallback<create_poll_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_poll_call method_call = new create_poll_call(item_type, item_id, p_id, p_qtn, p_status, p_time_created, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_poll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String item_id;
      private String p_id;
      private String p_qtn;
      private int p_status;
      private int p_time_created;
      public create_poll_call(String item_type, String item_id, String p_id, String p_qtn, int p_status, int p_time_created, org.apache.thrift.async.AsyncMethodCallback<create_poll_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.item_id = item_id;
        this.p_id = p_id;
        this.p_qtn = p_qtn;
        this.p_status = p_status;
        this.p_time_created = p_time_created;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_poll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_poll_args args = new create_poll_args();
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.setP_id(p_id);
        args.setP_qtn(p_qtn);
        args.setP_status(p_status);
        args.setP_time_created(p_time_created);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_poll();
      }
    }

    public void respond_poll(String user_name, String p_id, int time, org.apache.thrift.async.AsyncMethodCallback<respond_poll_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      respond_poll_call method_call = new respond_poll_call(user_name, p_id, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class respond_poll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String p_id;
      private int time;
      public respond_poll_call(String user_name, String p_id, int time, org.apache.thrift.async.AsyncMethodCallback<respond_poll_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.p_id = p_id;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("respond_poll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        respond_poll_args args = new respond_poll_args();
        args.setUser_name(user_name);
        args.setP_id(p_id);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_respond_poll();
      }
    }

    public void featured_item(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<featured_item_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      featured_item_call method_call = new featured_item_call(item_type, item_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class featured_item_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String item_id;
      public featured_item_call(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<featured_item_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.item_id = item_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("featured_item", org.apache.thrift.protocol.TMessageType.CALL, 0));
        featured_item_args args = new featured_item_args();
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_featured_item();
      }
    }

    public void headlines_item(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<headlines_item_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      headlines_item_call method_call = new headlines_item_call(item_type, item_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class headlines_item_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String item_id;
      public headlines_item_call(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<headlines_item_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.item_id = item_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("headlines_item", org.apache.thrift.protocol.TMessageType.CALL, 0));
        headlines_item_args args = new headlines_item_args();
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_headlines_item();
      }
    }

    public void get_tiles(String user_name, String cat, int count, int prev_cnt, String art_id, String tiles_type, org.apache.thrift.async.AsyncMethodCallback<get_tiles_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_tiles_call method_call = new get_tiles_call(user_name, cat, count, prev_cnt, art_id, tiles_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_tiles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String cat;
      private int count;
      private int prev_cnt;
      private String art_id;
      private String tiles_type;
      public get_tiles_call(String user_name, String cat, int count, int prev_cnt, String art_id, String tiles_type, org.apache.thrift.async.AsyncMethodCallback<get_tiles_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.cat = cat;
        this.count = count;
        this.prev_cnt = prev_cnt;
        this.art_id = art_id;
        this.tiles_type = tiles_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_tiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_tiles_args args = new get_tiles_args();
        args.setUser_name(user_name);
        args.setCat(cat);
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.setArt_id(art_id);
        args.setTiles_type(tiles_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_tiles();
      }
    }

    public void get_tiles_temp(String user_name, String cat, int count, int prev_cnt, String art_id, String tiles_type, org.apache.thrift.async.AsyncMethodCallback<get_tiles_temp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_tiles_temp_call method_call = new get_tiles_temp_call(user_name, cat, count, prev_cnt, art_id, tiles_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_tiles_temp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String cat;
      private int count;
      private int prev_cnt;
      private String art_id;
      private String tiles_type;
      public get_tiles_temp_call(String user_name, String cat, int count, int prev_cnt, String art_id, String tiles_type, org.apache.thrift.async.AsyncMethodCallback<get_tiles_temp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.cat = cat;
        this.count = count;
        this.prev_cnt = prev_cnt;
        this.art_id = art_id;
        this.tiles_type = tiles_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_tiles_temp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_tiles_temp_args args = new get_tiles_temp_args();
        args.setUser_name(user_name);
        args.setCat(cat);
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.setArt_id(art_id);
        args.setTiles_type(tiles_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_tiles_temp();
      }
    }

    public void get_elections_home(String user_name, String filter_type, String filter_value, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_elections_home_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_elections_home_call method_call = new get_elections_home_call(user_name, filter_type, filter_value, count, prev_cnt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_elections_home_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String filter_type;
      private String filter_value;
      private int count;
      private int prev_cnt;
      public get_elections_home_call(String user_name, String filter_type, String filter_value, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_elections_home_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.filter_type = filter_type;
        this.filter_value = filter_value;
        this.count = count;
        this.prev_cnt = prev_cnt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_elections_home", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_elections_home_args args = new get_elections_home_args();
        args.setUser_name(user_name);
        args.setFilter_type(filter_type);
        args.setFilter_value(filter_value);
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_elections_home();
      }
    }

    public void get_elections_more(String user_name, String filter_type, String filter_value, String item_type, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_elections_more_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_elections_more_call method_call = new get_elections_more_call(user_name, filter_type, filter_value, item_type, count, prev_cnt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_elections_more_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String filter_type;
      private String filter_value;
      private String item_type;
      private int count;
      private int prev_cnt;
      public get_elections_more_call(String user_name, String filter_type, String filter_value, String item_type, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_elections_more_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.filter_type = filter_type;
        this.filter_value = filter_value;
        this.item_type = item_type;
        this.count = count;
        this.prev_cnt = prev_cnt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_elections_more", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_elections_more_args args = new get_elections_more_args();
        args.setUser_name(user_name);
        args.setFilter_type(filter_type);
        args.setFilter_value(filter_value);
        args.setItem_type(item_type);
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_elections_more();
      }
    }

    public void delete_article(String id, org.apache.thrift.async.AsyncMethodCallback<delete_article_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_article_call method_call = new delete_article_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_article_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public delete_article_call(String id, org.apache.thrift.async.AsyncMethodCallback<delete_article_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_article", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_article_args args = new delete_article_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_article();
      }
    }

    public void delete_space(String id, org.apache.thrift.async.AsyncMethodCallback<delete_space_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_space_call method_call = new delete_space_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_space_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public delete_space_call(String id, org.apache.thrift.async.AsyncMethodCallback<delete_space_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_space", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_space_args args = new delete_space_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_space();
      }
    }

    public void delete_poll(String id, org.apache.thrift.async.AsyncMethodCallback<delete_poll_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_poll_call method_call = new delete_poll_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_poll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public delete_poll_call(String id, org.apache.thrift.async.AsyncMethodCallback<delete_poll_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_poll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_poll_args args = new delete_poll_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_poll();
      }
    }

    public void get_userfeed(String feed_type, org.apache.thrift.async.AsyncMethodCallback<get_userfeed_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_userfeed_call method_call = new get_userfeed_call(feed_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_userfeed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String feed_type;
      public get_userfeed_call(String feed_type, org.apache.thrift.async.AsyncMethodCallback<get_userfeed_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.feed_type = feed_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_userfeed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_userfeed_args args = new get_userfeed_args();
        args.setFeed_type(feed_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_userfeed();
      }
    }

    public void get_itemfeed(String feed_type, org.apache.thrift.async.AsyncMethodCallback<get_itemfeed_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_itemfeed_call method_call = new get_itemfeed_call(feed_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_itemfeed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String feed_type;
      public get_itemfeed_call(String feed_type, org.apache.thrift.async.AsyncMethodCallback<get_itemfeed_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.feed_type = feed_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_itemfeed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_itemfeed_args args = new get_itemfeed_args();
        args.setFeed_type(feed_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_itemfeed();
      }
    }

    public void get_trends(String cat, org.apache.thrift.async.AsyncMethodCallback<get_trends_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_trends_call method_call = new get_trends_call(cat, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_trends_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cat;
      public get_trends_call(String cat, org.apache.thrift.async.AsyncMethodCallback<get_trends_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cat = cat;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_trends", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_trends_args args = new get_trends_args();
        args.setCat(cat);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_trends();
      }
    }

    public void suggestions(String item_type, String item_id, String content, String cat, String hashtags, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<suggestions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      suggestions_call method_call = new suggestions_call(item_type, item_id, content, cat, hashtags, count, prev_cnt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class suggestions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String item_id;
      private String content;
      private String cat;
      private String hashtags;
      private int count;
      private int prev_cnt;
      public suggestions_call(String item_type, String item_id, String content, String cat, String hashtags, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<suggestions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.item_id = item_id;
        this.content = content;
        this.cat = cat;
        this.hashtags = hashtags;
        this.count = count;
        this.prev_cnt = prev_cnt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("suggestions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        suggestions_args args = new suggestions_args();
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.setContent(content);
        args.setCat(cat);
        args.setHashtags(hashtags);
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_suggestions();
      }
    }

    public void suggestions_morenames(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<suggestions_morenames_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      suggestions_morenames_call method_call = new suggestions_morenames_call(item_type, item_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class suggestions_morenames_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String item_id;
      public suggestions_morenames_call(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<suggestions_morenames_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.item_id = item_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("suggestions_morenames", org.apache.thrift.protocol.TMessageType.CALL, 0));
        suggestions_morenames_args args = new suggestions_morenames_args();
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_suggestions_morenames();
      }
    }

    public void view_suggestions(String item_type, String item_id, String a_ids, int count, String user_name, String hashtags, org.apache.thrift.async.AsyncMethodCallback<view_suggestions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      view_suggestions_call method_call = new view_suggestions_call(item_type, item_id, a_ids, count, user_name, hashtags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class view_suggestions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String item_id;
      private String a_ids;
      private int count;
      private String user_name;
      private String hashtags;
      public view_suggestions_call(String item_type, String item_id, String a_ids, int count, String user_name, String hashtags, org.apache.thrift.async.AsyncMethodCallback<view_suggestions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.item_id = item_id;
        this.a_ids = a_ids;
        this.count = count;
        this.user_name = user_name;
        this.hashtags = hashtags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("view_suggestions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        view_suggestions_args args = new view_suggestions_args();
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.setA_ids(a_ids);
        args.setCount(count);
        args.setUser_name(user_name);
        args.setHashtags(hashtags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_view_suggestions();
      }
    }

    public void cf_suggestions(String item_type, String item_id, String user_name, org.apache.thrift.async.AsyncMethodCallback<cf_suggestions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cf_suggestions_call method_call = new cf_suggestions_call(item_type, item_id, user_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cf_suggestions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String item_id;
      private String user_name;
      public cf_suggestions_call(String item_type, String item_id, String user_name, org.apache.thrift.async.AsyncMethodCallback<cf_suggestions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.item_id = item_id;
        this.user_name = user_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cf_suggestions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cf_suggestions_args args = new cf_suggestions_args();
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.setUser_name(user_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cf_suggestions();
      }
    }

    public void hashtag_suggestions(String item_type, String item_id, String content, String cat, org.apache.thrift.async.AsyncMethodCallback<hashtag_suggestions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hashtag_suggestions_call method_call = new hashtag_suggestions_call(item_type, item_id, content, cat, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hashtag_suggestions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String item_id;
      private String content;
      private String cat;
      public hashtag_suggestions_call(String item_type, String item_id, String content, String cat, org.apache.thrift.async.AsyncMethodCallback<hashtag_suggestions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.item_id = item_id;
        this.content = content;
        this.cat = cat;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hashtag_suggestions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hashtag_suggestions_args args = new hashtag_suggestions_args();
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.setContent(content);
        args.setCat(cat);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hashtag_suggestions();
      }
    }

    public void search(String user_name, String content, int cnt, int prev_cnt, String item_type, org.apache.thrift.async.AsyncMethodCallback<search_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      search_call method_call = new search_call(user_name, content, cnt, prev_cnt, item_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class search_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String content;
      private int cnt;
      private int prev_cnt;
      private String item_type;
      public search_call(String user_name, String content, int cnt, int prev_cnt, String item_type, org.apache.thrift.async.AsyncMethodCallback<search_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.content = content;
        this.cnt = cnt;
        this.prev_cnt = prev_cnt;
        this.item_type = item_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("search", org.apache.thrift.protocol.TMessageType.CALL, 0));
        search_args args = new search_args();
        args.setUser_name(user_name);
        args.setContent(content);
        args.setCnt(cnt);
        args.setPrev_cnt(prev_cnt);
        args.setItem_type(item_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_search();
      }
    }

    public void add_feed(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<add_feed_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      add_feed_call method_call = new add_feed_call(item_type, item_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class add_feed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String item_id;
      public add_feed_call(String item_type, String item_id, org.apache.thrift.async.AsyncMethodCallback<add_feed_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.item_id = item_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add_feed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        add_feed_args args = new add_feed_args();
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_add_feed();
      }
    }

    public void pin_item(String item_type, String item_id, String cat, String space_id, org.apache.thrift.async.AsyncMethodCallback<pin_item_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pin_item_call method_call = new pin_item_call(item_type, item_id, cat, space_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pin_item_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String item_id;
      private String cat;
      private String space_id;
      public pin_item_call(String item_type, String item_id, String cat, String space_id, org.apache.thrift.async.AsyncMethodCallback<pin_item_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.item_id = item_id;
        this.cat = cat;
        this.space_id = space_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pin_item", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pin_item_args args = new pin_item_args();
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.setCat(cat);
        args.setSpace_id(space_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pin_item();
      }
    }

    public void exclusive_article(String a_id, String cat, org.apache.thrift.async.AsyncMethodCallback<exclusive_article_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exclusive_article_call method_call = new exclusive_article_call(a_id, cat, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exclusive_article_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String a_id;
      private String cat;
      public exclusive_article_call(String a_id, String cat, org.apache.thrift.async.AsyncMethodCallback<exclusive_article_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.a_id = a_id;
        this.cat = cat;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exclusive_article", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exclusive_article_args args = new exclusive_article_args();
        args.setA_id(a_id);
        args.setCat(cat);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exclusive_article();
      }
    }

    public void pin_article_category(String a_id, org.apache.thrift.async.AsyncMethodCallback<pin_article_category_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pin_article_category_call method_call = new pin_article_category_call(a_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pin_article_category_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String a_id;
      public pin_article_category_call(String a_id, org.apache.thrift.async.AsyncMethodCallback<pin_article_category_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.a_id = a_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pin_article_category", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pin_article_category_args args = new pin_article_category_args();
        args.setA_id(a_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pin_article_category();
      }
    }

    public void exclusive_article_category(String a_id, org.apache.thrift.async.AsyncMethodCallback<exclusive_article_category_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exclusive_article_category_call method_call = new exclusive_article_category_call(a_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exclusive_article_category_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String a_id;
      public exclusive_article_category_call(String a_id, org.apache.thrift.async.AsyncMethodCallback<exclusive_article_category_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.a_id = a_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exclusive_article_category", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exclusive_article_category_args args = new exclusive_article_category_args();
        args.setA_id(a_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exclusive_article_category();
      }
    }

    public void get_user_tiles(String user_name, org.apache.thrift.async.AsyncMethodCallback<get_user_tiles_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_user_tiles_call method_call = new get_user_tiles_call(user_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_user_tiles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      public get_user_tiles_call(String user_name, org.apache.thrift.async.AsyncMethodCallback<get_user_tiles_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_user_tiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_user_tiles_args args = new get_user_tiles_args();
        args.setUser_name(user_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_user_tiles();
      }
    }

    public void create_event(String user_name, String e_id, String e_title_id, String e_title, String e_content, int e_date_time, int e_date_time_closing, int e_limit, String e_location, String e_cat, String e_subcat, String e_hashtags, String e_users, int e_time_created, String a_id, String e_summary, int is_edit, String e_fut_image, int is_closed, org.apache.thrift.async.AsyncMethodCallback<create_event_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_event_call method_call = new create_event_call(user_name, e_id, e_title_id, e_title, e_content, e_date_time, e_date_time_closing, e_limit, e_location, e_cat, e_subcat, e_hashtags, e_users, e_time_created, a_id, e_summary, is_edit, e_fut_image, is_closed, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_event_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String e_id;
      private String e_title_id;
      private String e_title;
      private String e_content;
      private int e_date_time;
      private int e_date_time_closing;
      private int e_limit;
      private String e_location;
      private String e_cat;
      private String e_subcat;
      private String e_hashtags;
      private String e_users;
      private int e_time_created;
      private String a_id;
      private String e_summary;
      private int is_edit;
      private String e_fut_image;
      private int is_closed;
      public create_event_call(String user_name, String e_id, String e_title_id, String e_title, String e_content, int e_date_time, int e_date_time_closing, int e_limit, String e_location, String e_cat, String e_subcat, String e_hashtags, String e_users, int e_time_created, String a_id, String e_summary, int is_edit, String e_fut_image, int is_closed, org.apache.thrift.async.AsyncMethodCallback<create_event_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.e_id = e_id;
        this.e_title_id = e_title_id;
        this.e_title = e_title;
        this.e_content = e_content;
        this.e_date_time = e_date_time;
        this.e_date_time_closing = e_date_time_closing;
        this.e_limit = e_limit;
        this.e_location = e_location;
        this.e_cat = e_cat;
        this.e_subcat = e_subcat;
        this.e_hashtags = e_hashtags;
        this.e_users = e_users;
        this.e_time_created = e_time_created;
        this.a_id = a_id;
        this.e_summary = e_summary;
        this.is_edit = is_edit;
        this.e_fut_image = e_fut_image;
        this.is_closed = is_closed;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_event", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_event_args args = new create_event_args();
        args.setUser_name(user_name);
        args.setE_id(e_id);
        args.setE_title_id(e_title_id);
        args.setE_title(e_title);
        args.setE_content(e_content);
        args.setE_date_time(e_date_time);
        args.setE_date_time_closing(e_date_time_closing);
        args.setE_limit(e_limit);
        args.setE_location(e_location);
        args.setE_cat(e_cat);
        args.setE_subcat(e_subcat);
        args.setE_hashtags(e_hashtags);
        args.setE_users(e_users);
        args.setE_time_created(e_time_created);
        args.setA_id(a_id);
        args.setE_summary(e_summary);
        args.setIs_edit(is_edit);
        args.setE_fut_image(e_fut_image);
        args.setIs_closed(is_closed);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_event();
      }
    }

    public void report_spam(String item_type, String item_id, String user_name, int time, org.apache.thrift.async.AsyncMethodCallback<report_spam_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      report_spam_call method_call = new report_spam_call(item_type, item_id, user_name, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class report_spam_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String item_id;
      private String user_name;
      private int time;
      public report_spam_call(String item_type, String item_id, String user_name, int time, org.apache.thrift.async.AsyncMethodCallback<report_spam_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.item_id = item_id;
        this.user_name = user_name;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("report_spam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        report_spam_args args = new report_spam_args();
        args.setItem_type(item_type);
        args.setItem_id(item_id);
        args.setUser_name(user_name);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_report_spam();
      }
    }

    public void delete_event(String id, org.apache.thrift.async.AsyncMethodCallback<delete_event_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_event_call method_call = new delete_event_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_event_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public delete_event_call(String id, org.apache.thrift.async.AsyncMethodCallback<delete_event_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_event", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_event_args args = new delete_event_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_event();
      }
    }

    public void event_response(String id, String user_name, int time, org.apache.thrift.async.AsyncMethodCallback<event_response_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      event_response_call method_call = new event_response_call(id, user_name, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class event_response_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String user_name;
      private int time;
      public event_response_call(String id, String user_name, int time, org.apache.thrift.async.AsyncMethodCallback<event_response_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.user_name = user_name;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("event_response", org.apache.thrift.protocol.TMessageType.CALL, 0));
        event_response_args args = new event_response_args();
        args.setId(id);
        args.setUser_name(user_name);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_event_response();
      }
    }

    public void event_invite(String id, String user_name, String users, int time, org.apache.thrift.async.AsyncMethodCallback<event_invite_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      event_invite_call method_call = new event_invite_call(id, user_name, users, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class event_invite_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String user_name;
      private String users;
      private int time;
      public event_invite_call(String id, String user_name, String users, int time, org.apache.thrift.async.AsyncMethodCallback<event_invite_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.user_name = user_name;
        this.users = users;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("event_invite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        event_invite_args args = new event_invite_args();
        args.setId(id);
        args.setUser_name(user_name);
        args.setUsers(users);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_event_invite();
      }
    }

    public void event_notify(String user_name, String id, String content, int time, org.apache.thrift.async.AsyncMethodCallback<event_notify_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      event_notify_call method_call = new event_notify_call(user_name, id, content, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class event_notify_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String id;
      private String content;
      private int time;
      public event_notify_call(String user_name, String id, String content, int time, org.apache.thrift.async.AsyncMethodCallback<event_notify_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.id = id;
        this.content = content;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("event_notify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        event_notify_args args = new event_notify_args();
        args.setUser_name(user_name);
        args.setId(id);
        args.setContent(content);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_event_notify();
      }
    }

    public void event_changeresponse(String id, String user_name, int time, org.apache.thrift.async.AsyncMethodCallback<event_changeresponse_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      event_changeresponse_call method_call = new event_changeresponse_call(id, user_name, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class event_changeresponse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String user_name;
      private int time;
      public event_changeresponse_call(String id, String user_name, int time, org.apache.thrift.async.AsyncMethodCallback<event_changeresponse_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.user_name = user_name;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("event_changeresponse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        event_changeresponse_args args = new event_changeresponse_args();
        args.setId(id);
        args.setUser_name(user_name);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_event_changeresponse();
      }
    }

    public void get_events_category(String user_name, String category, org.apache.thrift.async.AsyncMethodCallback<get_events_category_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_events_category_call method_call = new get_events_category_call(user_name, category, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_events_category_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String category;
      public get_events_category_call(String user_name, String category, org.apache.thrift.async.AsyncMethodCallback<get_events_category_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.category = category;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_events_category", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_events_category_args args = new get_events_category_args();
        args.setUser_name(user_name);
        args.setCategory(category);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_events_category();
      }
    }

    public void get_leftpane(String user_name, String item_type, String content, String category, org.apache.thrift.async.AsyncMethodCallback<get_leftpane_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_leftpane_call method_call = new get_leftpane_call(user_name, item_type, content, category, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_leftpane_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String item_type;
      private String content;
      private String category;
      public get_leftpane_call(String user_name, String item_type, String content, String category, org.apache.thrift.async.AsyncMethodCallback<get_leftpane_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.item_type = item_type;
        this.content = content;
        this.category = category;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_leftpane", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_leftpane_args args = new get_leftpane_args();
        args.setUser_name(user_name);
        args.setItem_type(item_type);
        args.setContent(content);
        args.setCategory(category);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_leftpane();
      }
    }

    public void get_leftpane_more(String user_name, String item_type, String item_name, String content, String category, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_leftpane_more_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_leftpane_more_call method_call = new get_leftpane_more_call(user_name, item_type, item_name, content, category, count, prev_cnt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_leftpane_more_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String item_type;
      private String item_name;
      private String content;
      private String category;
      private int count;
      private int prev_cnt;
      public get_leftpane_more_call(String user_name, String item_type, String item_name, String content, String category, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_leftpane_more_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.item_type = item_type;
        this.item_name = item_name;
        this.content = content;
        this.category = category;
        this.count = count;
        this.prev_cnt = prev_cnt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_leftpane_more", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_leftpane_more_args args = new get_leftpane_more_args();
        args.setUser_name(user_name);
        args.setItem_type(item_type);
        args.setItem_name(item_name);
        args.setContent(content);
        args.setCategory(category);
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_leftpane_more();
      }
    }

    public void get_more_events_category(String user_name, String category, int event_type, org.apache.thrift.async.AsyncMethodCallback<get_more_events_category_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_more_events_category_call method_call = new get_more_events_category_call(user_name, category, event_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_more_events_category_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String category;
      private int event_type;
      public get_more_events_category_call(String user_name, String category, int event_type, org.apache.thrift.async.AsyncMethodCallback<get_more_events_category_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.category = category;
        this.event_type = event_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_more_events_category", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_more_events_category_args args = new get_more_events_category_args();
        args.setUser_name(user_name);
        args.setCategory(category);
        args.setEvent_type(event_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_more_events_category();
      }
    }

    public void get_more_events(String user_name, String category, org.apache.thrift.async.AsyncMethodCallback<get_more_events_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_more_events_call method_call = new get_more_events_call(user_name, category, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_more_events_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String category;
      public get_more_events_call(String user_name, String category, org.apache.thrift.async.AsyncMethodCallback<get_more_events_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.category = category;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_more_events", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_more_events_args args = new get_more_events_args();
        args.setUser_name(user_name);
        args.setCategory(category);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_more_events();
      }
    }

    public void get_more_petitions(org.apache.thrift.async.AsyncMethodCallback<get_more_petitions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_more_petitions_call method_call = new get_more_petitions_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_more_petitions_call extends org.apache.thrift.async.TAsyncMethodCall {
      public get_more_petitions_call(org.apache.thrift.async.AsyncMethodCallback<get_more_petitions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_more_petitions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_more_petitions_args args = new get_more_petitions_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_more_petitions();
      }
    }

    public void get_more_debates(org.apache.thrift.async.AsyncMethodCallback<get_more_debates_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_more_debates_call method_call = new get_more_debates_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_more_debates_call extends org.apache.thrift.async.TAsyncMethodCall {
      public get_more_debates_call(org.apache.thrift.async.AsyncMethodCallback<get_more_debates_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_more_debates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_more_debates_args args = new get_more_debates_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_more_debates();
      }
    }

    public void get_more_townhalls(org.apache.thrift.async.AsyncMethodCallback<get_more_townhalls_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_more_townhalls_call method_call = new get_more_townhalls_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_more_townhalls_call extends org.apache.thrift.async.TAsyncMethodCall {
      public get_more_townhalls_call(org.apache.thrift.async.AsyncMethodCallback<get_more_townhalls_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_more_townhalls", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_more_townhalls_args args = new get_more_townhalls_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_more_townhalls();
      }
    }

    public void get_all_events(String user_name, String category, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_all_events_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_all_events_call method_call = new get_all_events_call(user_name, category, count, prev_cnt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_all_events_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String category;
      private int count;
      private int prev_cnt;
      public get_all_events_call(String user_name, String category, int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_all_events_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.category = category;
        this.count = count;
        this.prev_cnt = prev_cnt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_all_events", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_all_events_args args = new get_all_events_args();
        args.setUser_name(user_name);
        args.setCategory(category);
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_all_events();
      }
    }

    public void get_all_petitions(int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_all_petitions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_all_petitions_call method_call = new get_all_petitions_call(count, prev_cnt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_all_petitions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int count;
      private int prev_cnt;
      public get_all_petitions_call(int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_all_petitions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.count = count;
        this.prev_cnt = prev_cnt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_all_petitions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_all_petitions_args args = new get_all_petitions_args();
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_all_petitions();
      }
    }

    public void get_all_debates(int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_all_debates_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_all_debates_call method_call = new get_all_debates_call(count, prev_cnt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_all_debates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int count;
      private int prev_cnt;
      public get_all_debates_call(int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_all_debates_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.count = count;
        this.prev_cnt = prev_cnt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_all_debates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_all_debates_args args = new get_all_debates_args();
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_all_debates();
      }
    }

    public void get_all_townhalls(int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_all_townhalls_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_all_townhalls_call method_call = new get_all_townhalls_call(count, prev_cnt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_all_townhalls_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int count;
      private int prev_cnt;
      public get_all_townhalls_call(int count, int prev_cnt, org.apache.thrift.async.AsyncMethodCallback<get_all_townhalls_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.count = count;
        this.prev_cnt = prev_cnt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_all_townhalls", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_all_townhalls_args args = new get_all_townhalls_args();
        args.setCount(count);
        args.setPrev_cnt(prev_cnt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_all_townhalls();
      }
    }

    public void create_comment(String c_itemid, String c_itemgroup, String c_id, String c_content, String c_users, int c_time_created, String user_name, org.apache.thrift.async.AsyncMethodCallback<create_comment_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_comment_call method_call = new create_comment_call(c_itemid, c_itemgroup, c_id, c_content, c_users, c_time_created, user_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_comment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String c_itemid;
      private String c_itemgroup;
      private String c_id;
      private String c_content;
      private String c_users;
      private int c_time_created;
      private String user_name;
      public create_comment_call(String c_itemid, String c_itemgroup, String c_id, String c_content, String c_users, int c_time_created, String user_name, org.apache.thrift.async.AsyncMethodCallback<create_comment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.c_itemid = c_itemid;
        this.c_itemgroup = c_itemgroup;
        this.c_id = c_id;
        this.c_content = c_content;
        this.c_users = c_users;
        this.c_time_created = c_time_created;
        this.user_name = user_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_comment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_comment_args args = new create_comment_args();
        args.setC_itemid(c_itemid);
        args.setC_itemgroup(c_itemgroup);
        args.setC_id(c_id);
        args.setC_content(c_content);
        args.setC_users(c_users);
        args.setC_time_created(c_time_created);
        args.setUser_name(user_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_comment();
      }
    }

    public void create_comment_own(String c_itemid, String c_itemgroup, String c_id, String c_content, String c_users, int c_time_created, String user_name, org.apache.thrift.async.AsyncMethodCallback<create_comment_own_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_comment_own_call method_call = new create_comment_own_call(c_itemid, c_itemgroup, c_id, c_content, c_users, c_time_created, user_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_comment_own_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String c_itemid;
      private String c_itemgroup;
      private String c_id;
      private String c_content;
      private String c_users;
      private int c_time_created;
      private String user_name;
      public create_comment_own_call(String c_itemid, String c_itemgroup, String c_id, String c_content, String c_users, int c_time_created, String user_name, org.apache.thrift.async.AsyncMethodCallback<create_comment_own_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.c_itemid = c_itemid;
        this.c_itemgroup = c_itemgroup;
        this.c_id = c_id;
        this.c_content = c_content;
        this.c_users = c_users;
        this.c_time_created = c_time_created;
        this.user_name = user_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_comment_own", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_comment_own_args args = new create_comment_own_args();
        args.setC_itemid(c_itemid);
        args.setC_itemgroup(c_itemgroup);
        args.setC_id(c_id);
        args.setC_content(c_content);
        args.setC_users(c_users);
        args.setC_time_created(c_time_created);
        args.setUser_name(user_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_comment_own();
      }
    }

    public void edit_comment(String user_name, String c_id, String c_content, String c_users, int c_time_created, org.apache.thrift.async.AsyncMethodCallback<edit_comment_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      edit_comment_call method_call = new edit_comment_call(user_name, c_id, c_content, c_users, c_time_created, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class edit_comment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String c_id;
      private String c_content;
      private String c_users;
      private int c_time_created;
      public edit_comment_call(String user_name, String c_id, String c_content, String c_users, int c_time_created, org.apache.thrift.async.AsyncMethodCallback<edit_comment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.c_id = c_id;
        this.c_content = c_content;
        this.c_users = c_users;
        this.c_time_created = c_time_created;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("edit_comment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        edit_comment_args args = new edit_comment_args();
        args.setUser_name(user_name);
        args.setC_id(c_id);
        args.setC_content(c_content);
        args.setC_users(c_users);
        args.setC_time_created(c_time_created);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_edit_comment();
      }
    }

    public void delete_comment(String id, org.apache.thrift.async.AsyncMethodCallback<delete_comment_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_comment_call method_call = new delete_comment_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_comment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public delete_comment_call(String id, org.apache.thrift.async.AsyncMethodCallback<delete_comment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_comment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_comment_args args = new delete_comment_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_comment();
      }
    }

    public void comment_spam(String id, String user_name, int time, org.apache.thrift.async.AsyncMethodCallback<comment_spam_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      comment_spam_call method_call = new comment_spam_call(id, user_name, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class comment_spam_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String user_name;
      private int time;
      public comment_spam_call(String id, String user_name, int time, org.apache.thrift.async.AsyncMethodCallback<comment_spam_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.user_name = user_name;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("comment_spam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        comment_spam_args args = new comment_spam_args();
        args.setId(id);
        args.setUser_name(user_name);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_comment_spam();
      }
    }

    public void get_all_comments(String user_name, String c_itemtype, String c_itemid, org.apache.thrift.async.AsyncMethodCallback<get_all_comments_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_all_comments_call method_call = new get_all_comments_call(user_name, c_itemtype, c_itemid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_all_comments_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String c_itemtype;
      private String c_itemid;
      public get_all_comments_call(String user_name, String c_itemtype, String c_itemid, org.apache.thrift.async.AsyncMethodCallback<get_all_comments_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.c_itemtype = c_itemtype;
        this.c_itemid = c_itemid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_all_comments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_all_comments_args args = new get_all_comments_args();
        args.setUser_name(user_name);
        args.setC_itemtype(c_itemtype);
        args.setC_itemid(c_itemid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_all_comments();
      }
    }

    public void get_comments(String user_name, String c_id, org.apache.thrift.async.AsyncMethodCallback<get_comments_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_comments_call method_call = new get_comments_call(user_name, c_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_comments_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String c_id;
      public get_comments_call(String user_name, String c_id, org.apache.thrift.async.AsyncMethodCallback<get_comments_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.c_id = c_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_comments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_comments_args args = new get_comments_args();
        args.setUser_name(user_name);
        args.setC_id(c_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_comments();
      }
    }

    public void debate_townhall_suggestion(String item_type, String user_name, String item_id, String item_topic, String item_celebrity, int item_time_created, org.apache.thrift.async.AsyncMethodCallback<debate_townhall_suggestion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      debate_townhall_suggestion_call method_call = new debate_townhall_suggestion_call(item_type, user_name, item_id, item_topic, item_celebrity, item_time_created, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class debate_townhall_suggestion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String user_name;
      private String item_id;
      private String item_topic;
      private String item_celebrity;
      private int item_time_created;
      public debate_townhall_suggestion_call(String item_type, String user_name, String item_id, String item_topic, String item_celebrity, int item_time_created, org.apache.thrift.async.AsyncMethodCallback<debate_townhall_suggestion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.user_name = user_name;
        this.item_id = item_id;
        this.item_topic = item_topic;
        this.item_celebrity = item_celebrity;
        this.item_time_created = item_time_created;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("debate_townhall_suggestion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        debate_townhall_suggestion_args args = new debate_townhall_suggestion_args();
        args.setItem_type(item_type);
        args.setUser_name(user_name);
        args.setItem_id(item_id);
        args.setItem_topic(item_topic);
        args.setItem_celebrity(item_celebrity);
        args.setItem_time_created(item_time_created);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_debate_townhall_suggestion();
      }
    }

    public void debate_townhall_suggestion_voteup(String item_type, String user_name, String item_id, org.apache.thrift.async.AsyncMethodCallback<debate_townhall_suggestion_voteup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      debate_townhall_suggestion_voteup_call method_call = new debate_townhall_suggestion_voteup_call(item_type, user_name, item_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class debate_townhall_suggestion_voteup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String user_name;
      private String item_id;
      public debate_townhall_suggestion_voteup_call(String item_type, String user_name, String item_id, org.apache.thrift.async.AsyncMethodCallback<debate_townhall_suggestion_voteup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.user_name = user_name;
        this.item_id = item_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("debate_townhall_suggestion_voteup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        debate_townhall_suggestion_voteup_args args = new debate_townhall_suggestion_voteup_args();
        args.setItem_type(item_type);
        args.setUser_name(user_name);
        args.setItem_id(item_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_debate_townhall_suggestion_voteup();
      }
    }

    public void create_petition(String p_type, String user_name, String p_id, String p_title, String p_title_id, String p_content, String p_img_url, String p_to, int p_target, int p_count, int p_time_created, int p_end_date, String p_subcat, String p_hashtags, String p_cat, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<create_petition_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_petition_call method_call = new create_petition_call(p_type, user_name, p_id, p_title, p_title_id, p_content, p_img_url, p_to, p_target, p_count, p_time_created, p_end_date, p_subcat, p_hashtags, p_cat, is_edit, is_closed, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_petition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String p_type;
      private String user_name;
      private String p_id;
      private String p_title;
      private String p_title_id;
      private String p_content;
      private String p_img_url;
      private String p_to;
      private int p_target;
      private int p_count;
      private int p_time_created;
      private int p_end_date;
      private String p_subcat;
      private String p_hashtags;
      private String p_cat;
      private int is_edit;
      private int is_closed;
      public create_petition_call(String p_type, String user_name, String p_id, String p_title, String p_title_id, String p_content, String p_img_url, String p_to, int p_target, int p_count, int p_time_created, int p_end_date, String p_subcat, String p_hashtags, String p_cat, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<create_petition_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p_type = p_type;
        this.user_name = user_name;
        this.p_id = p_id;
        this.p_title = p_title;
        this.p_title_id = p_title_id;
        this.p_content = p_content;
        this.p_img_url = p_img_url;
        this.p_to = p_to;
        this.p_target = p_target;
        this.p_count = p_count;
        this.p_time_created = p_time_created;
        this.p_end_date = p_end_date;
        this.p_subcat = p_subcat;
        this.p_hashtags = p_hashtags;
        this.p_cat = p_cat;
        this.is_edit = is_edit;
        this.is_closed = is_closed;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_petition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_petition_args args = new create_petition_args();
        args.setP_type(p_type);
        args.setUser_name(user_name);
        args.setP_id(p_id);
        args.setP_title(p_title);
        args.setP_title_id(p_title_id);
        args.setP_content(p_content);
        args.setP_img_url(p_img_url);
        args.setP_to(p_to);
        args.setP_target(p_target);
        args.setP_count(p_count);
        args.setP_time_created(p_time_created);
        args.setP_end_date(p_end_date);
        args.setP_subcat(p_subcat);
        args.setP_hashtags(p_hashtags);
        args.setP_cat(p_cat);
        args.setIs_edit(is_edit);
        args.setIs_closed(is_closed);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_petition();
      }
    }

    public void sign_petition(String user_name, String p_id, int time, org.apache.thrift.async.AsyncMethodCallback<sign_petition_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sign_petition_call method_call = new sign_petition_call(user_name, p_id, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sign_petition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String p_id;
      private int time;
      public sign_petition_call(String user_name, String p_id, int time, org.apache.thrift.async.AsyncMethodCallback<sign_petition_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.p_id = p_id;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sign_petition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sign_petition_args args = new sign_petition_args();
        args.setUser_name(user_name);
        args.setP_id(p_id);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sign_petition();
      }
    }

    public void update_petition_signs(String p_id, int signs, org.apache.thrift.async.AsyncMethodCallback<update_petition_signs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_petition_signs_call method_call = new update_petition_signs_call(p_id, signs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_petition_signs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String p_id;
      private int signs;
      public update_petition_signs_call(String p_id, int signs, org.apache.thrift.async.AsyncMethodCallback<update_petition_signs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p_id = p_id;
        this.signs = signs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update_petition_signs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_petition_signs_args args = new update_petition_signs_args();
        args.setP_id(p_id);
        args.setSigns(signs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_update_petition_signs();
      }
    }

    public void user_signed_petition(String user_name, String p_id, org.apache.thrift.async.AsyncMethodCallback<user_signed_petition_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      user_signed_petition_call method_call = new user_signed_petition_call(user_name, p_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class user_signed_petition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String p_id;
      public user_signed_petition_call(String user_name, String p_id, org.apache.thrift.async.AsyncMethodCallback<user_signed_petition_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.p_id = p_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("user_signed_petition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        user_signed_petition_args args = new user_signed_petition_args();
        args.setUser_name(user_name);
        args.setP_id(p_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_user_signed_petition();
      }
    }

    public void create_debate(String user_name, String d_id, String d_title, String d_title_id, String d_content, String d_img_url, String d_criteria, int d_duration, int d_date, int d_time_created, String d_subcat, String d_hashtags, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<create_debate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_debate_call method_call = new create_debate_call(user_name, d_id, d_title, d_title_id, d_content, d_img_url, d_criteria, d_duration, d_date, d_time_created, d_subcat, d_hashtags, is_edit, is_closed, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_debate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String d_id;
      private String d_title;
      private String d_title_id;
      private String d_content;
      private String d_img_url;
      private String d_criteria;
      private int d_duration;
      private int d_date;
      private int d_time_created;
      private String d_subcat;
      private String d_hashtags;
      private int is_edit;
      private int is_closed;
      public create_debate_call(String user_name, String d_id, String d_title, String d_title_id, String d_content, String d_img_url, String d_criteria, int d_duration, int d_date, int d_time_created, String d_subcat, String d_hashtags, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<create_debate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.d_id = d_id;
        this.d_title = d_title;
        this.d_title_id = d_title_id;
        this.d_content = d_content;
        this.d_img_url = d_img_url;
        this.d_criteria = d_criteria;
        this.d_duration = d_duration;
        this.d_date = d_date;
        this.d_time_created = d_time_created;
        this.d_subcat = d_subcat;
        this.d_hashtags = d_hashtags;
        this.is_edit = is_edit;
        this.is_closed = is_closed;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_debate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_debate_args args = new create_debate_args();
        args.setUser_name(user_name);
        args.setD_id(d_id);
        args.setD_title(d_title);
        args.setD_title_id(d_title_id);
        args.setD_content(d_content);
        args.setD_img_url(d_img_url);
        args.setD_criteria(d_criteria);
        args.setD_duration(d_duration);
        args.setD_date(d_date);
        args.setD_time_created(d_time_created);
        args.setD_subcat(d_subcat);
        args.setD_hashtags(d_hashtags);
        args.setIs_edit(is_edit);
        args.setIs_closed(is_closed);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_debate();
      }
    }

    public void debate_action(String user_name, String d_id, String action_type, String qtn_id, String qtn_content, int time, org.apache.thrift.async.AsyncMethodCallback<debate_action_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      debate_action_call method_call = new debate_action_call(user_name, d_id, action_type, qtn_id, qtn_content, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class debate_action_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String d_id;
      private String action_type;
      private String qtn_id;
      private String qtn_content;
      private int time;
      public debate_action_call(String user_name, String d_id, String action_type, String qtn_id, String qtn_content, int time, org.apache.thrift.async.AsyncMethodCallback<debate_action_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.d_id = d_id;
        this.action_type = action_type;
        this.qtn_id = qtn_id;
        this.qtn_content = qtn_content;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("debate_action", org.apache.thrift.protocol.TMessageType.CALL, 0));
        debate_action_args args = new debate_action_args();
        args.setUser_name(user_name);
        args.setD_id(d_id);
        args.setAction_type(action_type);
        args.setQtn_id(qtn_id);
        args.setQtn_content(qtn_content);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_debate_action();
      }
    }

    public void debate_comment(String d_id, String user_name, String comment, int time, org.apache.thrift.async.AsyncMethodCallback<debate_comment_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      debate_comment_call method_call = new debate_comment_call(d_id, user_name, comment, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class debate_comment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String d_id;
      private String user_name;
      private String comment;
      private int time;
      public debate_comment_call(String d_id, String user_name, String comment, int time, org.apache.thrift.async.AsyncMethodCallback<debate_comment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.d_id = d_id;
        this.user_name = user_name;
        this.comment = comment;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("debate_comment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        debate_comment_args args = new debate_comment_args();
        args.setD_id(d_id);
        args.setUser_name(user_name);
        args.setComment(comment);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_debate_comment();
      }
    }

    public void debate_participate(String d_id, String user_name, String grp_name, String message, int time, org.apache.thrift.async.AsyncMethodCallback<debate_participate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      debate_participate_call method_call = new debate_participate_call(d_id, user_name, grp_name, message, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class debate_participate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String d_id;
      private String user_name;
      private String grp_name;
      private String message;
      private int time;
      public debate_participate_call(String d_id, String user_name, String grp_name, String message, int time, org.apache.thrift.async.AsyncMethodCallback<debate_participate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.d_id = d_id;
        this.user_name = user_name;
        this.grp_name = grp_name;
        this.message = message;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("debate_participate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        debate_participate_args args = new debate_participate_args();
        args.setD_id(d_id);
        args.setUser_name(user_name);
        args.setGrp_name(grp_name);
        args.setMessage(message);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_debate_participate();
      }
    }

    public void debate_shortlist_guests(String d_id, String grp_name, String user_names, org.apache.thrift.async.AsyncMethodCallback<debate_shortlist_guests_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      debate_shortlist_guests_call method_call = new debate_shortlist_guests_call(d_id, grp_name, user_names, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class debate_shortlist_guests_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String d_id;
      private String grp_name;
      private String user_names;
      public debate_shortlist_guests_call(String d_id, String grp_name, String user_names, org.apache.thrift.async.AsyncMethodCallback<debate_shortlist_guests_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.d_id = d_id;
        this.grp_name = grp_name;
        this.user_names = user_names;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("debate_shortlist_guests", org.apache.thrift.protocol.TMessageType.CALL, 0));
        debate_shortlist_guests_args args = new debate_shortlist_guests_args();
        args.setD_id(d_id);
        args.setGrp_name(grp_name);
        args.setUser_names(user_names);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_debate_shortlist_guests();
      }
    }

    public void debate_change_moderator(String d_id, String d_moderators, int time, org.apache.thrift.async.AsyncMethodCallback<debate_change_moderator_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      debate_change_moderator_call method_call = new debate_change_moderator_call(d_id, d_moderators, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class debate_change_moderator_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String d_id;
      private String d_moderators;
      private int time;
      public debate_change_moderator_call(String d_id, String d_moderators, int time, org.apache.thrift.async.AsyncMethodCallback<debate_change_moderator_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.d_id = d_id;
        this.d_moderators = d_moderators;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("debate_change_moderator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        debate_change_moderator_args args = new debate_change_moderator_args();
        args.setD_id(d_id);
        args.setD_moderators(d_moderators);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_debate_change_moderator();
      }
    }

    public void create_townhall(String user_name, String t_id, String t_title, String t_title_id, String t_content, String t_img_url, int t_date, int t_duration, int t_time_created, String t_celeb, String t_moderators, String t_subcat, String t_hashtags, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<create_townhall_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_townhall_call method_call = new create_townhall_call(user_name, t_id, t_title, t_title_id, t_content, t_img_url, t_date, t_duration, t_time_created, t_celeb, t_moderators, t_subcat, t_hashtags, is_edit, is_closed, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_townhall_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String t_id;
      private String t_title;
      private String t_title_id;
      private String t_content;
      private String t_img_url;
      private int t_date;
      private int t_duration;
      private int t_time_created;
      private String t_celeb;
      private String t_moderators;
      private String t_subcat;
      private String t_hashtags;
      private int is_edit;
      private int is_closed;
      public create_townhall_call(String user_name, String t_id, String t_title, String t_title_id, String t_content, String t_img_url, int t_date, int t_duration, int t_time_created, String t_celeb, String t_moderators, String t_subcat, String t_hashtags, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<create_townhall_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.t_id = t_id;
        this.t_title = t_title;
        this.t_title_id = t_title_id;
        this.t_content = t_content;
        this.t_img_url = t_img_url;
        this.t_date = t_date;
        this.t_duration = t_duration;
        this.t_time_created = t_time_created;
        this.t_celeb = t_celeb;
        this.t_moderators = t_moderators;
        this.t_subcat = t_subcat;
        this.t_hashtags = t_hashtags;
        this.is_edit = is_edit;
        this.is_closed = is_closed;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_townhall", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_townhall_args args = new create_townhall_args();
        args.setUser_name(user_name);
        args.setT_id(t_id);
        args.setT_title(t_title);
        args.setT_title_id(t_title_id);
        args.setT_content(t_content);
        args.setT_img_url(t_img_url);
        args.setT_date(t_date);
        args.setT_duration(t_duration);
        args.setT_time_created(t_time_created);
        args.setT_celeb(t_celeb);
        args.setT_moderators(t_moderators);
        args.setT_subcat(t_subcat);
        args.setT_hashtags(t_hashtags);
        args.setIs_edit(is_edit);
        args.setIs_closed(is_closed);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_townhall();
      }
    }

    public void townhall_action(String user_name, String t_id, String action_type, String qtn_id, String qtn_content, int time, org.apache.thrift.async.AsyncMethodCallback<townhall_action_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      townhall_action_call method_call = new townhall_action_call(user_name, t_id, action_type, qtn_id, qtn_content, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class townhall_action_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String t_id;
      private String action_type;
      private String qtn_id;
      private String qtn_content;
      private int time;
      public townhall_action_call(String user_name, String t_id, String action_type, String qtn_id, String qtn_content, int time, org.apache.thrift.async.AsyncMethodCallback<townhall_action_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.t_id = t_id;
        this.action_type = action_type;
        this.qtn_id = qtn_id;
        this.qtn_content = qtn_content;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("townhall_action", org.apache.thrift.protocol.TMessageType.CALL, 0));
        townhall_action_args args = new townhall_action_args();
        args.setUser_name(user_name);
        args.setT_id(t_id);
        args.setAction_type(action_type);
        args.setQtn_id(qtn_id);
        args.setQtn_content(qtn_content);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_townhall_action();
      }
    }

    public void townhall_comment(String t_id, String user_name, String comment, int time, org.apache.thrift.async.AsyncMethodCallback<townhall_comment_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      townhall_comment_call method_call = new townhall_comment_call(t_id, user_name, comment, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class townhall_comment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String t_id;
      private String user_name;
      private String comment;
      private int time;
      public townhall_comment_call(String t_id, String user_name, String comment, int time, org.apache.thrift.async.AsyncMethodCallback<townhall_comment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.t_id = t_id;
        this.user_name = user_name;
        this.comment = comment;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("townhall_comment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        townhall_comment_args args = new townhall_comment_args();
        args.setT_id(t_id);
        args.setUser_name(user_name);
        args.setComment(comment);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_townhall_comment();
      }
    }

    public void townhall_approve_question(String t_id, String qtn_id, org.apache.thrift.async.AsyncMethodCallback<townhall_approve_question_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      townhall_approve_question_call method_call = new townhall_approve_question_call(t_id, qtn_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class townhall_approve_question_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String t_id;
      private String qtn_id;
      public townhall_approve_question_call(String t_id, String qtn_id, org.apache.thrift.async.AsyncMethodCallback<townhall_approve_question_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.t_id = t_id;
        this.qtn_id = qtn_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("townhall_approve_question", org.apache.thrift.protocol.TMessageType.CALL, 0));
        townhall_approve_question_args args = new townhall_approve_question_args();
        args.setT_id(t_id);
        args.setQtn_id(qtn_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_townhall_approve_question();
      }
    }

    public void townhall_change_moderator(String t_id, String t_moderators, int time, org.apache.thrift.async.AsyncMethodCallback<townhall_change_moderator_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      townhall_change_moderator_call method_call = new townhall_change_moderator_call(t_id, t_moderators, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class townhall_change_moderator_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String t_id;
      private String t_moderators;
      private int time;
      public townhall_change_moderator_call(String t_id, String t_moderators, int time, org.apache.thrift.async.AsyncMethodCallback<townhall_change_moderator_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.t_id = t_id;
        this.t_moderators = t_moderators;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("townhall_change_moderator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        townhall_change_moderator_args args = new townhall_change_moderator_args();
        args.setT_id(t_id);
        args.setT_moderators(t_moderators);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_townhall_change_moderator();
      }
    }

    public void delete_petition(String id, org.apache.thrift.async.AsyncMethodCallback<delete_petition_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_petition_call method_call = new delete_petition_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_petition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public delete_petition_call(String id, org.apache.thrift.async.AsyncMethodCallback<delete_petition_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_petition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_petition_args args = new delete_petition_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_petition();
      }
    }

    public void delete_debate(String id, org.apache.thrift.async.AsyncMethodCallback<delete_debate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_debate_call method_call = new delete_debate_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_debate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public delete_debate_call(String id, org.apache.thrift.async.AsyncMethodCallback<delete_debate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_debate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_debate_args args = new delete_debate_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_debate();
      }
    }

    public void delete_townhall(String id, org.apache.thrift.async.AsyncMethodCallback<delete_townhall_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_townhall_call method_call = new delete_townhall_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_townhall_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public delete_townhall_call(String id, org.apache.thrift.async.AsyncMethodCallback<delete_townhall_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_townhall", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_townhall_args args = new delete_townhall_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_townhall();
      }
    }

    public void delete_debate_townhall_suggestion(String item_type, String id, org.apache.thrift.async.AsyncMethodCallback<delete_debate_townhall_suggestion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_debate_townhall_suggestion_call method_call = new delete_debate_townhall_suggestion_call(item_type, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_debate_townhall_suggestion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String item_type;
      private String id;
      public delete_debate_townhall_suggestion_call(String item_type, String id, org.apache.thrift.async.AsyncMethodCallback<delete_debate_townhall_suggestion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.item_type = item_type;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_debate_townhall_suggestion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_debate_townhall_suggestion_args args = new delete_debate_townhall_suggestion_args();
        args.setItem_type(item_type);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_debate_townhall_suggestion();
      }
    }

    public void jar_check(org.apache.thrift.async.AsyncMethodCallback<jar_check_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      jar_check_call method_call = new jar_check_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class jar_check_call extends org.apache.thrift.async.TAsyncMethodCall {
      public jar_check_call(org.apache.thrift.async.AsyncMethodCallback<jar_check_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("jar_check", org.apache.thrift.protocol.TMessageType.CALL, 0));
        jar_check_args args = new jar_check_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_jar_check();
      }
    }

    public void tweet_sentiment(String hashtags, org.apache.thrift.async.AsyncMethodCallback<tweet_sentiment_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tweet_sentiment_call method_call = new tweet_sentiment_call(hashtags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tweet_sentiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String hashtags;
      public tweet_sentiment_call(String hashtags, org.apache.thrift.async.AsyncMethodCallback<tweet_sentiment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hashtags = hashtags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tweet_sentiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tweet_sentiment_args args = new tweet_sentiment_args();
        args.setHashtags(hashtags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_tweet_sentiment();
      }
    }

    public void sentiment_analysis(String hashtag, org.apache.thrift.async.AsyncMethodCallback<sentiment_analysis_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sentiment_analysis_call method_call = new sentiment_analysis_call(hashtag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sentiment_analysis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String hashtag;
      public sentiment_analysis_call(String hashtag, org.apache.thrift.async.AsyncMethodCallback<sentiment_analysis_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hashtag = hashtag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sentiment_analysis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sentiment_analysis_args args = new sentiment_analysis_args();
        args.setHashtag(hashtag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sentiment_analysis();
      }
    }

    public void create_space(String user_name, String space_id, String space_title_id, String space_title, String space_tagline, String space_fut_image, int space_time_created, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<create_space_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_space_call method_call = new create_space_call(user_name, space_id, space_title_id, space_title, space_tagline, space_fut_image, space_time_created, is_edit, is_closed, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_space_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String space_id;
      private String space_title_id;
      private String space_title;
      private String space_tagline;
      private String space_fut_image;
      private int space_time_created;
      private int is_edit;
      private int is_closed;
      public create_space_call(String user_name, String space_id, String space_title_id, String space_title, String space_tagline, String space_fut_image, int space_time_created, int is_edit, int is_closed, org.apache.thrift.async.AsyncMethodCallback<create_space_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.space_id = space_id;
        this.space_title_id = space_title_id;
        this.space_title = space_title;
        this.space_tagline = space_tagline;
        this.space_fut_image = space_fut_image;
        this.space_time_created = space_time_created;
        this.is_edit = is_edit;
        this.is_closed = is_closed;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_space", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_space_args args = new create_space_args();
        args.setUser_name(user_name);
        args.setSpace_id(space_id);
        args.setSpace_title_id(space_title_id);
        args.setSpace_title(space_title);
        args.setSpace_tagline(space_tagline);
        args.setSpace_fut_image(space_fut_image);
        args.setSpace_time_created(space_time_created);
        args.setIs_edit(is_edit);
        args.setIs_closed(is_closed);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_space();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("create_user", new create_user());
      processMap.put("user_subscribefeed", new user_subscribefeed());
      processMap.put("edit_user", new edit_user());
      processMap.put("update_weight", new update_weight());
      processMap.put("add_friends", new add_friends());
      processMap.put("get_friends", new get_friends());
      processMap.put("get_articles_hashtag", new get_articles_hashtag());
      processMap.put("get_articles_space", new get_articles_space());
      processMap.put("delete_user", new delete_user());
      processMap.put("user_follow", new user_follow());
      processMap.put("space_follow", new space_follow());
      processMap.put("space_tagitem", new space_tagitem());
      processMap.put("space_isclosed", new space_isclosed());
      processMap.put("user_unfollow", new user_unfollow());
      processMap.put("voteup_markfav_readlater", new voteup_markfav_readlater());
      processMap.put("votedown", new votedown());
      processMap.put("user_remove_hashfav", new user_remove_hashfav());
      processMap.put("user_add_hashfav", new user_add_hashfav());
      processMap.put("user_add_favtopic", new user_add_favtopic());
      processMap.put("user_view", new user_view());
      processMap.put("get_all_items", new get_all_items());
      processMap.put("get_user_data", new get_user_data());
      processMap.put("get_item_data", new get_item_data());
      processMap.put("get_monthly_items", new get_monthly_items());
      processMap.put("article_pushed", new article_pushed());
      processMap.put("stream", new stream());
      processMap.put("context", new context());
      processMap.put("notifications", new notifications());
      processMap.put("create_article", new create_article());
      processMap.put("create_cfpost", new create_cfpost());
      processMap.put("create_poll", new create_poll());
      processMap.put("respond_poll", new respond_poll());
      processMap.put("featured_item", new featured_item());
      processMap.put("headlines_item", new headlines_item());
      processMap.put("get_tiles", new get_tiles());
      processMap.put("get_tiles_temp", new get_tiles_temp());
      processMap.put("get_elections_home", new get_elections_home());
      processMap.put("get_elections_more", new get_elections_more());
      processMap.put("delete_article", new delete_article());
      processMap.put("delete_space", new delete_space());
      processMap.put("delete_poll", new delete_poll());
      processMap.put("get_userfeed", new get_userfeed());
      processMap.put("get_itemfeed", new get_itemfeed());
      processMap.put("get_trends", new get_trends());
      processMap.put("suggestions", new suggestions());
      processMap.put("suggestions_morenames", new suggestions_morenames());
      processMap.put("view_suggestions", new view_suggestions());
      processMap.put("cf_suggestions", new cf_suggestions());
      processMap.put("hashtag_suggestions", new hashtag_suggestions());
      processMap.put("search", new search());
      processMap.put("add_feed", new add_feed());
      processMap.put("pin_item", new pin_item());
      processMap.put("exclusive_article", new exclusive_article());
      processMap.put("pin_article_category", new pin_article_category());
      processMap.put("exclusive_article_category", new exclusive_article_category());
      processMap.put("get_user_tiles", new get_user_tiles());
      processMap.put("create_event", new create_event());
      processMap.put("report_spam", new report_spam());
      processMap.put("delete_event", new delete_event());
      processMap.put("event_response", new event_response());
      processMap.put("event_invite", new event_invite());
      processMap.put("event_notify", new event_notify());
      processMap.put("event_changeresponse", new event_changeresponse());
      processMap.put("get_events_category", new get_events_category());
      processMap.put("get_leftpane", new get_leftpane());
      processMap.put("get_leftpane_more", new get_leftpane_more());
      processMap.put("get_more_events_category", new get_more_events_category());
      processMap.put("get_more_events", new get_more_events());
      processMap.put("get_more_petitions", new get_more_petitions());
      processMap.put("get_more_debates", new get_more_debates());
      processMap.put("get_more_townhalls", new get_more_townhalls());
      processMap.put("get_all_events", new get_all_events());
      processMap.put("get_all_petitions", new get_all_petitions());
      processMap.put("get_all_debates", new get_all_debates());
      processMap.put("get_all_townhalls", new get_all_townhalls());
      processMap.put("create_comment", new create_comment());
      processMap.put("create_comment_own", new create_comment_own());
      processMap.put("edit_comment", new edit_comment());
      processMap.put("delete_comment", new delete_comment());
      processMap.put("comment_spam", new comment_spam());
      processMap.put("get_all_comments", new get_all_comments());
      processMap.put("get_comments", new get_comments());
      processMap.put("debate_townhall_suggestion", new debate_townhall_suggestion());
      processMap.put("debate_townhall_suggestion_voteup", new debate_townhall_suggestion_voteup());
      processMap.put("create_petition", new create_petition());
      processMap.put("sign_petition", new sign_petition());
      processMap.put("update_petition_signs", new update_petition_signs());
      processMap.put("user_signed_petition", new user_signed_petition());
      processMap.put("create_debate", new create_debate());
      processMap.put("debate_action", new debate_action());
      processMap.put("debate_comment", new debate_comment());
      processMap.put("debate_participate", new debate_participate());
      processMap.put("debate_shortlist_guests", new debate_shortlist_guests());
      processMap.put("debate_change_moderator", new debate_change_moderator());
      processMap.put("create_townhall", new create_townhall());
      processMap.put("townhall_action", new townhall_action());
      processMap.put("townhall_comment", new townhall_comment());
      processMap.put("townhall_approve_question", new townhall_approve_question());
      processMap.put("townhall_change_moderator", new townhall_change_moderator());
      processMap.put("delete_petition", new delete_petition());
      processMap.put("delete_debate", new delete_debate());
      processMap.put("delete_townhall", new delete_townhall());
      processMap.put("delete_debate_townhall_suggestion", new delete_debate_townhall_suggestion());
      processMap.put("jar_check", new jar_check());
      processMap.put("tweet_sentiment", new tweet_sentiment());
      processMap.put("sentiment_analysis", new sentiment_analysis());
      processMap.put("create_space", new create_space());
      return processMap;
    }

    private static class create_user<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_user_args> {
      public create_user() {
        super("create_user");
      }

      protected create_user_args getEmptyArgsInstance() {
        return new create_user_args();
      }

      protected create_user_result getResult(I iface, create_user_args args) throws org.apache.thrift.TException {
        create_user_result result = new create_user_result();
        result.success = iface.create_user(args.first_name, args.last_name, args.user_name, args.email, args.location, args.previlege, args.time_created, args.weight);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class user_subscribefeed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_subscribefeed_args> {
      public user_subscribefeed() {
        super("user_subscribefeed");
      }

      protected user_subscribefeed_args getEmptyArgsInstance() {
        return new user_subscribefeed_args();
      }

      protected user_subscribefeed_result getResult(I iface, user_subscribefeed_args args) throws org.apache.thrift.TException {
        user_subscribefeed_result result = new user_subscribefeed_result();
        result.success = iface.user_subscribefeed(args.user_name, args.feed_type);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class edit_user<I extends Iface> extends org.apache.thrift.ProcessFunction<I, edit_user_args> {
      public edit_user() {
        super("edit_user");
      }

      protected edit_user_args getEmptyArgsInstance() {
        return new edit_user_args();
      }

      protected edit_user_result getResult(I iface, edit_user_args args) throws org.apache.thrift.TException {
        edit_user_result result = new edit_user_result();
        result.success = iface.edit_user(args.first_name, args.last_name, args.user_name, args.email, args.location, args.previlege);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class update_weight<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_weight_args> {
      public update_weight() {
        super("update_weight");
      }

      protected update_weight_args getEmptyArgsInstance() {
        return new update_weight_args();
      }

      protected update_weight_result getResult(I iface, update_weight_args args) throws org.apache.thrift.TException {
        update_weight_result result = new update_weight_result();
        result.success = iface.update_weight(args.item_type, args.item_id, args.weight);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class add_friends<I extends Iface> extends org.apache.thrift.ProcessFunction<I, add_friends_args> {
      public add_friends() {
        super("add_friends");
      }

      protected add_friends_args getEmptyArgsInstance() {
        return new add_friends_args();
      }

      protected add_friends_result getResult(I iface, add_friends_args args) throws org.apache.thrift.TException {
        add_friends_result result = new add_friends_result();
        result.success = iface.add_friends(args.user_name, args.f_type, args.f_ids);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class get_friends<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_friends_args> {
      public get_friends() {
        super("get_friends");
      }

      protected get_friends_args getEmptyArgsInstance() {
        return new get_friends_args();
      }

      protected get_friends_result getResult(I iface, get_friends_args args) throws org.apache.thrift.TException {
        get_friends_result result = new get_friends_result();
        result.success = iface.get_friends(args.user_name);
        return result;
      }
    }

    private static class get_articles_hashtag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_articles_hashtag_args> {
      public get_articles_hashtag() {
        super("get_articles_hashtag");
      }

      protected get_articles_hashtag_args getEmptyArgsInstance() {
        return new get_articles_hashtag_args();
      }

      protected get_articles_hashtag_result getResult(I iface, get_articles_hashtag_args args) throws org.apache.thrift.TException {
        get_articles_hashtag_result result = new get_articles_hashtag_result();
        result.success = iface.get_articles_hashtag(args.user_name, args.hash, args.count, args.prev_cnt);
        return result;
      }
    }

    private static class get_articles_space<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_articles_space_args> {
      public get_articles_space() {
        super("get_articles_space");
      }

      protected get_articles_space_args getEmptyArgsInstance() {
        return new get_articles_space_args();
      }

      protected get_articles_space_result getResult(I iface, get_articles_space_args args) throws org.apache.thrift.TException {
        get_articles_space_result result = new get_articles_space_result();
        result.success = iface.get_articles_space(args.user_name, args.space, args.count, args.prev_cnt, args.admin_tagged);
        return result;
      }
    }

    private static class delete_user<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_user_args> {
      public delete_user() {
        super("delete_user");
      }

      protected delete_user_args getEmptyArgsInstance() {
        return new delete_user_args();
      }

      protected delete_user_result getResult(I iface, delete_user_args args) throws org.apache.thrift.TException {
        delete_user_result result = new delete_user_result();
        result.success = iface.delete_user(args.user_name);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class user_follow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_follow_args> {
      public user_follow() {
        super("user_follow");
      }

      protected user_follow_args getEmptyArgsInstance() {
        return new user_follow_args();
      }

      protected user_follow_result getResult(I iface, user_follow_args args) throws org.apache.thrift.TException {
        user_follow_result result = new user_follow_result();
        result.success = iface.user_follow(args.user_name1, args.user_name2, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class space_follow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, space_follow_args> {
      public space_follow() {
        super("space_follow");
      }

      protected space_follow_args getEmptyArgsInstance() {
        return new space_follow_args();
      }

      protected space_follow_result getResult(I iface, space_follow_args args) throws org.apache.thrift.TException {
        space_follow_result result = new space_follow_result();
        result.success = iface.space_follow(args.user_name, args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class space_tagitem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, space_tagitem_args> {
      public space_tagitem() {
        super("space_tagitem");
      }

      protected space_tagitem_args getEmptyArgsInstance() {
        return new space_tagitem_args();
      }

      protected space_tagitem_result getResult(I iface, space_tagitem_args args) throws org.apache.thrift.TException {
        space_tagitem_result result = new space_tagitem_result();
        result.success = iface.space_tagitem(args.space_id, args.item_type, args.item_id, args.tag_type);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class space_isclosed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, space_isclosed_args> {
      public space_isclosed() {
        super("space_isclosed");
      }

      protected space_isclosed_args getEmptyArgsInstance() {
        return new space_isclosed_args();
      }

      protected space_isclosed_result getResult(I iface, space_isclosed_args args) throws org.apache.thrift.TException {
        space_isclosed_result result = new space_isclosed_result();
        result.success = iface.space_isclosed(args.id, args.is_closed);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class user_unfollow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_unfollow_args> {
      public user_unfollow() {
        super("user_unfollow");
      }

      protected user_unfollow_args getEmptyArgsInstance() {
        return new user_unfollow_args();
      }

      protected user_unfollow_result getResult(I iface, user_unfollow_args args) throws org.apache.thrift.TException {
        user_unfollow_result result = new user_unfollow_result();
        result.success = iface.user_unfollow(args.user_name1, args.user_name2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class voteup_markfav_readlater<I extends Iface> extends org.apache.thrift.ProcessFunction<I, voteup_markfav_readlater_args> {
      public voteup_markfav_readlater() {
        super("voteup_markfav_readlater");
      }

      protected voteup_markfav_readlater_args getEmptyArgsInstance() {
        return new voteup_markfav_readlater_args();
      }

      protected voteup_markfav_readlater_result getResult(I iface, voteup_markfav_readlater_args args) throws org.apache.thrift.TException {
        voteup_markfav_readlater_result result = new voteup_markfav_readlater_result();
        result.success = iface.voteup_markfav_readlater(args.user_name, args.item_type, args.item_id, args.action, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class votedown<I extends Iface> extends org.apache.thrift.ProcessFunction<I, votedown_args> {
      public votedown() {
        super("votedown");
      }

      protected votedown_args getEmptyArgsInstance() {
        return new votedown_args();
      }

      protected votedown_result getResult(I iface, votedown_args args) throws org.apache.thrift.TException {
        votedown_result result = new votedown_result();
        result.success = iface.votedown(args.user_name, args.item_type, args.item_id, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class user_remove_hashfav<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_remove_hashfav_args> {
      public user_remove_hashfav() {
        super("user_remove_hashfav");
      }

      protected user_remove_hashfav_args getEmptyArgsInstance() {
        return new user_remove_hashfav_args();
      }

      protected user_remove_hashfav_result getResult(I iface, user_remove_hashfav_args args) throws org.apache.thrift.TException {
        user_remove_hashfav_result result = new user_remove_hashfav_result();
        result.success = iface.user_remove_hashfav(args.user_name, args.tag_name);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class user_add_hashfav<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_add_hashfav_args> {
      public user_add_hashfav() {
        super("user_add_hashfav");
      }

      protected user_add_hashfav_args getEmptyArgsInstance() {
        return new user_add_hashfav_args();
      }

      protected user_add_hashfav_result getResult(I iface, user_add_hashfav_args args) throws org.apache.thrift.TException {
        user_add_hashfav_result result = new user_add_hashfav_result();
        result.success = iface.user_add_hashfav(args.user_name, args.tag_name);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class user_add_favtopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_add_favtopic_args> {
      public user_add_favtopic() {
        super("user_add_favtopic");
      }

      protected user_add_favtopic_args getEmptyArgsInstance() {
        return new user_add_favtopic_args();
      }

      protected user_add_favtopic_result getResult(I iface, user_add_favtopic_args args) throws org.apache.thrift.TException {
        user_add_favtopic_result result = new user_add_favtopic_result();
        result.success = iface.user_add_favtopic(args.user_name, args.topics);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class user_view<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_view_args> {
      public user_view() {
        super("user_view");
      }

      protected user_view_args getEmptyArgsInstance() {
        return new user_view_args();
      }

      protected user_view_result getResult(I iface, user_view_args args) throws org.apache.thrift.TException {
        user_view_result result = new user_view_result();
        result.success = iface.user_view(args.user_name, args.item_type, args.item_id, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class get_all_items<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_all_items_args> {
      public get_all_items() {
        super("get_all_items");
      }

      protected get_all_items_args getEmptyArgsInstance() {
        return new get_all_items_args();
      }

      protected get_all_items_result getResult(I iface, get_all_items_args args) throws org.apache.thrift.TException {
        get_all_items_result result = new get_all_items_result();
        result.success = iface.get_all_items(args.item_type, args.user_name, args.count, args.prev_cnt);
        return result;
      }
    }

    private static class get_user_data<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_user_data_args> {
      public get_user_data() {
        super("get_user_data");
      }

      protected get_user_data_args getEmptyArgsInstance() {
        return new get_user_data_args();
      }

      protected get_user_data_result getResult(I iface, get_user_data_args args) throws org.apache.thrift.TException {
        get_user_data_result result = new get_user_data_result();
        result.success = iface.get_user_data(args.user_name);
        return result;
      }
    }

    private static class get_item_data<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_item_data_args> {
      public get_item_data() {
        super("get_item_data");
      }

      protected get_item_data_args getEmptyArgsInstance() {
        return new get_item_data_args();
      }

      protected get_item_data_result getResult(I iface, get_item_data_args args) throws org.apache.thrift.TException {
        get_item_data_result result = new get_item_data_result();
        result.success = iface.get_item_data(args.item_type, args.item_id);
        return result;
      }
    }

    private static class get_monthly_items<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_monthly_items_args> {
      public get_monthly_items() {
        super("get_monthly_items");
      }

      protected get_monthly_items_args getEmptyArgsInstance() {
        return new get_monthly_items_args();
      }

      protected get_monthly_items_result getResult(I iface, get_monthly_items_args args) throws org.apache.thrift.TException {
        get_monthly_items_result result = new get_monthly_items_result();
        result.success = iface.get_monthly_items();
        return result;
      }
    }

    private static class article_pushed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, article_pushed_args> {
      public article_pushed() {
        super("article_pushed");
      }

      protected article_pushed_args getEmptyArgsInstance() {
        return new article_pushed_args();
      }

      protected article_pushed_result getResult(I iface, article_pushed_args args) throws org.apache.thrift.TException {
        article_pushed_result result = new article_pushed_result();
        result.success = iface.article_pushed(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class stream<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stream_args> {
      public stream() {
        super("stream");
      }

      protected stream_args getEmptyArgsInstance() {
        return new stream_args();
      }

      protected stream_result getResult(I iface, stream_args args) throws org.apache.thrift.TException {
        stream_result result = new stream_result();
        result.success = iface.stream(args.user_name, args.item_type, args.count, args.prev_cnt);
        return result;
      }
    }

    private static class context<I extends Iface> extends org.apache.thrift.ProcessFunction<I, context_args> {
      public context() {
        super("context");
      }

      protected context_args getEmptyArgsInstance() {
        return new context_args();
      }

      protected context_result getResult(I iface, context_args args) throws org.apache.thrift.TException {
        context_result result = new context_result();
        result.success = iface.context(args.user_name, args.item_type, args.item_id, args.count, args.prev_cnt);
        return result;
      }
    }

    private static class notifications<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifications_args> {
      public notifications() {
        super("notifications");
      }

      protected notifications_args getEmptyArgsInstance() {
        return new notifications_args();
      }

      protected notifications_result getResult(I iface, notifications_args args) throws org.apache.thrift.TException {
        notifications_result result = new notifications_result();
        result.success = iface.notifications(args.user_name, args.count, args.prev_cnt);
        return result;
      }
    }

    private static class create_article<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_article_args> {
      public create_article() {
        super("create_article");
      }

      protected create_article_args getEmptyArgsInstance() {
        return new create_article_args();
      }

      protected create_article_result getResult(I iface, create_article_args args) throws org.apache.thrift.TException {
        create_article_result result = new create_article_result();
        result.success = iface.create_article(args.user_name, args.a_id, args.a_title_id, args.a_title, args.a_content, args.a_summary, args.a_fut_image, args.a_cat, args.a_subcat, args.a_hashtags, args.a_users, args.a_time_created, args.related_articles, args.related_events, args.mod_name, args.stars, args.is_edit, args.is_closed);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class create_cfpost<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_cfpost_args> {
      public create_cfpost() {
        super("create_cfpost");
      }

      protected create_cfpost_args getEmptyArgsInstance() {
        return new create_cfpost_args();
      }

      protected create_cfpost_result getResult(I iface, create_cfpost_args args) throws org.apache.thrift.TException {
        create_cfpost_result result = new create_cfpost_result();
        result.success = iface.create_cfpost(args.cf_user, args.cf_id, args.cf_title, args.cf_url, args.cf_content, args.cf_fut_image, args.cf_hashtags, args.cf_time_created, args.cf_end_date, args.cf_amt_target, args.cf_amt_raised, args.cf_ppl_count, args.is_edit);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class create_poll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_poll_args> {
      public create_poll() {
        super("create_poll");
      }

      protected create_poll_args getEmptyArgsInstance() {
        return new create_poll_args();
      }

      protected create_poll_result getResult(I iface, create_poll_args args) throws org.apache.thrift.TException {
        create_poll_result result = new create_poll_result();
        result.success = iface.create_poll(args.item_type, args.item_id, args.p_id, args.p_qtn, args.p_status, args.p_time_created);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class respond_poll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, respond_poll_args> {
      public respond_poll() {
        super("respond_poll");
      }

      protected respond_poll_args getEmptyArgsInstance() {
        return new respond_poll_args();
      }

      protected respond_poll_result getResult(I iface, respond_poll_args args) throws org.apache.thrift.TException {
        respond_poll_result result = new respond_poll_result();
        result.success = iface.respond_poll(args.user_name, args.p_id, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class featured_item<I extends Iface> extends org.apache.thrift.ProcessFunction<I, featured_item_args> {
      public featured_item() {
        super("featured_item");
      }

      protected featured_item_args getEmptyArgsInstance() {
        return new featured_item_args();
      }

      protected featured_item_result getResult(I iface, featured_item_args args) throws org.apache.thrift.TException {
        featured_item_result result = new featured_item_result();
        result.success = iface.featured_item(args.item_type, args.item_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class headlines_item<I extends Iface> extends org.apache.thrift.ProcessFunction<I, headlines_item_args> {
      public headlines_item() {
        super("headlines_item");
      }

      protected headlines_item_args getEmptyArgsInstance() {
        return new headlines_item_args();
      }

      protected headlines_item_result getResult(I iface, headlines_item_args args) throws org.apache.thrift.TException {
        headlines_item_result result = new headlines_item_result();
        result.success = iface.headlines_item(args.item_type, args.item_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class get_tiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_tiles_args> {
      public get_tiles() {
        super("get_tiles");
      }

      protected get_tiles_args getEmptyArgsInstance() {
        return new get_tiles_args();
      }

      protected get_tiles_result getResult(I iface, get_tiles_args args) throws org.apache.thrift.TException {
        get_tiles_result result = new get_tiles_result();
        result.success = iface.get_tiles(args.user_name, args.cat, args.count, args.prev_cnt, args.art_id, args.tiles_type);
        return result;
      }
    }

    private static class get_tiles_temp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_tiles_temp_args> {
      public get_tiles_temp() {
        super("get_tiles_temp");
      }

      protected get_tiles_temp_args getEmptyArgsInstance() {
        return new get_tiles_temp_args();
      }

      protected get_tiles_temp_result getResult(I iface, get_tiles_temp_args args) throws org.apache.thrift.TException {
        get_tiles_temp_result result = new get_tiles_temp_result();
        result.success = iface.get_tiles_temp(args.user_name, args.cat, args.count, args.prev_cnt, args.art_id, args.tiles_type);
        return result;
      }
    }

    private static class get_elections_home<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_elections_home_args> {
      public get_elections_home() {
        super("get_elections_home");
      }

      protected get_elections_home_args getEmptyArgsInstance() {
        return new get_elections_home_args();
      }

      protected get_elections_home_result getResult(I iface, get_elections_home_args args) throws org.apache.thrift.TException {
        get_elections_home_result result = new get_elections_home_result();
        result.success = iface.get_elections_home(args.user_name, args.filter_type, args.filter_value, args.count, args.prev_cnt);
        return result;
      }
    }

    private static class get_elections_more<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_elections_more_args> {
      public get_elections_more() {
        super("get_elections_more");
      }

      protected get_elections_more_args getEmptyArgsInstance() {
        return new get_elections_more_args();
      }

      protected get_elections_more_result getResult(I iface, get_elections_more_args args) throws org.apache.thrift.TException {
        get_elections_more_result result = new get_elections_more_result();
        result.success = iface.get_elections_more(args.user_name, args.filter_type, args.filter_value, args.item_type, args.count, args.prev_cnt);
        return result;
      }
    }

    private static class delete_article<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_article_args> {
      public delete_article() {
        super("delete_article");
      }

      protected delete_article_args getEmptyArgsInstance() {
        return new delete_article_args();
      }

      protected delete_article_result getResult(I iface, delete_article_args args) throws org.apache.thrift.TException {
        delete_article_result result = new delete_article_result();
        result.success = iface.delete_article(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class delete_space<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_space_args> {
      public delete_space() {
        super("delete_space");
      }

      protected delete_space_args getEmptyArgsInstance() {
        return new delete_space_args();
      }

      protected delete_space_result getResult(I iface, delete_space_args args) throws org.apache.thrift.TException {
        delete_space_result result = new delete_space_result();
        result.success = iface.delete_space(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class delete_poll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_poll_args> {
      public delete_poll() {
        super("delete_poll");
      }

      protected delete_poll_args getEmptyArgsInstance() {
        return new delete_poll_args();
      }

      protected delete_poll_result getResult(I iface, delete_poll_args args) throws org.apache.thrift.TException {
        delete_poll_result result = new delete_poll_result();
        result.success = iface.delete_poll(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class get_userfeed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_userfeed_args> {
      public get_userfeed() {
        super("get_userfeed");
      }

      protected get_userfeed_args getEmptyArgsInstance() {
        return new get_userfeed_args();
      }

      protected get_userfeed_result getResult(I iface, get_userfeed_args args) throws org.apache.thrift.TException {
        get_userfeed_result result = new get_userfeed_result();
        result.success = iface.get_userfeed(args.feed_type);
        return result;
      }
    }

    private static class get_itemfeed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_itemfeed_args> {
      public get_itemfeed() {
        super("get_itemfeed");
      }

      protected get_itemfeed_args getEmptyArgsInstance() {
        return new get_itemfeed_args();
      }

      protected get_itemfeed_result getResult(I iface, get_itemfeed_args args) throws org.apache.thrift.TException {
        get_itemfeed_result result = new get_itemfeed_result();
        result.success = iface.get_itemfeed(args.feed_type);
        return result;
      }
    }

    private static class get_trends<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_trends_args> {
      public get_trends() {
        super("get_trends");
      }

      protected get_trends_args getEmptyArgsInstance() {
        return new get_trends_args();
      }

      protected get_trends_result getResult(I iface, get_trends_args args) throws org.apache.thrift.TException {
        get_trends_result result = new get_trends_result();
        result.success = iface.get_trends(args.cat);
        return result;
      }
    }

    private static class suggestions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, suggestions_args> {
      public suggestions() {
        super("suggestions");
      }

      protected suggestions_args getEmptyArgsInstance() {
        return new suggestions_args();
      }

      protected suggestions_result getResult(I iface, suggestions_args args) throws org.apache.thrift.TException {
        suggestions_result result = new suggestions_result();
        result.success = iface.suggestions(args.item_type, args.item_id, args.content, args.cat, args.hashtags, args.count, args.prev_cnt);
        return result;
      }
    }

    private static class suggestions_morenames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, suggestions_morenames_args> {
      public suggestions_morenames() {
        super("suggestions_morenames");
      }

      protected suggestions_morenames_args getEmptyArgsInstance() {
        return new suggestions_morenames_args();
      }

      protected suggestions_morenames_result getResult(I iface, suggestions_morenames_args args) throws org.apache.thrift.TException {
        suggestions_morenames_result result = new suggestions_morenames_result();
        result.success = iface.suggestions_morenames(args.item_type, args.item_id);
        return result;
      }
    }

    private static class view_suggestions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, view_suggestions_args> {
      public view_suggestions() {
        super("view_suggestions");
      }

      protected view_suggestions_args getEmptyArgsInstance() {
        return new view_suggestions_args();
      }

      protected view_suggestions_result getResult(I iface, view_suggestions_args args) throws org.apache.thrift.TException {
        view_suggestions_result result = new view_suggestions_result();
        result.success = iface.view_suggestions(args.item_type, args.item_id, args.a_ids, args.count, args.user_name, args.hashtags);
        return result;
      }
    }

    private static class cf_suggestions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cf_suggestions_args> {
      public cf_suggestions() {
        super("cf_suggestions");
      }

      protected cf_suggestions_args getEmptyArgsInstance() {
        return new cf_suggestions_args();
      }

      protected cf_suggestions_result getResult(I iface, cf_suggestions_args args) throws org.apache.thrift.TException {
        cf_suggestions_result result = new cf_suggestions_result();
        result.success = iface.cf_suggestions(args.item_type, args.item_id, args.user_name);
        return result;
      }
    }

    private static class hashtag_suggestions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hashtag_suggestions_args> {
      public hashtag_suggestions() {
        super("hashtag_suggestions");
      }

      protected hashtag_suggestions_args getEmptyArgsInstance() {
        return new hashtag_suggestions_args();
      }

      protected hashtag_suggestions_result getResult(I iface, hashtag_suggestions_args args) throws org.apache.thrift.TException {
        hashtag_suggestions_result result = new hashtag_suggestions_result();
        result.success = iface.hashtag_suggestions(args.item_type, args.item_id, args.content, args.cat);
        return result;
      }
    }

    private static class search<I extends Iface> extends org.apache.thrift.ProcessFunction<I, search_args> {
      public search() {
        super("search");
      }

      protected search_args getEmptyArgsInstance() {
        return new search_args();
      }

      protected search_result getResult(I iface, search_args args) throws org.apache.thrift.TException {
        search_result result = new search_result();
        result.success = iface.search(args.user_name, args.content, args.cnt, args.prev_cnt, args.item_type);
        return result;
      }
    }

    private static class add_feed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, add_feed_args> {
      public add_feed() {
        super("add_feed");
      }

      protected add_feed_args getEmptyArgsInstance() {
        return new add_feed_args();
      }

      protected add_feed_result getResult(I iface, add_feed_args args) throws org.apache.thrift.TException {
        add_feed_result result = new add_feed_result();
        result.success = iface.add_feed(args.item_type, args.item_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class pin_item<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pin_item_args> {
      public pin_item() {
        super("pin_item");
      }

      protected pin_item_args getEmptyArgsInstance() {
        return new pin_item_args();
      }

      protected pin_item_result getResult(I iface, pin_item_args args) throws org.apache.thrift.TException {
        pin_item_result result = new pin_item_result();
        result.success = iface.pin_item(args.item_type, args.item_id, args.cat, args.space_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class exclusive_article<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exclusive_article_args> {
      public exclusive_article() {
        super("exclusive_article");
      }

      protected exclusive_article_args getEmptyArgsInstance() {
        return new exclusive_article_args();
      }

      protected exclusive_article_result getResult(I iface, exclusive_article_args args) throws org.apache.thrift.TException {
        exclusive_article_result result = new exclusive_article_result();
        result.success = iface.exclusive_article(args.a_id, args.cat);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class pin_article_category<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pin_article_category_args> {
      public pin_article_category() {
        super("pin_article_category");
      }

      protected pin_article_category_args getEmptyArgsInstance() {
        return new pin_article_category_args();
      }

      protected pin_article_category_result getResult(I iface, pin_article_category_args args) throws org.apache.thrift.TException {
        pin_article_category_result result = new pin_article_category_result();
        result.success = iface.pin_article_category(args.a_id);
        return result;
      }
    }

    private static class exclusive_article_category<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exclusive_article_category_args> {
      public exclusive_article_category() {
        super("exclusive_article_category");
      }

      protected exclusive_article_category_args getEmptyArgsInstance() {
        return new exclusive_article_category_args();
      }

      protected exclusive_article_category_result getResult(I iface, exclusive_article_category_args args) throws org.apache.thrift.TException {
        exclusive_article_category_result result = new exclusive_article_category_result();
        result.success = iface.exclusive_article_category(args.a_id);
        return result;
      }
    }

    private static class get_user_tiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_user_tiles_args> {
      public get_user_tiles() {
        super("get_user_tiles");
      }

      protected get_user_tiles_args getEmptyArgsInstance() {
        return new get_user_tiles_args();
      }

      protected get_user_tiles_result getResult(I iface, get_user_tiles_args args) throws org.apache.thrift.TException {
        get_user_tiles_result result = new get_user_tiles_result();
        result.success = iface.get_user_tiles(args.user_name);
        return result;
      }
    }

    private static class create_event<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_event_args> {
      public create_event() {
        super("create_event");
      }

      protected create_event_args getEmptyArgsInstance() {
        return new create_event_args();
      }

      protected create_event_result getResult(I iface, create_event_args args) throws org.apache.thrift.TException {
        create_event_result result = new create_event_result();
        result.success = iface.create_event(args.user_name, args.e_id, args.e_title_id, args.e_title, args.e_content, args.e_date_time, args.e_date_time_closing, args.e_limit, args.e_location, args.e_cat, args.e_subcat, args.e_hashtags, args.e_users, args.e_time_created, args.a_id, args.e_summary, args.is_edit, args.e_fut_image, args.is_closed);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class report_spam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, report_spam_args> {
      public report_spam() {
        super("report_spam");
      }

      protected report_spam_args getEmptyArgsInstance() {
        return new report_spam_args();
      }

      protected report_spam_result getResult(I iface, report_spam_args args) throws org.apache.thrift.TException {
        report_spam_result result = new report_spam_result();
        result.success = iface.report_spam(args.item_type, args.item_id, args.user_name, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class delete_event<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_event_args> {
      public delete_event() {
        super("delete_event");
      }

      protected delete_event_args getEmptyArgsInstance() {
        return new delete_event_args();
      }

      protected delete_event_result getResult(I iface, delete_event_args args) throws org.apache.thrift.TException {
        delete_event_result result = new delete_event_result();
        result.success = iface.delete_event(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class event_response<I extends Iface> extends org.apache.thrift.ProcessFunction<I, event_response_args> {
      public event_response() {
        super("event_response");
      }

      protected event_response_args getEmptyArgsInstance() {
        return new event_response_args();
      }

      protected event_response_result getResult(I iface, event_response_args args) throws org.apache.thrift.TException {
        event_response_result result = new event_response_result();
        result.success = iface.event_response(args.id, args.user_name, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class event_invite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, event_invite_args> {
      public event_invite() {
        super("event_invite");
      }

      protected event_invite_args getEmptyArgsInstance() {
        return new event_invite_args();
      }

      protected event_invite_result getResult(I iface, event_invite_args args) throws org.apache.thrift.TException {
        event_invite_result result = new event_invite_result();
        result.success = iface.event_invite(args.id, args.user_name, args.users, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class event_notify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, event_notify_args> {
      public event_notify() {
        super("event_notify");
      }

      protected event_notify_args getEmptyArgsInstance() {
        return new event_notify_args();
      }

      protected event_notify_result getResult(I iface, event_notify_args args) throws org.apache.thrift.TException {
        event_notify_result result = new event_notify_result();
        result.success = iface.event_notify(args.user_name, args.id, args.content, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class event_changeresponse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, event_changeresponse_args> {
      public event_changeresponse() {
        super("event_changeresponse");
      }

      protected event_changeresponse_args getEmptyArgsInstance() {
        return new event_changeresponse_args();
      }

      protected event_changeresponse_result getResult(I iface, event_changeresponse_args args) throws org.apache.thrift.TException {
        event_changeresponse_result result = new event_changeresponse_result();
        result.success = iface.event_changeresponse(args.id, args.user_name, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class get_events_category<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_events_category_args> {
      public get_events_category() {
        super("get_events_category");
      }

      protected get_events_category_args getEmptyArgsInstance() {
        return new get_events_category_args();
      }

      protected get_events_category_result getResult(I iface, get_events_category_args args) throws org.apache.thrift.TException {
        get_events_category_result result = new get_events_category_result();
        result.success = iface.get_events_category(args.user_name, args.category);
        return result;
      }
    }

    private static class get_leftpane<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_leftpane_args> {
      public get_leftpane() {
        super("get_leftpane");
      }

      protected get_leftpane_args getEmptyArgsInstance() {
        return new get_leftpane_args();
      }

      protected get_leftpane_result getResult(I iface, get_leftpane_args args) throws org.apache.thrift.TException {
        get_leftpane_result result = new get_leftpane_result();
        result.success = iface.get_leftpane(args.user_name, args.item_type, args.content, args.category);
        return result;
      }
    }

    private static class get_leftpane_more<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_leftpane_more_args> {
      public get_leftpane_more() {
        super("get_leftpane_more");
      }

      protected get_leftpane_more_args getEmptyArgsInstance() {
        return new get_leftpane_more_args();
      }

      protected get_leftpane_more_result getResult(I iface, get_leftpane_more_args args) throws org.apache.thrift.TException {
        get_leftpane_more_result result = new get_leftpane_more_result();
        result.success = iface.get_leftpane_more(args.user_name, args.item_type, args.item_name, args.content, args.category, args.count, args.prev_cnt);
        return result;
      }
    }

    private static class get_more_events_category<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_more_events_category_args> {
      public get_more_events_category() {
        super("get_more_events_category");
      }

      protected get_more_events_category_args getEmptyArgsInstance() {
        return new get_more_events_category_args();
      }

      protected get_more_events_category_result getResult(I iface, get_more_events_category_args args) throws org.apache.thrift.TException {
        get_more_events_category_result result = new get_more_events_category_result();
        result.success = iface.get_more_events_category(args.user_name, args.category, args.event_type);
        return result;
      }
    }

    private static class get_more_events<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_more_events_args> {
      public get_more_events() {
        super("get_more_events");
      }

      protected get_more_events_args getEmptyArgsInstance() {
        return new get_more_events_args();
      }

      protected get_more_events_result getResult(I iface, get_more_events_args args) throws org.apache.thrift.TException {
        get_more_events_result result = new get_more_events_result();
        result.success = iface.get_more_events(args.user_name, args.category);
        return result;
      }
    }

    private static class get_more_petitions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_more_petitions_args> {
      public get_more_petitions() {
        super("get_more_petitions");
      }

      protected get_more_petitions_args getEmptyArgsInstance() {
        return new get_more_petitions_args();
      }

      protected get_more_petitions_result getResult(I iface, get_more_petitions_args args) throws org.apache.thrift.TException {
        get_more_petitions_result result = new get_more_petitions_result();
        result.success = iface.get_more_petitions();
        return result;
      }
    }

    private static class get_more_debates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_more_debates_args> {
      public get_more_debates() {
        super("get_more_debates");
      }

      protected get_more_debates_args getEmptyArgsInstance() {
        return new get_more_debates_args();
      }

      protected get_more_debates_result getResult(I iface, get_more_debates_args args) throws org.apache.thrift.TException {
        get_more_debates_result result = new get_more_debates_result();
        result.success = iface.get_more_debates();
        return result;
      }
    }

    private static class get_more_townhalls<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_more_townhalls_args> {
      public get_more_townhalls() {
        super("get_more_townhalls");
      }

      protected get_more_townhalls_args getEmptyArgsInstance() {
        return new get_more_townhalls_args();
      }

      protected get_more_townhalls_result getResult(I iface, get_more_townhalls_args args) throws org.apache.thrift.TException {
        get_more_townhalls_result result = new get_more_townhalls_result();
        result.success = iface.get_more_townhalls();
        return result;
      }
    }

    private static class get_all_events<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_all_events_args> {
      public get_all_events() {
        super("get_all_events");
      }

      protected get_all_events_args getEmptyArgsInstance() {
        return new get_all_events_args();
      }

      protected get_all_events_result getResult(I iface, get_all_events_args args) throws org.apache.thrift.TException {
        get_all_events_result result = new get_all_events_result();
        result.success = iface.get_all_events(args.user_name, args.category, args.count, args.prev_cnt);
        return result;
      }
    }

    private static class get_all_petitions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_all_petitions_args> {
      public get_all_petitions() {
        super("get_all_petitions");
      }

      protected get_all_petitions_args getEmptyArgsInstance() {
        return new get_all_petitions_args();
      }

      protected get_all_petitions_result getResult(I iface, get_all_petitions_args args) throws org.apache.thrift.TException {
        get_all_petitions_result result = new get_all_petitions_result();
        result.success = iface.get_all_petitions(args.count, args.prev_cnt);
        return result;
      }
    }

    private static class get_all_debates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_all_debates_args> {
      public get_all_debates() {
        super("get_all_debates");
      }

      protected get_all_debates_args getEmptyArgsInstance() {
        return new get_all_debates_args();
      }

      protected get_all_debates_result getResult(I iface, get_all_debates_args args) throws org.apache.thrift.TException {
        get_all_debates_result result = new get_all_debates_result();
        result.success = iface.get_all_debates(args.count, args.prev_cnt);
        return result;
      }
    }

    private static class get_all_townhalls<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_all_townhalls_args> {
      public get_all_townhalls() {
        super("get_all_townhalls");
      }

      protected get_all_townhalls_args getEmptyArgsInstance() {
        return new get_all_townhalls_args();
      }

      protected get_all_townhalls_result getResult(I iface, get_all_townhalls_args args) throws org.apache.thrift.TException {
        get_all_townhalls_result result = new get_all_townhalls_result();
        result.success = iface.get_all_townhalls(args.count, args.prev_cnt);
        return result;
      }
    }

    private static class create_comment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_comment_args> {
      public create_comment() {
        super("create_comment");
      }

      protected create_comment_args getEmptyArgsInstance() {
        return new create_comment_args();
      }

      protected create_comment_result getResult(I iface, create_comment_args args) throws org.apache.thrift.TException {
        create_comment_result result = new create_comment_result();
        result.success = iface.create_comment(args.c_itemid, args.c_itemgroup, args.c_id, args.c_content, args.c_users, args.c_time_created, args.user_name);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class create_comment_own<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_comment_own_args> {
      public create_comment_own() {
        super("create_comment_own");
      }

      protected create_comment_own_args getEmptyArgsInstance() {
        return new create_comment_own_args();
      }

      protected create_comment_own_result getResult(I iface, create_comment_own_args args) throws org.apache.thrift.TException {
        create_comment_own_result result = new create_comment_own_result();
        result.success = iface.create_comment_own(args.c_itemid, args.c_itemgroup, args.c_id, args.c_content, args.c_users, args.c_time_created, args.user_name);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class edit_comment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, edit_comment_args> {
      public edit_comment() {
        super("edit_comment");
      }

      protected edit_comment_args getEmptyArgsInstance() {
        return new edit_comment_args();
      }

      protected edit_comment_result getResult(I iface, edit_comment_args args) throws org.apache.thrift.TException {
        edit_comment_result result = new edit_comment_result();
        result.success = iface.edit_comment(args.user_name, args.c_id, args.c_content, args.c_users, args.c_time_created);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class delete_comment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_comment_args> {
      public delete_comment() {
        super("delete_comment");
      }

      protected delete_comment_args getEmptyArgsInstance() {
        return new delete_comment_args();
      }

      protected delete_comment_result getResult(I iface, delete_comment_args args) throws org.apache.thrift.TException {
        delete_comment_result result = new delete_comment_result();
        result.success = iface.delete_comment(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class comment_spam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, comment_spam_args> {
      public comment_spam() {
        super("comment_spam");
      }

      protected comment_spam_args getEmptyArgsInstance() {
        return new comment_spam_args();
      }

      protected comment_spam_result getResult(I iface, comment_spam_args args) throws org.apache.thrift.TException {
        comment_spam_result result = new comment_spam_result();
        result.success = iface.comment_spam(args.id, args.user_name, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class get_all_comments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_all_comments_args> {
      public get_all_comments() {
        super("get_all_comments");
      }

      protected get_all_comments_args getEmptyArgsInstance() {
        return new get_all_comments_args();
      }

      protected get_all_comments_result getResult(I iface, get_all_comments_args args) throws org.apache.thrift.TException {
        get_all_comments_result result = new get_all_comments_result();
        result.success = iface.get_all_comments(args.user_name, args.c_itemtype, args.c_itemid);
        return result;
      }
    }

    private static class get_comments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_comments_args> {
      public get_comments() {
        super("get_comments");
      }

      protected get_comments_args getEmptyArgsInstance() {
        return new get_comments_args();
      }

      protected get_comments_result getResult(I iface, get_comments_args args) throws org.apache.thrift.TException {
        get_comments_result result = new get_comments_result();
        result.success = iface.get_comments(args.user_name, args.c_id);
        return result;
      }
    }

    private static class debate_townhall_suggestion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, debate_townhall_suggestion_args> {
      public debate_townhall_suggestion() {
        super("debate_townhall_suggestion");
      }

      protected debate_townhall_suggestion_args getEmptyArgsInstance() {
        return new debate_townhall_suggestion_args();
      }

      protected debate_townhall_suggestion_result getResult(I iface, debate_townhall_suggestion_args args) throws org.apache.thrift.TException {
        debate_townhall_suggestion_result result = new debate_townhall_suggestion_result();
        result.success = iface.debate_townhall_suggestion(args.item_type, args.user_name, args.item_id, args.item_topic, args.item_celebrity, args.item_time_created);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class debate_townhall_suggestion_voteup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, debate_townhall_suggestion_voteup_args> {
      public debate_townhall_suggestion_voteup() {
        super("debate_townhall_suggestion_voteup");
      }

      protected debate_townhall_suggestion_voteup_args getEmptyArgsInstance() {
        return new debate_townhall_suggestion_voteup_args();
      }

      protected debate_townhall_suggestion_voteup_result getResult(I iface, debate_townhall_suggestion_voteup_args args) throws org.apache.thrift.TException {
        debate_townhall_suggestion_voteup_result result = new debate_townhall_suggestion_voteup_result();
        result.success = iface.debate_townhall_suggestion_voteup(args.item_type, args.user_name, args.item_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class create_petition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_petition_args> {
      public create_petition() {
        super("create_petition");
      }

      protected create_petition_args getEmptyArgsInstance() {
        return new create_petition_args();
      }

      protected create_petition_result getResult(I iface, create_petition_args args) throws org.apache.thrift.TException {
        create_petition_result result = new create_petition_result();
        result.success = iface.create_petition(args.p_type, args.user_name, args.p_id, args.p_title, args.p_title_id, args.p_content, args.p_img_url, args.p_to, args.p_target, args.p_count, args.p_time_created, args.p_end_date, args.p_subcat, args.p_hashtags, args.p_cat, args.is_edit, args.is_closed);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class sign_petition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sign_petition_args> {
      public sign_petition() {
        super("sign_petition");
      }

      protected sign_petition_args getEmptyArgsInstance() {
        return new sign_petition_args();
      }

      protected sign_petition_result getResult(I iface, sign_petition_args args) throws org.apache.thrift.TException {
        sign_petition_result result = new sign_petition_result();
        result.success = iface.sign_petition(args.user_name, args.p_id, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class update_petition_signs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_petition_signs_args> {
      public update_petition_signs() {
        super("update_petition_signs");
      }

      protected update_petition_signs_args getEmptyArgsInstance() {
        return new update_petition_signs_args();
      }

      protected update_petition_signs_result getResult(I iface, update_petition_signs_args args) throws org.apache.thrift.TException {
        update_petition_signs_result result = new update_petition_signs_result();
        result.success = iface.update_petition_signs(args.p_id, args.signs);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class user_signed_petition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, user_signed_petition_args> {
      public user_signed_petition() {
        super("user_signed_petition");
      }

      protected user_signed_petition_args getEmptyArgsInstance() {
        return new user_signed_petition_args();
      }

      protected user_signed_petition_result getResult(I iface, user_signed_petition_args args) throws org.apache.thrift.TException {
        user_signed_petition_result result = new user_signed_petition_result();
        result.success = iface.user_signed_petition(args.user_name, args.p_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class create_debate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_debate_args> {
      public create_debate() {
        super("create_debate");
      }

      protected create_debate_args getEmptyArgsInstance() {
        return new create_debate_args();
      }

      protected create_debate_result getResult(I iface, create_debate_args args) throws org.apache.thrift.TException {
        create_debate_result result = new create_debate_result();
        result.success = iface.create_debate(args.user_name, args.d_id, args.d_title, args.d_title_id, args.d_content, args.d_img_url, args.d_criteria, args.d_duration, args.d_date, args.d_time_created, args.d_subcat, args.d_hashtags, args.is_edit, args.is_closed);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class debate_action<I extends Iface> extends org.apache.thrift.ProcessFunction<I, debate_action_args> {
      public debate_action() {
        super("debate_action");
      }

      protected debate_action_args getEmptyArgsInstance() {
        return new debate_action_args();
      }

      protected debate_action_result getResult(I iface, debate_action_args args) throws org.apache.thrift.TException {
        debate_action_result result = new debate_action_result();
        result.success = iface.debate_action(args.user_name, args.d_id, args.action_type, args.qtn_id, args.qtn_content, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class debate_comment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, debate_comment_args> {
      public debate_comment() {
        super("debate_comment");
      }

      protected debate_comment_args getEmptyArgsInstance() {
        return new debate_comment_args();
      }

      protected debate_comment_result getResult(I iface, debate_comment_args args) throws org.apache.thrift.TException {
        debate_comment_result result = new debate_comment_result();
        result.success = iface.debate_comment(args.d_id, args.user_name, args.comment, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class debate_participate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, debate_participate_args> {
      public debate_participate() {
        super("debate_participate");
      }

      protected debate_participate_args getEmptyArgsInstance() {
        return new debate_participate_args();
      }

      protected debate_participate_result getResult(I iface, debate_participate_args args) throws org.apache.thrift.TException {
        debate_participate_result result = new debate_participate_result();
        result.success = iface.debate_participate(args.d_id, args.user_name, args.grp_name, args.message, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class debate_shortlist_guests<I extends Iface> extends org.apache.thrift.ProcessFunction<I, debate_shortlist_guests_args> {
      public debate_shortlist_guests() {
        super("debate_shortlist_guests");
      }

      protected debate_shortlist_guests_args getEmptyArgsInstance() {
        return new debate_shortlist_guests_args();
      }

      protected debate_shortlist_guests_result getResult(I iface, debate_shortlist_guests_args args) throws org.apache.thrift.TException {
        debate_shortlist_guests_result result = new debate_shortlist_guests_result();
        result.success = iface.debate_shortlist_guests(args.d_id, args.grp_name, args.user_names);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class debate_change_moderator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, debate_change_moderator_args> {
      public debate_change_moderator() {
        super("debate_change_moderator");
      }

      protected debate_change_moderator_args getEmptyArgsInstance() {
        return new debate_change_moderator_args();
      }

      protected debate_change_moderator_result getResult(I iface, debate_change_moderator_args args) throws org.apache.thrift.TException {
        debate_change_moderator_result result = new debate_change_moderator_result();
        result.success = iface.debate_change_moderator(args.d_id, args.d_moderators, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class create_townhall<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_townhall_args> {
      public create_townhall() {
        super("create_townhall");
      }

      protected create_townhall_args getEmptyArgsInstance() {
        return new create_townhall_args();
      }

      protected create_townhall_result getResult(I iface, create_townhall_args args) throws org.apache.thrift.TException {
        create_townhall_result result = new create_townhall_result();
        result.success = iface.create_townhall(args.user_name, args.t_id, args.t_title, args.t_title_id, args.t_content, args.t_img_url, args.t_date, args.t_duration, args.t_time_created, args.t_celeb, args.t_moderators, args.t_subcat, args.t_hashtags, args.is_edit, args.is_closed);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class townhall_action<I extends Iface> extends org.apache.thrift.ProcessFunction<I, townhall_action_args> {
      public townhall_action() {
        super("townhall_action");
      }

      protected townhall_action_args getEmptyArgsInstance() {
        return new townhall_action_args();
      }

      protected townhall_action_result getResult(I iface, townhall_action_args args) throws org.apache.thrift.TException {
        townhall_action_result result = new townhall_action_result();
        result.success = iface.townhall_action(args.user_name, args.t_id, args.action_type, args.qtn_id, args.qtn_content, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class townhall_comment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, townhall_comment_args> {
      public townhall_comment() {
        super("townhall_comment");
      }

      protected townhall_comment_args getEmptyArgsInstance() {
        return new townhall_comment_args();
      }

      protected townhall_comment_result getResult(I iface, townhall_comment_args args) throws org.apache.thrift.TException {
        townhall_comment_result result = new townhall_comment_result();
        result.success = iface.townhall_comment(args.t_id, args.user_name, args.comment, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class townhall_approve_question<I extends Iface> extends org.apache.thrift.ProcessFunction<I, townhall_approve_question_args> {
      public townhall_approve_question() {
        super("townhall_approve_question");
      }

      protected townhall_approve_question_args getEmptyArgsInstance() {
        return new townhall_approve_question_args();
      }

      protected townhall_approve_question_result getResult(I iface, townhall_approve_question_args args) throws org.apache.thrift.TException {
        townhall_approve_question_result result = new townhall_approve_question_result();
        result.success = iface.townhall_approve_question(args.t_id, args.qtn_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class townhall_change_moderator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, townhall_change_moderator_args> {
      public townhall_change_moderator() {
        super("townhall_change_moderator");
      }

      protected townhall_change_moderator_args getEmptyArgsInstance() {
        return new townhall_change_moderator_args();
      }

      protected townhall_change_moderator_result getResult(I iface, townhall_change_moderator_args args) throws org.apache.thrift.TException {
        townhall_change_moderator_result result = new townhall_change_moderator_result();
        result.success = iface.townhall_change_moderator(args.t_id, args.t_moderators, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class delete_petition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_petition_args> {
      public delete_petition() {
        super("delete_petition");
      }

      protected delete_petition_args getEmptyArgsInstance() {
        return new delete_petition_args();
      }

      protected delete_petition_result getResult(I iface, delete_petition_args args) throws org.apache.thrift.TException {
        delete_petition_result result = new delete_petition_result();
        result.success = iface.delete_petition(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class delete_debate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_debate_args> {
      public delete_debate() {
        super("delete_debate");
      }

      protected delete_debate_args getEmptyArgsInstance() {
        return new delete_debate_args();
      }

      protected delete_debate_result getResult(I iface, delete_debate_args args) throws org.apache.thrift.TException {
        delete_debate_result result = new delete_debate_result();
        result.success = iface.delete_debate(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class delete_townhall<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_townhall_args> {
      public delete_townhall() {
        super("delete_townhall");
      }

      protected delete_townhall_args getEmptyArgsInstance() {
        return new delete_townhall_args();
      }

      protected delete_townhall_result getResult(I iface, delete_townhall_args args) throws org.apache.thrift.TException {
        delete_townhall_result result = new delete_townhall_result();
        result.success = iface.delete_townhall(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class delete_debate_townhall_suggestion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_debate_townhall_suggestion_args> {
      public delete_debate_townhall_suggestion() {
        super("delete_debate_townhall_suggestion");
      }

      protected delete_debate_townhall_suggestion_args getEmptyArgsInstance() {
        return new delete_debate_townhall_suggestion_args();
      }

      protected delete_debate_townhall_suggestion_result getResult(I iface, delete_debate_townhall_suggestion_args args) throws org.apache.thrift.TException {
        delete_debate_townhall_suggestion_result result = new delete_debate_townhall_suggestion_result();
        result.success = iface.delete_debate_townhall_suggestion(args.item_type, args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class jar_check<I extends Iface> extends org.apache.thrift.ProcessFunction<I, jar_check_args> {
      public jar_check() {
        super("jar_check");
      }

      protected jar_check_args getEmptyArgsInstance() {
        return new jar_check_args();
      }

      protected jar_check_result getResult(I iface, jar_check_args args) throws org.apache.thrift.TException {
        jar_check_result result = new jar_check_result();
        iface.jar_check();
        return result;
      }
    }

    private static class tweet_sentiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tweet_sentiment_args> {
      public tweet_sentiment() {
        super("tweet_sentiment");
      }

      protected tweet_sentiment_args getEmptyArgsInstance() {
        return new tweet_sentiment_args();
      }

      protected tweet_sentiment_result getResult(I iface, tweet_sentiment_args args) throws org.apache.thrift.TException {
        tweet_sentiment_result result = new tweet_sentiment_result();
        iface.tweet_sentiment(args.hashtags);
        return result;
      }
    }

    private static class sentiment_analysis<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sentiment_analysis_args> {
      public sentiment_analysis() {
        super("sentiment_analysis");
      }

      protected sentiment_analysis_args getEmptyArgsInstance() {
        return new sentiment_analysis_args();
      }

      protected sentiment_analysis_result getResult(I iface, sentiment_analysis_args args) throws org.apache.thrift.TException {
        sentiment_analysis_result result = new sentiment_analysis_result();
        result.success = iface.sentiment_analysis(args.hashtag);
        return result;
      }
    }

    private static class create_space<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_space_args> {
      public create_space() {
        super("create_space");
      }

      protected create_space_args getEmptyArgsInstance() {
        return new create_space_args();
      }

      protected create_space_result getResult(I iface, create_space_args args) throws org.apache.thrift.TException {
        create_space_result result = new create_space_result();
        result.success = iface.create_space(args.user_name, args.space_id, args.space_title_id, args.space_title, args.space_tagline, args.space_fut_image, args.space_time_created, args.is_edit, args.is_closed);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class create_user_args implements org.apache.thrift.TBase<create_user_args, create_user_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_user_args");

    private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("first_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("last_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField PREVILEGE_FIELD_DESC = new org.apache.thrift.protocol.TField("previlege", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("time_created", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.I32, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_user_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_user_argsTupleSchemeFactory());
    }

    public String first_name; // required
    public String last_name; // required
    public String user_name; // required
    public String email; // required
    public String location; // required
    public int previlege; // required
    public int time_created; // required
    public int weight; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRST_NAME((short)1, "first_name"),
      LAST_NAME((short)2, "last_name"),
      USER_NAME((short)3, "user_name"),
      EMAIL((short)4, "email"),
      LOCATION((short)5, "location"),
      PREVILEGE((short)6, "previlege"),
      TIME_CREATED((short)7, "time_created"),
      WEIGHT((short)8, "weight");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRST_NAME
            return FIRST_NAME;
          case 2: // LAST_NAME
            return LAST_NAME;
          case 3: // USER_NAME
            return USER_NAME;
          case 4: // EMAIL
            return EMAIL;
          case 5: // LOCATION
            return LOCATION;
          case 6: // PREVILEGE
            return PREVILEGE;
          case 7: // TIME_CREATED
            return TIME_CREATED;
          case 8: // WEIGHT
            return WEIGHT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PREVILEGE_ISSET_ID = 0;
    private static final int __TIME_CREATED_ISSET_ID = 1;
    private static final int __WEIGHT_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("first_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("last_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PREVILEGE, new org.apache.thrift.meta_data.FieldMetaData("previlege", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_user_args.class, metaDataMap);
    }

    public create_user_args() {
    }

    public create_user_args(
      String first_name,
      String last_name,
      String user_name,
      String email,
      String location,
      int previlege,
      int time_created,
      int weight)
    {
      this();
      this.first_name = first_name;
      this.last_name = last_name;
      this.user_name = user_name;
      this.email = email;
      this.location = location;
      this.previlege = previlege;
      setPrevilegeIsSet(true);
      this.time_created = time_created;
      setTime_createdIsSet(true);
      this.weight = weight;
      setWeightIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_user_args(create_user_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetFirst_name()) {
        this.first_name = other.first_name;
      }
      if (other.isSetLast_name()) {
        this.last_name = other.last_name;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetLocation()) {
        this.location = other.location;
      }
      this.previlege = other.previlege;
      this.time_created = other.time_created;
      this.weight = other.weight;
    }

    public create_user_args deepCopy() {
      return new create_user_args(this);
    }

    @Override
    public void clear() {
      this.first_name = null;
      this.last_name = null;
      this.user_name = null;
      this.email = null;
      this.location = null;
      setPrevilegeIsSet(false);
      this.previlege = 0;
      setTime_createdIsSet(false);
      this.time_created = 0;
      setWeightIsSet(false);
      this.weight = 0;
    }

    public String getFirst_name() {
      return this.first_name;
    }

    public create_user_args setFirst_name(String first_name) {
      this.first_name = first_name;
      return this;
    }

    public void unsetFirst_name() {
      this.first_name = null;
    }

    /** Returns true if field first_name is set (has been assigned a value) and false otherwise */
    public boolean isSetFirst_name() {
      return this.first_name != null;
    }

    public void setFirst_nameIsSet(boolean value) {
      if (!value) {
        this.first_name = null;
      }
    }

    public String getLast_name() {
      return this.last_name;
    }

    public create_user_args setLast_name(String last_name) {
      this.last_name = last_name;
      return this;
    }

    public void unsetLast_name() {
      this.last_name = null;
    }

    /** Returns true if field last_name is set (has been assigned a value) and false otherwise */
    public boolean isSetLast_name() {
      return this.last_name != null;
    }

    public void setLast_nameIsSet(boolean value) {
      if (!value) {
        this.last_name = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public create_user_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getEmail() {
      return this.email;
    }

    public create_user_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getLocation() {
      return this.location;
    }

    public create_user_args setLocation(String location) {
      this.location = location;
      return this;
    }

    public void unsetLocation() {
      this.location = null;
    }

    /** Returns true if field location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
      return this.location != null;
    }

    public void setLocationIsSet(boolean value) {
      if (!value) {
        this.location = null;
      }
    }

    public int getPrevilege() {
      return this.previlege;
    }

    public create_user_args setPrevilege(int previlege) {
      this.previlege = previlege;
      setPrevilegeIsSet(true);
      return this;
    }

    public void unsetPrevilege() {
      __isset_bit_vector.clear(__PREVILEGE_ISSET_ID);
    }

    /** Returns true if field previlege is set (has been assigned a value) and false otherwise */
    public boolean isSetPrevilege() {
      return __isset_bit_vector.get(__PREVILEGE_ISSET_ID);
    }

    public void setPrevilegeIsSet(boolean value) {
      __isset_bit_vector.set(__PREVILEGE_ISSET_ID, value);
    }

    public int getTime_created() {
      return this.time_created;
    }

    public create_user_args setTime_created(int time_created) {
      this.time_created = time_created;
      setTime_createdIsSet(true);
      return this;
    }

    public void unsetTime_created() {
      __isset_bit_vector.clear(__TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetTime_created() {
      return __isset_bit_vector.get(__TIME_CREATED_ISSET_ID);
    }

    public void setTime_createdIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_CREATED_ISSET_ID, value);
    }

    public int getWeight() {
      return this.weight;
    }

    public create_user_args setWeight(int weight) {
      this.weight = weight;
      setWeightIsSet(true);
      return this;
    }

    public void unsetWeight() {
      __isset_bit_vector.clear(__WEIGHT_ISSET_ID);
    }

    /** Returns true if field weight is set (has been assigned a value) and false otherwise */
    public boolean isSetWeight() {
      return __isset_bit_vector.get(__WEIGHT_ISSET_ID);
    }

    public void setWeightIsSet(boolean value) {
      __isset_bit_vector.set(__WEIGHT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIRST_NAME:
        if (value == null) {
          unsetFirst_name();
        } else {
          setFirst_name((String)value);
        }
        break;

      case LAST_NAME:
        if (value == null) {
          unsetLast_name();
        } else {
          setLast_name((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          setLocation((String)value);
        }
        break;

      case PREVILEGE:
        if (value == null) {
          unsetPrevilege();
        } else {
          setPrevilege((Integer)value);
        }
        break;

      case TIME_CREATED:
        if (value == null) {
          unsetTime_created();
        } else {
          setTime_created((Integer)value);
        }
        break;

      case WEIGHT:
        if (value == null) {
          unsetWeight();
        } else {
          setWeight((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRST_NAME:
        return getFirst_name();

      case LAST_NAME:
        return getLast_name();

      case USER_NAME:
        return getUser_name();

      case EMAIL:
        return getEmail();

      case LOCATION:
        return getLocation();

      case PREVILEGE:
        return Integer.valueOf(getPrevilege());

      case TIME_CREATED:
        return Integer.valueOf(getTime_created());

      case WEIGHT:
        return Integer.valueOf(getWeight());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIRST_NAME:
        return isSetFirst_name();
      case LAST_NAME:
        return isSetLast_name();
      case USER_NAME:
        return isSetUser_name();
      case EMAIL:
        return isSetEmail();
      case LOCATION:
        return isSetLocation();
      case PREVILEGE:
        return isSetPrevilege();
      case TIME_CREATED:
        return isSetTime_created();
      case WEIGHT:
        return isSetWeight();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_user_args)
        return this.equals((create_user_args)that);
      return false;
    }

    public boolean equals(create_user_args that) {
      if (that == null)
        return false;

      boolean this_present_first_name = true && this.isSetFirst_name();
      boolean that_present_first_name = true && that.isSetFirst_name();
      if (this_present_first_name || that_present_first_name) {
        if (!(this_present_first_name && that_present_first_name))
          return false;
        if (!this.first_name.equals(that.first_name))
          return false;
      }

      boolean this_present_last_name = true && this.isSetLast_name();
      boolean that_present_last_name = true && that.isSetLast_name();
      if (this_present_last_name || that_present_last_name) {
        if (!(this_present_last_name && that_present_last_name))
          return false;
        if (!this.last_name.equals(that.last_name))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_location = true && this.isSetLocation();
      boolean that_present_location = true && that.isSetLocation();
      if (this_present_location || that_present_location) {
        if (!(this_present_location && that_present_location))
          return false;
        if (!this.location.equals(that.location))
          return false;
      }

      boolean this_present_previlege = true;
      boolean that_present_previlege = true;
      if (this_present_previlege || that_present_previlege) {
        if (!(this_present_previlege && that_present_previlege))
          return false;
        if (this.previlege != that.previlege)
          return false;
      }

      boolean this_present_time_created = true;
      boolean that_present_time_created = true;
      if (this_present_time_created || that_present_time_created) {
        if (!(this_present_time_created && that_present_time_created))
          return false;
        if (this.time_created != that.time_created)
          return false;
      }

      boolean this_present_weight = true;
      boolean that_present_weight = true;
      if (this_present_weight || that_present_weight) {
        if (!(this_present_weight && that_present_weight))
          return false;
        if (this.weight != that.weight)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_user_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_user_args typedOther = (create_user_args)other;

      lastComparison = Boolean.valueOf(isSetFirst_name()).compareTo(typedOther.isSetFirst_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirst_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first_name, typedOther.first_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLast_name()).compareTo(typedOther.isSetLast_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLast_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_name, typedOther.last_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrevilege()).compareTo(typedOther.isSetPrevilege());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrevilege()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previlege, typedOther.previlege);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime_created()).compareTo(typedOther.isSetTime_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_created, typedOther.time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWeight()).compareTo(typedOther.isSetWeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, typedOther.weight);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_user_args(");
      boolean first = true;

      sb.append("first_name:");
      if (this.first_name == null) {
        sb.append("null");
      } else {
        sb.append(this.first_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("last_name:");
      if (this.last_name == null) {
        sb.append("null");
      } else {
        sb.append(this.last_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("previlege:");
      sb.append(this.previlege);
      first = false;
      if (!first) sb.append(", ");
      sb.append("time_created:");
      sb.append(this.time_created);
      first = false;
      if (!first) sb.append(", ");
      sb.append("weight:");
      sb.append(this.weight);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_user_argsStandardSchemeFactory implements SchemeFactory {
      public create_user_argsStandardScheme getScheme() {
        return new create_user_argsStandardScheme();
      }
    }

    private static class create_user_argsStandardScheme extends StandardScheme<create_user_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_user_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.first_name = iprot.readString();
                struct.setFirst_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LAST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.last_name = iprot.readString();
                struct.setLast_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.location = iprot.readString();
                struct.setLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PREVILEGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.previlege = iprot.readI32();
                struct.setPrevilegeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time_created = iprot.readI32();
                struct.setTime_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // WEIGHT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.weight = iprot.readI32();
                struct.setWeightIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_user_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.first_name != null) {
          oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
          oprot.writeString(struct.first_name);
          oprot.writeFieldEnd();
        }
        if (struct.last_name != null) {
          oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
          oprot.writeString(struct.last_name);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        if (struct.location != null) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PREVILEGE_FIELD_DESC);
        oprot.writeI32(struct.previlege);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.time_created);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
        oprot.writeI32(struct.weight);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_user_argsTupleSchemeFactory implements SchemeFactory {
      public create_user_argsTupleScheme getScheme() {
        return new create_user_argsTupleScheme();
      }
    }

    private static class create_user_argsTupleScheme extends TupleScheme<create_user_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFirst_name()) {
          optionals.set(0);
        }
        if (struct.isSetLast_name()) {
          optionals.set(1);
        }
        if (struct.isSetUser_name()) {
          optionals.set(2);
        }
        if (struct.isSetEmail()) {
          optionals.set(3);
        }
        if (struct.isSetLocation()) {
          optionals.set(4);
        }
        if (struct.isSetPrevilege()) {
          optionals.set(5);
        }
        if (struct.isSetTime_created()) {
          optionals.set(6);
        }
        if (struct.isSetWeight()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetFirst_name()) {
          oprot.writeString(struct.first_name);
        }
        if (struct.isSetLast_name()) {
          oprot.writeString(struct.last_name);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
        if (struct.isSetLocation()) {
          oprot.writeString(struct.location);
        }
        if (struct.isSetPrevilege()) {
          oprot.writeI32(struct.previlege);
        }
        if (struct.isSetTime_created()) {
          oprot.writeI32(struct.time_created);
        }
        if (struct.isSetWeight()) {
          oprot.writeI32(struct.weight);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.first_name = iprot.readString();
          struct.setFirst_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.last_name = iprot.readString();
          struct.setLast_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
        if (incoming.get(4)) {
          struct.location = iprot.readString();
          struct.setLocationIsSet(true);
        }
        if (incoming.get(5)) {
          struct.previlege = iprot.readI32();
          struct.setPrevilegeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.time_created = iprot.readI32();
          struct.setTime_createdIsSet(true);
        }
        if (incoming.get(7)) {
          struct.weight = iprot.readI32();
          struct.setWeightIsSet(true);
        }
      }
    }

  }

  public static class create_user_result implements org.apache.thrift.TBase<create_user_result, create_user_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_user_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_user_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_user_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_user_result.class, metaDataMap);
    }

    public create_user_result() {
    }

    public create_user_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_user_result(create_user_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public create_user_result deepCopy() {
      return new create_user_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public create_user_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_user_result)
        return this.equals((create_user_result)that);
      return false;
    }

    public boolean equals(create_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_user_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_user_result typedOther = (create_user_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_user_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_user_resultStandardSchemeFactory implements SchemeFactory {
      public create_user_resultStandardScheme getScheme() {
        return new create_user_resultStandardScheme();
      }
    }

    private static class create_user_resultStandardScheme extends StandardScheme<create_user_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_user_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_user_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_user_resultTupleSchemeFactory implements SchemeFactory {
      public create_user_resultTupleScheme getScheme() {
        return new create_user_resultTupleScheme();
      }
    }

    private static class create_user_resultTupleScheme extends TupleScheme<create_user_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class user_subscribefeed_args implements org.apache.thrift.TBase<user_subscribefeed_args, user_subscribefeed_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_subscribefeed_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FEED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("feed_type", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_subscribefeed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_subscribefeed_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String feed_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      FEED_TYPE((short)2, "feed_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // FEED_TYPE
            return FEED_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("feed_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_subscribefeed_args.class, metaDataMap);
    }

    public user_subscribefeed_args() {
    }

    public user_subscribefeed_args(
      String user_name,
      String feed_type)
    {
      this();
      this.user_name = user_name;
      this.feed_type = feed_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_subscribefeed_args(user_subscribefeed_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetFeed_type()) {
        this.feed_type = other.feed_type;
      }
    }

    public user_subscribefeed_args deepCopy() {
      return new user_subscribefeed_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.feed_type = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public user_subscribefeed_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getFeed_type() {
      return this.feed_type;
    }

    public user_subscribefeed_args setFeed_type(String feed_type) {
      this.feed_type = feed_type;
      return this;
    }

    public void unsetFeed_type() {
      this.feed_type = null;
    }

    /** Returns true if field feed_type is set (has been assigned a value) and false otherwise */
    public boolean isSetFeed_type() {
      return this.feed_type != null;
    }

    public void setFeed_typeIsSet(boolean value) {
      if (!value) {
        this.feed_type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case FEED_TYPE:
        if (value == null) {
          unsetFeed_type();
        } else {
          setFeed_type((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case FEED_TYPE:
        return getFeed_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case FEED_TYPE:
        return isSetFeed_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_subscribefeed_args)
        return this.equals((user_subscribefeed_args)that);
      return false;
    }

    public boolean equals(user_subscribefeed_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_feed_type = true && this.isSetFeed_type();
      boolean that_present_feed_type = true && that.isSetFeed_type();
      if (this_present_feed_type || that_present_feed_type) {
        if (!(this_present_feed_type && that_present_feed_type))
          return false;
        if (!this.feed_type.equals(that.feed_type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_subscribefeed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_subscribefeed_args typedOther = (user_subscribefeed_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeed_type()).compareTo(typedOther.isSetFeed_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeed_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feed_type, typedOther.feed_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_subscribefeed_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feed_type:");
      if (this.feed_type == null) {
        sb.append("null");
      } else {
        sb.append(this.feed_type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_subscribefeed_argsStandardSchemeFactory implements SchemeFactory {
      public user_subscribefeed_argsStandardScheme getScheme() {
        return new user_subscribefeed_argsStandardScheme();
      }
    }

    private static class user_subscribefeed_argsStandardScheme extends StandardScheme<user_subscribefeed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_subscribefeed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FEED_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feed_type = iprot.readString();
                struct.setFeed_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_subscribefeed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.feed_type != null) {
          oprot.writeFieldBegin(FEED_TYPE_FIELD_DESC);
          oprot.writeString(struct.feed_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_subscribefeed_argsTupleSchemeFactory implements SchemeFactory {
      public user_subscribefeed_argsTupleScheme getScheme() {
        return new user_subscribefeed_argsTupleScheme();
      }
    }

    private static class user_subscribefeed_argsTupleScheme extends TupleScheme<user_subscribefeed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_subscribefeed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetFeed_type()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetFeed_type()) {
          oprot.writeString(struct.feed_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_subscribefeed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.feed_type = iprot.readString();
          struct.setFeed_typeIsSet(true);
        }
      }
    }

  }

  public static class user_subscribefeed_result implements org.apache.thrift.TBase<user_subscribefeed_result, user_subscribefeed_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_subscribefeed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_subscribefeed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_subscribefeed_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_subscribefeed_result.class, metaDataMap);
    }

    public user_subscribefeed_result() {
    }

    public user_subscribefeed_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_subscribefeed_result(user_subscribefeed_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public user_subscribefeed_result deepCopy() {
      return new user_subscribefeed_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public user_subscribefeed_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_subscribefeed_result)
        return this.equals((user_subscribefeed_result)that);
      return false;
    }

    public boolean equals(user_subscribefeed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_subscribefeed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_subscribefeed_result typedOther = (user_subscribefeed_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_subscribefeed_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_subscribefeed_resultStandardSchemeFactory implements SchemeFactory {
      public user_subscribefeed_resultStandardScheme getScheme() {
        return new user_subscribefeed_resultStandardScheme();
      }
    }

    private static class user_subscribefeed_resultStandardScheme extends StandardScheme<user_subscribefeed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_subscribefeed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_subscribefeed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_subscribefeed_resultTupleSchemeFactory implements SchemeFactory {
      public user_subscribefeed_resultTupleScheme getScheme() {
        return new user_subscribefeed_resultTupleScheme();
      }
    }

    private static class user_subscribefeed_resultTupleScheme extends TupleScheme<user_subscribefeed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_subscribefeed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_subscribefeed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class edit_user_args implements org.apache.thrift.TBase<edit_user_args, edit_user_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_user_args");

    private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("first_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("last_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField PREVILEGE_FIELD_DESC = new org.apache.thrift.protocol.TField("previlege", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_user_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_user_argsTupleSchemeFactory());
    }

    public String first_name; // required
    public String last_name; // required
    public String user_name; // required
    public String email; // required
    public String location; // required
    public int previlege; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRST_NAME((short)1, "first_name"),
      LAST_NAME((short)2, "last_name"),
      USER_NAME((short)3, "user_name"),
      EMAIL((short)4, "email"),
      LOCATION((short)5, "location"),
      PREVILEGE((short)6, "previlege");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRST_NAME
            return FIRST_NAME;
          case 2: // LAST_NAME
            return LAST_NAME;
          case 3: // USER_NAME
            return USER_NAME;
          case 4: // EMAIL
            return EMAIL;
          case 5: // LOCATION
            return LOCATION;
          case 6: // PREVILEGE
            return PREVILEGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PREVILEGE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("first_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("last_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PREVILEGE, new org.apache.thrift.meta_data.FieldMetaData("previlege", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_user_args.class, metaDataMap);
    }

    public edit_user_args() {
    }

    public edit_user_args(
      String first_name,
      String last_name,
      String user_name,
      String email,
      String location,
      int previlege)
    {
      this();
      this.first_name = first_name;
      this.last_name = last_name;
      this.user_name = user_name;
      this.email = email;
      this.location = location;
      this.previlege = previlege;
      setPrevilegeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_user_args(edit_user_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetFirst_name()) {
        this.first_name = other.first_name;
      }
      if (other.isSetLast_name()) {
        this.last_name = other.last_name;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetLocation()) {
        this.location = other.location;
      }
      this.previlege = other.previlege;
    }

    public edit_user_args deepCopy() {
      return new edit_user_args(this);
    }

    @Override
    public void clear() {
      this.first_name = null;
      this.last_name = null;
      this.user_name = null;
      this.email = null;
      this.location = null;
      setPrevilegeIsSet(false);
      this.previlege = 0;
    }

    public String getFirst_name() {
      return this.first_name;
    }

    public edit_user_args setFirst_name(String first_name) {
      this.first_name = first_name;
      return this;
    }

    public void unsetFirst_name() {
      this.first_name = null;
    }

    /** Returns true if field first_name is set (has been assigned a value) and false otherwise */
    public boolean isSetFirst_name() {
      return this.first_name != null;
    }

    public void setFirst_nameIsSet(boolean value) {
      if (!value) {
        this.first_name = null;
      }
    }

    public String getLast_name() {
      return this.last_name;
    }

    public edit_user_args setLast_name(String last_name) {
      this.last_name = last_name;
      return this;
    }

    public void unsetLast_name() {
      this.last_name = null;
    }

    /** Returns true if field last_name is set (has been assigned a value) and false otherwise */
    public boolean isSetLast_name() {
      return this.last_name != null;
    }

    public void setLast_nameIsSet(boolean value) {
      if (!value) {
        this.last_name = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public edit_user_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getEmail() {
      return this.email;
    }

    public edit_user_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getLocation() {
      return this.location;
    }

    public edit_user_args setLocation(String location) {
      this.location = location;
      return this;
    }

    public void unsetLocation() {
      this.location = null;
    }

    /** Returns true if field location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
      return this.location != null;
    }

    public void setLocationIsSet(boolean value) {
      if (!value) {
        this.location = null;
      }
    }

    public int getPrevilege() {
      return this.previlege;
    }

    public edit_user_args setPrevilege(int previlege) {
      this.previlege = previlege;
      setPrevilegeIsSet(true);
      return this;
    }

    public void unsetPrevilege() {
      __isset_bit_vector.clear(__PREVILEGE_ISSET_ID);
    }

    /** Returns true if field previlege is set (has been assigned a value) and false otherwise */
    public boolean isSetPrevilege() {
      return __isset_bit_vector.get(__PREVILEGE_ISSET_ID);
    }

    public void setPrevilegeIsSet(boolean value) {
      __isset_bit_vector.set(__PREVILEGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIRST_NAME:
        if (value == null) {
          unsetFirst_name();
        } else {
          setFirst_name((String)value);
        }
        break;

      case LAST_NAME:
        if (value == null) {
          unsetLast_name();
        } else {
          setLast_name((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          setLocation((String)value);
        }
        break;

      case PREVILEGE:
        if (value == null) {
          unsetPrevilege();
        } else {
          setPrevilege((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRST_NAME:
        return getFirst_name();

      case LAST_NAME:
        return getLast_name();

      case USER_NAME:
        return getUser_name();

      case EMAIL:
        return getEmail();

      case LOCATION:
        return getLocation();

      case PREVILEGE:
        return Integer.valueOf(getPrevilege());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIRST_NAME:
        return isSetFirst_name();
      case LAST_NAME:
        return isSetLast_name();
      case USER_NAME:
        return isSetUser_name();
      case EMAIL:
        return isSetEmail();
      case LOCATION:
        return isSetLocation();
      case PREVILEGE:
        return isSetPrevilege();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_user_args)
        return this.equals((edit_user_args)that);
      return false;
    }

    public boolean equals(edit_user_args that) {
      if (that == null)
        return false;

      boolean this_present_first_name = true && this.isSetFirst_name();
      boolean that_present_first_name = true && that.isSetFirst_name();
      if (this_present_first_name || that_present_first_name) {
        if (!(this_present_first_name && that_present_first_name))
          return false;
        if (!this.first_name.equals(that.first_name))
          return false;
      }

      boolean this_present_last_name = true && this.isSetLast_name();
      boolean that_present_last_name = true && that.isSetLast_name();
      if (this_present_last_name || that_present_last_name) {
        if (!(this_present_last_name && that_present_last_name))
          return false;
        if (!this.last_name.equals(that.last_name))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_location = true && this.isSetLocation();
      boolean that_present_location = true && that.isSetLocation();
      if (this_present_location || that_present_location) {
        if (!(this_present_location && that_present_location))
          return false;
        if (!this.location.equals(that.location))
          return false;
      }

      boolean this_present_previlege = true;
      boolean that_present_previlege = true;
      if (this_present_previlege || that_present_previlege) {
        if (!(this_present_previlege && that_present_previlege))
          return false;
        if (this.previlege != that.previlege)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_user_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_user_args typedOther = (edit_user_args)other;

      lastComparison = Boolean.valueOf(isSetFirst_name()).compareTo(typedOther.isSetFirst_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirst_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first_name, typedOther.first_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLast_name()).compareTo(typedOther.isSetLast_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLast_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_name, typedOther.last_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrevilege()).compareTo(typedOther.isSetPrevilege());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrevilege()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previlege, typedOther.previlege);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_user_args(");
      boolean first = true;

      sb.append("first_name:");
      if (this.first_name == null) {
        sb.append("null");
      } else {
        sb.append(this.first_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("last_name:");
      if (this.last_name == null) {
        sb.append("null");
      } else {
        sb.append(this.last_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("previlege:");
      sb.append(this.previlege);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_user_argsStandardSchemeFactory implements SchemeFactory {
      public edit_user_argsStandardScheme getScheme() {
        return new edit_user_argsStandardScheme();
      }
    }

    private static class edit_user_argsStandardScheme extends StandardScheme<edit_user_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_user_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.first_name = iprot.readString();
                struct.setFirst_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LAST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.last_name = iprot.readString();
                struct.setLast_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.location = iprot.readString();
                struct.setLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PREVILEGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.previlege = iprot.readI32();
                struct.setPrevilegeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_user_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.first_name != null) {
          oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
          oprot.writeString(struct.first_name);
          oprot.writeFieldEnd();
        }
        if (struct.last_name != null) {
          oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
          oprot.writeString(struct.last_name);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        if (struct.location != null) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PREVILEGE_FIELD_DESC);
        oprot.writeI32(struct.previlege);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_user_argsTupleSchemeFactory implements SchemeFactory {
      public edit_user_argsTupleScheme getScheme() {
        return new edit_user_argsTupleScheme();
      }
    }

    private static class edit_user_argsTupleScheme extends TupleScheme<edit_user_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFirst_name()) {
          optionals.set(0);
        }
        if (struct.isSetLast_name()) {
          optionals.set(1);
        }
        if (struct.isSetUser_name()) {
          optionals.set(2);
        }
        if (struct.isSetEmail()) {
          optionals.set(3);
        }
        if (struct.isSetLocation()) {
          optionals.set(4);
        }
        if (struct.isSetPrevilege()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetFirst_name()) {
          oprot.writeString(struct.first_name);
        }
        if (struct.isSetLast_name()) {
          oprot.writeString(struct.last_name);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
        if (struct.isSetLocation()) {
          oprot.writeString(struct.location);
        }
        if (struct.isSetPrevilege()) {
          oprot.writeI32(struct.previlege);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.first_name = iprot.readString();
          struct.setFirst_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.last_name = iprot.readString();
          struct.setLast_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
        if (incoming.get(4)) {
          struct.location = iprot.readString();
          struct.setLocationIsSet(true);
        }
        if (incoming.get(5)) {
          struct.previlege = iprot.readI32();
          struct.setPrevilegeIsSet(true);
        }
      }
    }

  }

  public static class edit_user_result implements org.apache.thrift.TBase<edit_user_result, edit_user_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_user_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_user_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_user_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_user_result.class, metaDataMap);
    }

    public edit_user_result() {
    }

    public edit_user_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_user_result(edit_user_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public edit_user_result deepCopy() {
      return new edit_user_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public edit_user_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_user_result)
        return this.equals((edit_user_result)that);
      return false;
    }

    public boolean equals(edit_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_user_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_user_result typedOther = (edit_user_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_user_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_user_resultStandardSchemeFactory implements SchemeFactory {
      public edit_user_resultStandardScheme getScheme() {
        return new edit_user_resultStandardScheme();
      }
    }

    private static class edit_user_resultStandardScheme extends StandardScheme<edit_user_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_user_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_user_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_user_resultTupleSchemeFactory implements SchemeFactory {
      public edit_user_resultTupleScheme getScheme() {
        return new edit_user_resultTupleScheme();
      }
    }

    private static class edit_user_resultTupleScheme extends TupleScheme<edit_user_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class update_weight_args implements org.apache.thrift.TBase<update_weight_args, update_weight_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_weight_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_weight_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_weight_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String item_id; // required
    public int weight; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ITEM_ID((short)2, "item_id"),
      WEIGHT((short)3, "weight");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          case 3: // WEIGHT
            return WEIGHT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEIGHT_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_weight_args.class, metaDataMap);
    }

    public update_weight_args() {
    }

    public update_weight_args(
      String item_type,
      String item_id,
      int weight)
    {
      this();
      this.item_type = item_type;
      this.item_id = item_id;
      this.weight = weight;
      setWeightIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_weight_args(update_weight_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
      this.weight = other.weight;
    }

    public update_weight_args deepCopy() {
      return new update_weight_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.item_id = null;
      setWeightIsSet(false);
      this.weight = 0;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public update_weight_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public update_weight_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public int getWeight() {
      return this.weight;
    }

    public update_weight_args setWeight(int weight) {
      this.weight = weight;
      setWeightIsSet(true);
      return this;
    }

    public void unsetWeight() {
      __isset_bit_vector.clear(__WEIGHT_ISSET_ID);
    }

    /** Returns true if field weight is set (has been assigned a value) and false otherwise */
    public boolean isSetWeight() {
      return __isset_bit_vector.get(__WEIGHT_ISSET_ID);
    }

    public void setWeightIsSet(boolean value) {
      __isset_bit_vector.set(__WEIGHT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      case WEIGHT:
        if (value == null) {
          unsetWeight();
        } else {
          setWeight((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      case WEIGHT:
        return Integer.valueOf(getWeight());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      case WEIGHT:
        return isSetWeight();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_weight_args)
        return this.equals((update_weight_args)that);
      return false;
    }

    public boolean equals(update_weight_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      boolean this_present_weight = true;
      boolean that_present_weight = true;
      if (this_present_weight || that_present_weight) {
        if (!(this_present_weight && that_present_weight))
          return false;
        if (this.weight != that.weight)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(update_weight_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      update_weight_args typedOther = (update_weight_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWeight()).compareTo(typedOther.isSetWeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, typedOther.weight);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_weight_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("weight:");
      sb.append(this.weight);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_weight_argsStandardSchemeFactory implements SchemeFactory {
      public update_weight_argsStandardScheme getScheme() {
        return new update_weight_argsStandardScheme();
      }
    }

    private static class update_weight_argsStandardScheme extends StandardScheme<update_weight_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_weight_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WEIGHT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.weight = iprot.readI32();
                struct.setWeightIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_weight_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
        oprot.writeI32(struct.weight);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_weight_argsTupleSchemeFactory implements SchemeFactory {
      public update_weight_argsTupleScheme getScheme() {
        return new update_weight_argsTupleScheme();
      }
    }

    private static class update_weight_argsTupleScheme extends TupleScheme<update_weight_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_weight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetItem_id()) {
          optionals.set(1);
        }
        if (struct.isSetWeight()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
        if (struct.isSetWeight()) {
          oprot.writeI32(struct.weight);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_weight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.weight = iprot.readI32();
          struct.setWeightIsSet(true);
        }
      }
    }

  }

  public static class update_weight_result implements org.apache.thrift.TBase<update_weight_result, update_weight_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_weight_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_weight_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_weight_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_weight_result.class, metaDataMap);
    }

    public update_weight_result() {
    }

    public update_weight_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_weight_result(update_weight_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public update_weight_result deepCopy() {
      return new update_weight_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public update_weight_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_weight_result)
        return this.equals((update_weight_result)that);
      return false;
    }

    public boolean equals(update_weight_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(update_weight_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      update_weight_result typedOther = (update_weight_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_weight_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_weight_resultStandardSchemeFactory implements SchemeFactory {
      public update_weight_resultStandardScheme getScheme() {
        return new update_weight_resultStandardScheme();
      }
    }

    private static class update_weight_resultStandardScheme extends StandardScheme<update_weight_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_weight_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_weight_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_weight_resultTupleSchemeFactory implements SchemeFactory {
      public update_weight_resultTupleScheme getScheme() {
        return new update_weight_resultTupleScheme();
      }
    }

    private static class update_weight_resultTupleScheme extends TupleScheme<update_weight_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_weight_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_weight_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class add_friends_args implements org.apache.thrift.TBase<add_friends_args, add_friends_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_friends_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField F_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("f_type", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField F_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("f_ids", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_friends_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_friends_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String f_type; // required
    public String f_ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      F_TYPE((short)2, "f_type"),
      F_IDS((short)3, "f_ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // F_TYPE
            return F_TYPE;
          case 3: // F_IDS
            return F_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.F_TYPE, new org.apache.thrift.meta_data.FieldMetaData("f_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.F_IDS, new org.apache.thrift.meta_data.FieldMetaData("f_ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_friends_args.class, metaDataMap);
    }

    public add_friends_args() {
    }

    public add_friends_args(
      String user_name,
      String f_type,
      String f_ids)
    {
      this();
      this.user_name = user_name;
      this.f_type = f_type;
      this.f_ids = f_ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_friends_args(add_friends_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetF_type()) {
        this.f_type = other.f_type;
      }
      if (other.isSetF_ids()) {
        this.f_ids = other.f_ids;
      }
    }

    public add_friends_args deepCopy() {
      return new add_friends_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.f_type = null;
      this.f_ids = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public add_friends_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getF_type() {
      return this.f_type;
    }

    public add_friends_args setF_type(String f_type) {
      this.f_type = f_type;
      return this;
    }

    public void unsetF_type() {
      this.f_type = null;
    }

    /** Returns true if field f_type is set (has been assigned a value) and false otherwise */
    public boolean isSetF_type() {
      return this.f_type != null;
    }

    public void setF_typeIsSet(boolean value) {
      if (!value) {
        this.f_type = null;
      }
    }

    public String getF_ids() {
      return this.f_ids;
    }

    public add_friends_args setF_ids(String f_ids) {
      this.f_ids = f_ids;
      return this;
    }

    public void unsetF_ids() {
      this.f_ids = null;
    }

    /** Returns true if field f_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetF_ids() {
      return this.f_ids != null;
    }

    public void setF_idsIsSet(boolean value) {
      if (!value) {
        this.f_ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case F_TYPE:
        if (value == null) {
          unsetF_type();
        } else {
          setF_type((String)value);
        }
        break;

      case F_IDS:
        if (value == null) {
          unsetF_ids();
        } else {
          setF_ids((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case F_TYPE:
        return getF_type();

      case F_IDS:
        return getF_ids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case F_TYPE:
        return isSetF_type();
      case F_IDS:
        return isSetF_ids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_friends_args)
        return this.equals((add_friends_args)that);
      return false;
    }

    public boolean equals(add_friends_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_f_type = true && this.isSetF_type();
      boolean that_present_f_type = true && that.isSetF_type();
      if (this_present_f_type || that_present_f_type) {
        if (!(this_present_f_type && that_present_f_type))
          return false;
        if (!this.f_type.equals(that.f_type))
          return false;
      }

      boolean this_present_f_ids = true && this.isSetF_ids();
      boolean that_present_f_ids = true && that.isSetF_ids();
      if (this_present_f_ids || that_present_f_ids) {
        if (!(this_present_f_ids && that_present_f_ids))
          return false;
        if (!this.f_ids.equals(that.f_ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(add_friends_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      add_friends_args typedOther = (add_friends_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetF_type()).compareTo(typedOther.isSetF_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetF_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f_type, typedOther.f_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetF_ids()).compareTo(typedOther.isSetF_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetF_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f_ids, typedOther.f_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_friends_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("f_type:");
      if (this.f_type == null) {
        sb.append("null");
      } else {
        sb.append(this.f_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("f_ids:");
      if (this.f_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.f_ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_friends_argsStandardSchemeFactory implements SchemeFactory {
      public add_friends_argsStandardScheme getScheme() {
        return new add_friends_argsStandardScheme();
      }
    }

    private static class add_friends_argsStandardScheme extends StandardScheme<add_friends_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_friends_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // F_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.f_type = iprot.readString();
                struct.setF_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // F_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.f_ids = iprot.readString();
                struct.setF_idsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_friends_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.f_type != null) {
          oprot.writeFieldBegin(F_TYPE_FIELD_DESC);
          oprot.writeString(struct.f_type);
          oprot.writeFieldEnd();
        }
        if (struct.f_ids != null) {
          oprot.writeFieldBegin(F_IDS_FIELD_DESC);
          oprot.writeString(struct.f_ids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_friends_argsTupleSchemeFactory implements SchemeFactory {
      public add_friends_argsTupleScheme getScheme() {
        return new add_friends_argsTupleScheme();
      }
    }

    private static class add_friends_argsTupleScheme extends TupleScheme<add_friends_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_friends_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetF_type()) {
          optionals.set(1);
        }
        if (struct.isSetF_ids()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetF_type()) {
          oprot.writeString(struct.f_type);
        }
        if (struct.isSetF_ids()) {
          oprot.writeString(struct.f_ids);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_friends_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.f_type = iprot.readString();
          struct.setF_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.f_ids = iprot.readString();
          struct.setF_idsIsSet(true);
        }
      }
    }

  }

  public static class add_friends_result implements org.apache.thrift.TBase<add_friends_result, add_friends_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_friends_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_friends_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_friends_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_friends_result.class, metaDataMap);
    }

    public add_friends_result() {
    }

    public add_friends_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_friends_result(add_friends_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public add_friends_result deepCopy() {
      return new add_friends_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public add_friends_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_friends_result)
        return this.equals((add_friends_result)that);
      return false;
    }

    public boolean equals(add_friends_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(add_friends_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      add_friends_result typedOther = (add_friends_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_friends_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_friends_resultStandardSchemeFactory implements SchemeFactory {
      public add_friends_resultStandardScheme getScheme() {
        return new add_friends_resultStandardScheme();
      }
    }

    private static class add_friends_resultStandardScheme extends StandardScheme<add_friends_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_friends_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_friends_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_friends_resultTupleSchemeFactory implements SchemeFactory {
      public add_friends_resultTupleScheme getScheme() {
        return new add_friends_resultTupleScheme();
      }
    }

    private static class add_friends_resultTupleScheme extends TupleScheme<add_friends_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_friends_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_friends_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_friends_args implements org.apache.thrift.TBase<get_friends_args, get_friends_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_friends_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_friends_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_friends_argsTupleSchemeFactory());
    }

    public String user_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_friends_args.class, metaDataMap);
    }

    public get_friends_args() {
    }

    public get_friends_args(
      String user_name)
    {
      this();
      this.user_name = user_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_friends_args(get_friends_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
    }

    public get_friends_args deepCopy() {
      return new get_friends_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_friends_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_friends_args)
        return this.equals((get_friends_args)that);
      return false;
    }

    public boolean equals(get_friends_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_friends_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_friends_args typedOther = (get_friends_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_friends_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_friends_argsStandardSchemeFactory implements SchemeFactory {
      public get_friends_argsStandardScheme getScheme() {
        return new get_friends_argsStandardScheme();
      }
    }

    private static class get_friends_argsStandardScheme extends StandardScheme<get_friends_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_friends_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_friends_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_friends_argsTupleSchemeFactory implements SchemeFactory {
      public get_friends_argsTupleScheme getScheme() {
        return new get_friends_argsTupleScheme();
      }
    }

    private static class get_friends_argsTupleScheme extends TupleScheme<get_friends_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_friends_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_friends_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
      }
    }

  }

  public static class get_friends_result implements org.apache.thrift.TBase<get_friends_result, get_friends_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_friends_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_friends_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_friends_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_friends_result.class, metaDataMap);
    }

    public get_friends_result() {
    }

    public get_friends_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_friends_result(get_friends_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_friends_result deepCopy() {
      return new get_friends_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_friends_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_friends_result)
        return this.equals((get_friends_result)that);
      return false;
    }

    public boolean equals(get_friends_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_friends_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_friends_result typedOther = (get_friends_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_friends_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_friends_resultStandardSchemeFactory implements SchemeFactory {
      public get_friends_resultStandardScheme getScheme() {
        return new get_friends_resultStandardScheme();
      }
    }

    private static class get_friends_resultStandardScheme extends StandardScheme<get_friends_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_friends_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_friends_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_friends_resultTupleSchemeFactory implements SchemeFactory {
      public get_friends_resultTupleScheme getScheme() {
        return new get_friends_resultTupleScheme();
      }
    }

    private static class get_friends_resultTupleScheme extends TupleScheme<get_friends_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_friends_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_friends_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_articles_hashtag_args implements org.apache.thrift.TBase<get_articles_hashtag_args, get_articles_hashtag_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_articles_hashtag_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("hash", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_articles_hashtag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_articles_hashtag_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String hash; // required
    public int count; // required
    public int prev_cnt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      HASH((short)2, "hash"),
      COUNT((short)3, "count"),
      PREV_CNT((short)4, "prev_cnt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // HASH
            return HASH;
          case 3: // COUNT
            return COUNT;
          case 4: // PREV_CNT
            return PREV_CNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HASH, new org.apache.thrift.meta_data.FieldMetaData("hash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_articles_hashtag_args.class, metaDataMap);
    }

    public get_articles_hashtag_args() {
    }

    public get_articles_hashtag_args(
      String user_name,
      String hash,
      int count,
      int prev_cnt)
    {
      this();
      this.user_name = user_name;
      this.hash = hash;
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_articles_hashtag_args(get_articles_hashtag_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetHash()) {
        this.hash = other.hash;
      }
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
    }

    public get_articles_hashtag_args deepCopy() {
      return new get_articles_hashtag_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.hash = null;
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_articles_hashtag_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getHash() {
      return this.hash;
    }

    public get_articles_hashtag_args setHash(String hash) {
      this.hash = hash;
      return this;
    }

    public void unsetHash() {
      this.hash = null;
    }

    /** Returns true if field hash is set (has been assigned a value) and false otherwise */
    public boolean isSetHash() {
      return this.hash != null;
    }

    public void setHashIsSet(boolean value) {
      if (!value) {
        this.hash = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public get_articles_hashtag_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_articles_hashtag_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case HASH:
        if (value == null) {
          unsetHash();
        } else {
          setHash((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case HASH:
        return getHash();

      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case HASH:
        return isSetHash();
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_articles_hashtag_args)
        return this.equals((get_articles_hashtag_args)that);
      return false;
    }

    public boolean equals(get_articles_hashtag_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_hash = true && this.isSetHash();
      boolean that_present_hash = true && that.isSetHash();
      if (this_present_hash || that_present_hash) {
        if (!(this_present_hash && that_present_hash))
          return false;
        if (!this.hash.equals(that.hash))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_articles_hashtag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_articles_hashtag_args typedOther = (get_articles_hashtag_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHash()).compareTo(typedOther.isSetHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash, typedOther.hash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_articles_hashtag_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hash:");
      if (this.hash == null) {
        sb.append("null");
      } else {
        sb.append(this.hash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_articles_hashtag_argsStandardSchemeFactory implements SchemeFactory {
      public get_articles_hashtag_argsStandardScheme getScheme() {
        return new get_articles_hashtag_argsStandardScheme();
      }
    }

    private static class get_articles_hashtag_argsStandardScheme extends StandardScheme<get_articles_hashtag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_articles_hashtag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HASH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hash = iprot.readString();
                struct.setHashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_articles_hashtag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.hash != null) {
          oprot.writeFieldBegin(HASH_FIELD_DESC);
          oprot.writeString(struct.hash);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_articles_hashtag_argsTupleSchemeFactory implements SchemeFactory {
      public get_articles_hashtag_argsTupleScheme getScheme() {
        return new get_articles_hashtag_argsTupleScheme();
      }
    }

    private static class get_articles_hashtag_argsTupleScheme extends TupleScheme<get_articles_hashtag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_articles_hashtag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetHash()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetHash()) {
          oprot.writeString(struct.hash);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_articles_hashtag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hash = iprot.readString();
          struct.setHashIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
      }
    }

  }

  public static class get_articles_hashtag_result implements org.apache.thrift.TBase<get_articles_hashtag_result, get_articles_hashtag_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_articles_hashtag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_articles_hashtag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_articles_hashtag_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_articles_hashtag_result.class, metaDataMap);
    }

    public get_articles_hashtag_result() {
    }

    public get_articles_hashtag_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_articles_hashtag_result(get_articles_hashtag_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_articles_hashtag_result deepCopy() {
      return new get_articles_hashtag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_articles_hashtag_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_articles_hashtag_result)
        return this.equals((get_articles_hashtag_result)that);
      return false;
    }

    public boolean equals(get_articles_hashtag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_articles_hashtag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_articles_hashtag_result typedOther = (get_articles_hashtag_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_articles_hashtag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_articles_hashtag_resultStandardSchemeFactory implements SchemeFactory {
      public get_articles_hashtag_resultStandardScheme getScheme() {
        return new get_articles_hashtag_resultStandardScheme();
      }
    }

    private static class get_articles_hashtag_resultStandardScheme extends StandardScheme<get_articles_hashtag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_articles_hashtag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_articles_hashtag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_articles_hashtag_resultTupleSchemeFactory implements SchemeFactory {
      public get_articles_hashtag_resultTupleScheme getScheme() {
        return new get_articles_hashtag_resultTupleScheme();
      }
    }

    private static class get_articles_hashtag_resultTupleScheme extends TupleScheme<get_articles_hashtag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_articles_hashtag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_articles_hashtag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_articles_space_args implements org.apache.thrift.TBase<get_articles_space_args, get_articles_space_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_articles_space_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("space", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField ADMIN_TAGGED_FIELD_DESC = new org.apache.thrift.protocol.TField("admin_tagged", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_articles_space_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_articles_space_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String space; // required
    public int count; // required
    public int prev_cnt; // required
    public int admin_tagged; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      SPACE((short)2, "space"),
      COUNT((short)3, "count"),
      PREV_CNT((short)4, "prev_cnt"),
      ADMIN_TAGGED((short)5, "admin_tagged");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // SPACE
            return SPACE;
          case 3: // COUNT
            return COUNT;
          case 4: // PREV_CNT
            return PREV_CNT;
          case 5: // ADMIN_TAGGED
            return ADMIN_TAGGED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private static final int __ADMIN_TAGGED_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPACE, new org.apache.thrift.meta_data.FieldMetaData("space", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ADMIN_TAGGED, new org.apache.thrift.meta_data.FieldMetaData("admin_tagged", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_articles_space_args.class, metaDataMap);
    }

    public get_articles_space_args() {
    }

    public get_articles_space_args(
      String user_name,
      String space,
      int count,
      int prev_cnt,
      int admin_tagged)
    {
      this();
      this.user_name = user_name;
      this.space = space;
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      this.admin_tagged = admin_tagged;
      setAdmin_taggedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_articles_space_args(get_articles_space_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetSpace()) {
        this.space = other.space;
      }
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
      this.admin_tagged = other.admin_tagged;
    }

    public get_articles_space_args deepCopy() {
      return new get_articles_space_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.space = null;
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
      setAdmin_taggedIsSet(false);
      this.admin_tagged = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_articles_space_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getSpace() {
      return this.space;
    }

    public get_articles_space_args setSpace(String space) {
      this.space = space;
      return this;
    }

    public void unsetSpace() {
      this.space = null;
    }

    /** Returns true if field space is set (has been assigned a value) and false otherwise */
    public boolean isSetSpace() {
      return this.space != null;
    }

    public void setSpaceIsSet(boolean value) {
      if (!value) {
        this.space = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public get_articles_space_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_articles_space_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public int getAdmin_tagged() {
      return this.admin_tagged;
    }

    public get_articles_space_args setAdmin_tagged(int admin_tagged) {
      this.admin_tagged = admin_tagged;
      setAdmin_taggedIsSet(true);
      return this;
    }

    public void unsetAdmin_tagged() {
      __isset_bit_vector.clear(__ADMIN_TAGGED_ISSET_ID);
    }

    /** Returns true if field admin_tagged is set (has been assigned a value) and false otherwise */
    public boolean isSetAdmin_tagged() {
      return __isset_bit_vector.get(__ADMIN_TAGGED_ISSET_ID);
    }

    public void setAdmin_taggedIsSet(boolean value) {
      __isset_bit_vector.set(__ADMIN_TAGGED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case SPACE:
        if (value == null) {
          unsetSpace();
        } else {
          setSpace((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      case ADMIN_TAGGED:
        if (value == null) {
          unsetAdmin_tagged();
        } else {
          setAdmin_tagged((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case SPACE:
        return getSpace();

      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      case ADMIN_TAGGED:
        return Integer.valueOf(getAdmin_tagged());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case SPACE:
        return isSetSpace();
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      case ADMIN_TAGGED:
        return isSetAdmin_tagged();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_articles_space_args)
        return this.equals((get_articles_space_args)that);
      return false;
    }

    public boolean equals(get_articles_space_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_space = true && this.isSetSpace();
      boolean that_present_space = true && that.isSetSpace();
      if (this_present_space || that_present_space) {
        if (!(this_present_space && that_present_space))
          return false;
        if (!this.space.equals(that.space))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      boolean this_present_admin_tagged = true;
      boolean that_present_admin_tagged = true;
      if (this_present_admin_tagged || that_present_admin_tagged) {
        if (!(this_present_admin_tagged && that_present_admin_tagged))
          return false;
        if (this.admin_tagged != that.admin_tagged)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_articles_space_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_articles_space_args typedOther = (get_articles_space_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpace()).compareTo(typedOther.isSetSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.space, typedOther.space);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAdmin_tagged()).compareTo(typedOther.isSetAdmin_tagged());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdmin_tagged()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.admin_tagged, typedOther.admin_tagged);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_articles_space_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("space:");
      if (this.space == null) {
        sb.append("null");
      } else {
        sb.append(this.space);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      if (!first) sb.append(", ");
      sb.append("admin_tagged:");
      sb.append(this.admin_tagged);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_articles_space_argsStandardSchemeFactory implements SchemeFactory {
      public get_articles_space_argsStandardScheme getScheme() {
        return new get_articles_space_argsStandardScheme();
      }
    }

    private static class get_articles_space_argsStandardScheme extends StandardScheme<get_articles_space_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_articles_space_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.space = iprot.readString();
                struct.setSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ADMIN_TAGGED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.admin_tagged = iprot.readI32();
                struct.setAdmin_taggedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_articles_space_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.space != null) {
          oprot.writeFieldBegin(SPACE_FIELD_DESC);
          oprot.writeString(struct.space);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ADMIN_TAGGED_FIELD_DESC);
        oprot.writeI32(struct.admin_tagged);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_articles_space_argsTupleSchemeFactory implements SchemeFactory {
      public get_articles_space_argsTupleScheme getScheme() {
        return new get_articles_space_argsTupleScheme();
      }
    }

    private static class get_articles_space_argsTupleScheme extends TupleScheme<get_articles_space_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_articles_space_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetSpace()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(3);
        }
        if (struct.isSetAdmin_tagged()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetSpace()) {
          oprot.writeString(struct.space);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
        if (struct.isSetAdmin_tagged()) {
          oprot.writeI32(struct.admin_tagged);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_articles_space_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.space = iprot.readString();
          struct.setSpaceIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
        if (incoming.get(4)) {
          struct.admin_tagged = iprot.readI32();
          struct.setAdmin_taggedIsSet(true);
        }
      }
    }

  }

  public static class get_articles_space_result implements org.apache.thrift.TBase<get_articles_space_result, get_articles_space_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_articles_space_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_articles_space_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_articles_space_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_articles_space_result.class, metaDataMap);
    }

    public get_articles_space_result() {
    }

    public get_articles_space_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_articles_space_result(get_articles_space_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_articles_space_result deepCopy() {
      return new get_articles_space_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_articles_space_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_articles_space_result)
        return this.equals((get_articles_space_result)that);
      return false;
    }

    public boolean equals(get_articles_space_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_articles_space_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_articles_space_result typedOther = (get_articles_space_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_articles_space_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_articles_space_resultStandardSchemeFactory implements SchemeFactory {
      public get_articles_space_resultStandardScheme getScheme() {
        return new get_articles_space_resultStandardScheme();
      }
    }

    private static class get_articles_space_resultStandardScheme extends StandardScheme<get_articles_space_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_articles_space_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_articles_space_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_articles_space_resultTupleSchemeFactory implements SchemeFactory {
      public get_articles_space_resultTupleScheme getScheme() {
        return new get_articles_space_resultTupleScheme();
      }
    }

    private static class get_articles_space_resultTupleScheme extends TupleScheme<get_articles_space_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_articles_space_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_articles_space_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_user_args implements org.apache.thrift.TBase<delete_user_args, delete_user_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_user_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_user_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_user_argsTupleSchemeFactory());
    }

    public String user_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_user_args.class, metaDataMap);
    }

    public delete_user_args() {
    }

    public delete_user_args(
      String user_name)
    {
      this();
      this.user_name = user_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_user_args(delete_user_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
    }

    public delete_user_args deepCopy() {
      return new delete_user_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public delete_user_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_user_args)
        return this.equals((delete_user_args)that);
      return false;
    }

    public boolean equals(delete_user_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_user_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_user_args typedOther = (delete_user_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_user_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_user_argsStandardSchemeFactory implements SchemeFactory {
      public delete_user_argsStandardScheme getScheme() {
        return new delete_user_argsStandardScheme();
      }
    }

    private static class delete_user_argsStandardScheme extends StandardScheme<delete_user_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_user_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_user_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_user_argsTupleSchemeFactory implements SchemeFactory {
      public delete_user_argsTupleScheme getScheme() {
        return new delete_user_argsTupleScheme();
      }
    }

    private static class delete_user_argsTupleScheme extends TupleScheme<delete_user_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
      }
    }

  }

  public static class delete_user_result implements org.apache.thrift.TBase<delete_user_result, delete_user_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_user_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_user_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_user_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_user_result.class, metaDataMap);
    }

    public delete_user_result() {
    }

    public delete_user_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_user_result(delete_user_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public delete_user_result deepCopy() {
      return new delete_user_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delete_user_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_user_result)
        return this.equals((delete_user_result)that);
      return false;
    }

    public boolean equals(delete_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_user_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_user_result typedOther = (delete_user_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_user_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_user_resultStandardSchemeFactory implements SchemeFactory {
      public delete_user_resultStandardScheme getScheme() {
        return new delete_user_resultStandardScheme();
      }
    }

    private static class delete_user_resultStandardScheme extends StandardScheme<delete_user_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_user_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_user_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_user_resultTupleSchemeFactory implements SchemeFactory {
      public delete_user_resultTupleScheme getScheme() {
        return new delete_user_resultTupleScheme();
      }
    }

    private static class delete_user_resultTupleScheme extends TupleScheme<delete_user_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class user_follow_args implements org.apache.thrift.TBase<user_follow_args, user_follow_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_follow_args");

    private static final org.apache.thrift.protocol.TField USER_NAME1_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME2_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_follow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_follow_argsTupleSchemeFactory());
    }

    public String user_name1; // required
    public String user_name2; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME1((short)1, "user_name1"),
      USER_NAME2((short)2, "user_name2"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME1
            return USER_NAME1;
          case 2: // USER_NAME2
            return USER_NAME2;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME1, new org.apache.thrift.meta_data.FieldMetaData("user_name1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME2, new org.apache.thrift.meta_data.FieldMetaData("user_name2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_follow_args.class, metaDataMap);
    }

    public user_follow_args() {
    }

    public user_follow_args(
      String user_name1,
      String user_name2,
      int time)
    {
      this();
      this.user_name1 = user_name1;
      this.user_name2 = user_name2;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_follow_args(user_follow_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name1()) {
        this.user_name1 = other.user_name1;
      }
      if (other.isSetUser_name2()) {
        this.user_name2 = other.user_name2;
      }
      this.time = other.time;
    }

    public user_follow_args deepCopy() {
      return new user_follow_args(this);
    }

    @Override
    public void clear() {
      this.user_name1 = null;
      this.user_name2 = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getUser_name1() {
      return this.user_name1;
    }

    public user_follow_args setUser_name1(String user_name1) {
      this.user_name1 = user_name1;
      return this;
    }

    public void unsetUser_name1() {
      this.user_name1 = null;
    }

    /** Returns true if field user_name1 is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name1() {
      return this.user_name1 != null;
    }

    public void setUser_name1IsSet(boolean value) {
      if (!value) {
        this.user_name1 = null;
      }
    }

    public String getUser_name2() {
      return this.user_name2;
    }

    public user_follow_args setUser_name2(String user_name2) {
      this.user_name2 = user_name2;
      return this;
    }

    public void unsetUser_name2() {
      this.user_name2 = null;
    }

    /** Returns true if field user_name2 is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name2() {
      return this.user_name2 != null;
    }

    public void setUser_name2IsSet(boolean value) {
      if (!value) {
        this.user_name2 = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public user_follow_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME1:
        if (value == null) {
          unsetUser_name1();
        } else {
          setUser_name1((String)value);
        }
        break;

      case USER_NAME2:
        if (value == null) {
          unsetUser_name2();
        } else {
          setUser_name2((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME1:
        return getUser_name1();

      case USER_NAME2:
        return getUser_name2();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME1:
        return isSetUser_name1();
      case USER_NAME2:
        return isSetUser_name2();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_follow_args)
        return this.equals((user_follow_args)that);
      return false;
    }

    public boolean equals(user_follow_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name1 = true && this.isSetUser_name1();
      boolean that_present_user_name1 = true && that.isSetUser_name1();
      if (this_present_user_name1 || that_present_user_name1) {
        if (!(this_present_user_name1 && that_present_user_name1))
          return false;
        if (!this.user_name1.equals(that.user_name1))
          return false;
      }

      boolean this_present_user_name2 = true && this.isSetUser_name2();
      boolean that_present_user_name2 = true && that.isSetUser_name2();
      if (this_present_user_name2 || that_present_user_name2) {
        if (!(this_present_user_name2 && that_present_user_name2))
          return false;
        if (!this.user_name2.equals(that.user_name2))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_follow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_follow_args typedOther = (user_follow_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name1()).compareTo(typedOther.isSetUser_name1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name1, typedOther.user_name1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name2()).compareTo(typedOther.isSetUser_name2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name2, typedOther.user_name2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_follow_args(");
      boolean first = true;

      sb.append("user_name1:");
      if (this.user_name1 == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name2:");
      if (this.user_name2 == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_follow_argsStandardSchemeFactory implements SchemeFactory {
      public user_follow_argsStandardScheme getScheme() {
        return new user_follow_argsStandardScheme();
      }
    }

    private static class user_follow_argsStandardScheme extends StandardScheme<user_follow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_follow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name1 = iprot.readString();
                struct.setUser_name1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name2 = iprot.readString();
                struct.setUser_name2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_follow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name1 != null) {
          oprot.writeFieldBegin(USER_NAME1_FIELD_DESC);
          oprot.writeString(struct.user_name1);
          oprot.writeFieldEnd();
        }
        if (struct.user_name2 != null) {
          oprot.writeFieldBegin(USER_NAME2_FIELD_DESC);
          oprot.writeString(struct.user_name2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_follow_argsTupleSchemeFactory implements SchemeFactory {
      public user_follow_argsTupleScheme getScheme() {
        return new user_follow_argsTupleScheme();
      }
    }

    private static class user_follow_argsTupleScheme extends TupleScheme<user_follow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_follow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name1()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name2()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser_name1()) {
          oprot.writeString(struct.user_name1);
        }
        if (struct.isSetUser_name2()) {
          oprot.writeString(struct.user_name2);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_follow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user_name1 = iprot.readString();
          struct.setUser_name1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name2 = iprot.readString();
          struct.setUser_name2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class user_follow_result implements org.apache.thrift.TBase<user_follow_result, user_follow_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_follow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_follow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_follow_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_follow_result.class, metaDataMap);
    }

    public user_follow_result() {
    }

    public user_follow_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_follow_result(user_follow_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public user_follow_result deepCopy() {
      return new user_follow_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public user_follow_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_follow_result)
        return this.equals((user_follow_result)that);
      return false;
    }

    public boolean equals(user_follow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_follow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_follow_result typedOther = (user_follow_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_follow_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_follow_resultStandardSchemeFactory implements SchemeFactory {
      public user_follow_resultStandardScheme getScheme() {
        return new user_follow_resultStandardScheme();
      }
    }

    private static class user_follow_resultStandardScheme extends StandardScheme<user_follow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_follow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_follow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_follow_resultTupleSchemeFactory implements SchemeFactory {
      public user_follow_resultTupleScheme getScheme() {
        return new user_follow_resultTupleScheme();
      }
    }

    private static class user_follow_resultTupleScheme extends TupleScheme<user_follow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_follow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_follow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class space_follow_args implements org.apache.thrift.TBase<space_follow_args, space_follow_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("space_follow_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new space_follow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new space_follow_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(space_follow_args.class, metaDataMap);
    }

    public space_follow_args() {
    }

    public space_follow_args(
      String user_name,
      String id)
    {
      this();
      this.user_name = user_name;
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public space_follow_args(space_follow_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public space_follow_args deepCopy() {
      return new space_follow_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.id = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public space_follow_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public space_follow_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof space_follow_args)
        return this.equals((space_follow_args)that);
      return false;
    }

    public boolean equals(space_follow_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(space_follow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      space_follow_args typedOther = (space_follow_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("space_follow_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class space_follow_argsStandardSchemeFactory implements SchemeFactory {
      public space_follow_argsStandardScheme getScheme() {
        return new space_follow_argsStandardScheme();
      }
    }

    private static class space_follow_argsStandardScheme extends StandardScheme<space_follow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, space_follow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, space_follow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class space_follow_argsTupleSchemeFactory implements SchemeFactory {
      public space_follow_argsTupleScheme getScheme() {
        return new space_follow_argsTupleScheme();
      }
    }

    private static class space_follow_argsTupleScheme extends TupleScheme<space_follow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, space_follow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, space_follow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class space_follow_result implements org.apache.thrift.TBase<space_follow_result, space_follow_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("space_follow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new space_follow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new space_follow_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(space_follow_result.class, metaDataMap);
    }

    public space_follow_result() {
    }

    public space_follow_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public space_follow_result(space_follow_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public space_follow_result deepCopy() {
      return new space_follow_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public space_follow_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof space_follow_result)
        return this.equals((space_follow_result)that);
      return false;
    }

    public boolean equals(space_follow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(space_follow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      space_follow_result typedOther = (space_follow_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("space_follow_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class space_follow_resultStandardSchemeFactory implements SchemeFactory {
      public space_follow_resultStandardScheme getScheme() {
        return new space_follow_resultStandardScheme();
      }
    }

    private static class space_follow_resultStandardScheme extends StandardScheme<space_follow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, space_follow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, space_follow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class space_follow_resultTupleSchemeFactory implements SchemeFactory {
      public space_follow_resultTupleScheme getScheme() {
        return new space_follow_resultTupleScheme();
      }
    }

    private static class space_follow_resultTupleScheme extends TupleScheme<space_follow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, space_follow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, space_follow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class space_tagitem_args implements org.apache.thrift.TBase<space_tagitem_args, space_tagitem_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("space_tagitem_args");

    private static final org.apache.thrift.protocol.TField SPACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("space_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TAG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_type", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new space_tagitem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new space_tagitem_argsTupleSchemeFactory());
    }

    public String space_id; // required
    public String item_type; // required
    public String item_id; // required
    public String tag_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPACE_ID((short)1, "space_id"),
      ITEM_TYPE((short)2, "item_type"),
      ITEM_ID((short)3, "item_id"),
      TAG_TYPE((short)4, "tag_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPACE_ID
            return SPACE_ID;
          case 2: // ITEM_TYPE
            return ITEM_TYPE;
          case 3: // ITEM_ID
            return ITEM_ID;
          case 4: // TAG_TYPE
            return TAG_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPACE_ID, new org.apache.thrift.meta_data.FieldMetaData("space_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tag_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(space_tagitem_args.class, metaDataMap);
    }

    public space_tagitem_args() {
    }

    public space_tagitem_args(
      String space_id,
      String item_type,
      String item_id,
      String tag_type)
    {
      this();
      this.space_id = space_id;
      this.item_type = item_type;
      this.item_id = item_id;
      this.tag_type = tag_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public space_tagitem_args(space_tagitem_args other) {
      if (other.isSetSpace_id()) {
        this.space_id = other.space_id;
      }
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
      if (other.isSetTag_type()) {
        this.tag_type = other.tag_type;
      }
    }

    public space_tagitem_args deepCopy() {
      return new space_tagitem_args(this);
    }

    @Override
    public void clear() {
      this.space_id = null;
      this.item_type = null;
      this.item_id = null;
      this.tag_type = null;
    }

    public String getSpace_id() {
      return this.space_id;
    }

    public space_tagitem_args setSpace_id(String space_id) {
      this.space_id = space_id;
      return this;
    }

    public void unsetSpace_id() {
      this.space_id = null;
    }

    /** Returns true if field space_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSpace_id() {
      return this.space_id != null;
    }

    public void setSpace_idIsSet(boolean value) {
      if (!value) {
        this.space_id = null;
      }
    }

    public String getItem_type() {
      return this.item_type;
    }

    public space_tagitem_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public space_tagitem_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public String getTag_type() {
      return this.tag_type;
    }

    public space_tagitem_args setTag_type(String tag_type) {
      this.tag_type = tag_type;
      return this;
    }

    public void unsetTag_type() {
      this.tag_type = null;
    }

    /** Returns true if field tag_type is set (has been assigned a value) and false otherwise */
    public boolean isSetTag_type() {
      return this.tag_type != null;
    }

    public void setTag_typeIsSet(boolean value) {
      if (!value) {
        this.tag_type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPACE_ID:
        if (value == null) {
          unsetSpace_id();
        } else {
          setSpace_id((String)value);
        }
        break;

      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      case TAG_TYPE:
        if (value == null) {
          unsetTag_type();
        } else {
          setTag_type((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPACE_ID:
        return getSpace_id();

      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      case TAG_TYPE:
        return getTag_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPACE_ID:
        return isSetSpace_id();
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      case TAG_TYPE:
        return isSetTag_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof space_tagitem_args)
        return this.equals((space_tagitem_args)that);
      return false;
    }

    public boolean equals(space_tagitem_args that) {
      if (that == null)
        return false;

      boolean this_present_space_id = true && this.isSetSpace_id();
      boolean that_present_space_id = true && that.isSetSpace_id();
      if (this_present_space_id || that_present_space_id) {
        if (!(this_present_space_id && that_present_space_id))
          return false;
        if (!this.space_id.equals(that.space_id))
          return false;
      }

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      boolean this_present_tag_type = true && this.isSetTag_type();
      boolean that_present_tag_type = true && that.isSetTag_type();
      if (this_present_tag_type || that_present_tag_type) {
        if (!(this_present_tag_type && that_present_tag_type))
          return false;
        if (!this.tag_type.equals(that.tag_type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(space_tagitem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      space_tagitem_args typedOther = (space_tagitem_args)other;

      lastComparison = Boolean.valueOf(isSetSpace_id()).compareTo(typedOther.isSetSpace_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpace_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.space_id, typedOther.space_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTag_type()).compareTo(typedOther.isSetTag_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_type, typedOther.tag_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("space_tagitem_args(");
      boolean first = true;

      sb.append("space_id:");
      if (this.space_id == null) {
        sb.append("null");
      } else {
        sb.append(this.space_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag_type:");
      if (this.tag_type == null) {
        sb.append("null");
      } else {
        sb.append(this.tag_type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class space_tagitem_argsStandardSchemeFactory implements SchemeFactory {
      public space_tagitem_argsStandardScheme getScheme() {
        return new space_tagitem_argsStandardScheme();
      }
    }

    private static class space_tagitem_argsStandardScheme extends StandardScheme<space_tagitem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, space_tagitem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.space_id = iprot.readString();
                struct.setSpace_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TAG_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tag_type = iprot.readString();
                struct.setTag_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, space_tagitem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.space_id != null) {
          oprot.writeFieldBegin(SPACE_ID_FIELD_DESC);
          oprot.writeString(struct.space_id);
          oprot.writeFieldEnd();
        }
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        if (struct.tag_type != null) {
          oprot.writeFieldBegin(TAG_TYPE_FIELD_DESC);
          oprot.writeString(struct.tag_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class space_tagitem_argsTupleSchemeFactory implements SchemeFactory {
      public space_tagitem_argsTupleScheme getScheme() {
        return new space_tagitem_argsTupleScheme();
      }
    }

    private static class space_tagitem_argsTupleScheme extends TupleScheme<space_tagitem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, space_tagitem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpace_id()) {
          optionals.set(0);
        }
        if (struct.isSetItem_type()) {
          optionals.set(1);
        }
        if (struct.isSetItem_id()) {
          optionals.set(2);
        }
        if (struct.isSetTag_type()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSpace_id()) {
          oprot.writeString(struct.space_id);
        }
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
        if (struct.isSetTag_type()) {
          oprot.writeString(struct.tag_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, space_tagitem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.space_id = iprot.readString();
          struct.setSpace_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tag_type = iprot.readString();
          struct.setTag_typeIsSet(true);
        }
      }
    }

  }

  public static class space_tagitem_result implements org.apache.thrift.TBase<space_tagitem_result, space_tagitem_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("space_tagitem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new space_tagitem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new space_tagitem_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(space_tagitem_result.class, metaDataMap);
    }

    public space_tagitem_result() {
    }

    public space_tagitem_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public space_tagitem_result(space_tagitem_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public space_tagitem_result deepCopy() {
      return new space_tagitem_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public space_tagitem_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof space_tagitem_result)
        return this.equals((space_tagitem_result)that);
      return false;
    }

    public boolean equals(space_tagitem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(space_tagitem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      space_tagitem_result typedOther = (space_tagitem_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("space_tagitem_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class space_tagitem_resultStandardSchemeFactory implements SchemeFactory {
      public space_tagitem_resultStandardScheme getScheme() {
        return new space_tagitem_resultStandardScheme();
      }
    }

    private static class space_tagitem_resultStandardScheme extends StandardScheme<space_tagitem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, space_tagitem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, space_tagitem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class space_tagitem_resultTupleSchemeFactory implements SchemeFactory {
      public space_tagitem_resultTupleScheme getScheme() {
        return new space_tagitem_resultTupleScheme();
      }
    }

    private static class space_tagitem_resultTupleScheme extends TupleScheme<space_tagitem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, space_tagitem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, space_tagitem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class space_isclosed_args implements org.apache.thrift.TBase<space_isclosed_args, space_isclosed_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("space_isclosed_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IS_CLOSED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_closed", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new space_isclosed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new space_isclosed_argsTupleSchemeFactory());
    }

    public String id; // required
    public int is_closed; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      IS_CLOSED((short)2, "is_closed");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // IS_CLOSED
            return IS_CLOSED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IS_CLOSED_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_CLOSED, new org.apache.thrift.meta_data.FieldMetaData("is_closed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(space_isclosed_args.class, metaDataMap);
    }

    public space_isclosed_args() {
    }

    public space_isclosed_args(
      String id,
      int is_closed)
    {
      this();
      this.id = id;
      this.is_closed = is_closed;
      setIs_closedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public space_isclosed_args(space_isclosed_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetId()) {
        this.id = other.id;
      }
      this.is_closed = other.is_closed;
    }

    public space_isclosed_args deepCopy() {
      return new space_isclosed_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      setIs_closedIsSet(false);
      this.is_closed = 0;
    }

    public String getId() {
      return this.id;
    }

    public space_isclosed_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getIs_closed() {
      return this.is_closed;
    }

    public space_isclosed_args setIs_closed(int is_closed) {
      this.is_closed = is_closed;
      setIs_closedIsSet(true);
      return this;
    }

    public void unsetIs_closed() {
      __isset_bit_vector.clear(__IS_CLOSED_ISSET_ID);
    }

    /** Returns true if field is_closed is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_closed() {
      return __isset_bit_vector.get(__IS_CLOSED_ISSET_ID);
    }

    public void setIs_closedIsSet(boolean value) {
      __isset_bit_vector.set(__IS_CLOSED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case IS_CLOSED:
        if (value == null) {
          unsetIs_closed();
        } else {
          setIs_closed((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case IS_CLOSED:
        return Integer.valueOf(getIs_closed());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case IS_CLOSED:
        return isSetIs_closed();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof space_isclosed_args)
        return this.equals((space_isclosed_args)that);
      return false;
    }

    public boolean equals(space_isclosed_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_is_closed = true;
      boolean that_present_is_closed = true;
      if (this_present_is_closed || that_present_is_closed) {
        if (!(this_present_is_closed && that_present_is_closed))
          return false;
        if (this.is_closed != that.is_closed)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(space_isclosed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      space_isclosed_args typedOther = (space_isclosed_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_closed()).compareTo(typedOther.isSetIs_closed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_closed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_closed, typedOther.is_closed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("space_isclosed_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_closed:");
      sb.append(this.is_closed);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class space_isclosed_argsStandardSchemeFactory implements SchemeFactory {
      public space_isclosed_argsStandardScheme getScheme() {
        return new space_isclosed_argsStandardScheme();
      }
    }

    private static class space_isclosed_argsStandardScheme extends StandardScheme<space_isclosed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, space_isclosed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_CLOSED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_closed = iprot.readI32();
                struct.setIs_closedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, space_isclosed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_CLOSED_FIELD_DESC);
        oprot.writeI32(struct.is_closed);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class space_isclosed_argsTupleSchemeFactory implements SchemeFactory {
      public space_isclosed_argsTupleScheme getScheme() {
        return new space_isclosed_argsTupleScheme();
      }
    }

    private static class space_isclosed_argsTupleScheme extends TupleScheme<space_isclosed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, space_isclosed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetIs_closed()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetIs_closed()) {
          oprot.writeI32(struct.is_closed);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, space_isclosed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.is_closed = iprot.readI32();
          struct.setIs_closedIsSet(true);
        }
      }
    }

  }

  public static class space_isclosed_result implements org.apache.thrift.TBase<space_isclosed_result, space_isclosed_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("space_isclosed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new space_isclosed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new space_isclosed_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(space_isclosed_result.class, metaDataMap);
    }

    public space_isclosed_result() {
    }

    public space_isclosed_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public space_isclosed_result(space_isclosed_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public space_isclosed_result deepCopy() {
      return new space_isclosed_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public space_isclosed_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof space_isclosed_result)
        return this.equals((space_isclosed_result)that);
      return false;
    }

    public boolean equals(space_isclosed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(space_isclosed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      space_isclosed_result typedOther = (space_isclosed_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("space_isclosed_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class space_isclosed_resultStandardSchemeFactory implements SchemeFactory {
      public space_isclosed_resultStandardScheme getScheme() {
        return new space_isclosed_resultStandardScheme();
      }
    }

    private static class space_isclosed_resultStandardScheme extends StandardScheme<space_isclosed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, space_isclosed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, space_isclosed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class space_isclosed_resultTupleSchemeFactory implements SchemeFactory {
      public space_isclosed_resultTupleScheme getScheme() {
        return new space_isclosed_resultTupleScheme();
      }
    }

    private static class space_isclosed_resultTupleScheme extends TupleScheme<space_isclosed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, space_isclosed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, space_isclosed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class user_unfollow_args implements org.apache.thrift.TBase<user_unfollow_args, user_unfollow_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_unfollow_args");

    private static final org.apache.thrift.protocol.TField USER_NAME1_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME2_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name2", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_unfollow_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_unfollow_argsTupleSchemeFactory());
    }

    public String user_name1; // required
    public String user_name2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME1((short)1, "user_name1"),
      USER_NAME2((short)2, "user_name2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME1
            return USER_NAME1;
          case 2: // USER_NAME2
            return USER_NAME2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME1, new org.apache.thrift.meta_data.FieldMetaData("user_name1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME2, new org.apache.thrift.meta_data.FieldMetaData("user_name2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_unfollow_args.class, metaDataMap);
    }

    public user_unfollow_args() {
    }

    public user_unfollow_args(
      String user_name1,
      String user_name2)
    {
      this();
      this.user_name1 = user_name1;
      this.user_name2 = user_name2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_unfollow_args(user_unfollow_args other) {
      if (other.isSetUser_name1()) {
        this.user_name1 = other.user_name1;
      }
      if (other.isSetUser_name2()) {
        this.user_name2 = other.user_name2;
      }
    }

    public user_unfollow_args deepCopy() {
      return new user_unfollow_args(this);
    }

    @Override
    public void clear() {
      this.user_name1 = null;
      this.user_name2 = null;
    }

    public String getUser_name1() {
      return this.user_name1;
    }

    public user_unfollow_args setUser_name1(String user_name1) {
      this.user_name1 = user_name1;
      return this;
    }

    public void unsetUser_name1() {
      this.user_name1 = null;
    }

    /** Returns true if field user_name1 is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name1() {
      return this.user_name1 != null;
    }

    public void setUser_name1IsSet(boolean value) {
      if (!value) {
        this.user_name1 = null;
      }
    }

    public String getUser_name2() {
      return this.user_name2;
    }

    public user_unfollow_args setUser_name2(String user_name2) {
      this.user_name2 = user_name2;
      return this;
    }

    public void unsetUser_name2() {
      this.user_name2 = null;
    }

    /** Returns true if field user_name2 is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name2() {
      return this.user_name2 != null;
    }

    public void setUser_name2IsSet(boolean value) {
      if (!value) {
        this.user_name2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME1:
        if (value == null) {
          unsetUser_name1();
        } else {
          setUser_name1((String)value);
        }
        break;

      case USER_NAME2:
        if (value == null) {
          unsetUser_name2();
        } else {
          setUser_name2((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME1:
        return getUser_name1();

      case USER_NAME2:
        return getUser_name2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME1:
        return isSetUser_name1();
      case USER_NAME2:
        return isSetUser_name2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_unfollow_args)
        return this.equals((user_unfollow_args)that);
      return false;
    }

    public boolean equals(user_unfollow_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name1 = true && this.isSetUser_name1();
      boolean that_present_user_name1 = true && that.isSetUser_name1();
      if (this_present_user_name1 || that_present_user_name1) {
        if (!(this_present_user_name1 && that_present_user_name1))
          return false;
        if (!this.user_name1.equals(that.user_name1))
          return false;
      }

      boolean this_present_user_name2 = true && this.isSetUser_name2();
      boolean that_present_user_name2 = true && that.isSetUser_name2();
      if (this_present_user_name2 || that_present_user_name2) {
        if (!(this_present_user_name2 && that_present_user_name2))
          return false;
        if (!this.user_name2.equals(that.user_name2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_unfollow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_unfollow_args typedOther = (user_unfollow_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name1()).compareTo(typedOther.isSetUser_name1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name1, typedOther.user_name1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name2()).compareTo(typedOther.isSetUser_name2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name2, typedOther.user_name2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_unfollow_args(");
      boolean first = true;

      sb.append("user_name1:");
      if (this.user_name1 == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name2:");
      if (this.user_name2 == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_unfollow_argsStandardSchemeFactory implements SchemeFactory {
      public user_unfollow_argsStandardScheme getScheme() {
        return new user_unfollow_argsStandardScheme();
      }
    }

    private static class user_unfollow_argsStandardScheme extends StandardScheme<user_unfollow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_unfollow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name1 = iprot.readString();
                struct.setUser_name1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name2 = iprot.readString();
                struct.setUser_name2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_unfollow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name1 != null) {
          oprot.writeFieldBegin(USER_NAME1_FIELD_DESC);
          oprot.writeString(struct.user_name1);
          oprot.writeFieldEnd();
        }
        if (struct.user_name2 != null) {
          oprot.writeFieldBegin(USER_NAME2_FIELD_DESC);
          oprot.writeString(struct.user_name2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_unfollow_argsTupleSchemeFactory implements SchemeFactory {
      public user_unfollow_argsTupleScheme getScheme() {
        return new user_unfollow_argsTupleScheme();
      }
    }

    private static class user_unfollow_argsTupleScheme extends TupleScheme<user_unfollow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_unfollow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name1()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser_name1()) {
          oprot.writeString(struct.user_name1);
        }
        if (struct.isSetUser_name2()) {
          oprot.writeString(struct.user_name2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_unfollow_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user_name1 = iprot.readString();
          struct.setUser_name1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name2 = iprot.readString();
          struct.setUser_name2IsSet(true);
        }
      }
    }

  }

  public static class user_unfollow_result implements org.apache.thrift.TBase<user_unfollow_result, user_unfollow_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_unfollow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_unfollow_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_unfollow_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_unfollow_result.class, metaDataMap);
    }

    public user_unfollow_result() {
    }

    public user_unfollow_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_unfollow_result(user_unfollow_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public user_unfollow_result deepCopy() {
      return new user_unfollow_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public user_unfollow_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_unfollow_result)
        return this.equals((user_unfollow_result)that);
      return false;
    }

    public boolean equals(user_unfollow_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_unfollow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_unfollow_result typedOther = (user_unfollow_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_unfollow_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_unfollow_resultStandardSchemeFactory implements SchemeFactory {
      public user_unfollow_resultStandardScheme getScheme() {
        return new user_unfollow_resultStandardScheme();
      }
    }

    private static class user_unfollow_resultStandardScheme extends StandardScheme<user_unfollow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_unfollow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_unfollow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_unfollow_resultTupleSchemeFactory implements SchemeFactory {
      public user_unfollow_resultTupleScheme getScheme() {
        return new user_unfollow_resultTupleScheme();
      }
    }

    private static class user_unfollow_resultTupleScheme extends TupleScheme<user_unfollow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_unfollow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_unfollow_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class voteup_markfav_readlater_args implements org.apache.thrift.TBase<voteup_markfav_readlater_args, voteup_markfav_readlater_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voteup_markfav_readlater_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new voteup_markfav_readlater_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new voteup_markfav_readlater_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String item_type; // required
    public String item_id; // required
    public String action; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      ITEM_TYPE((short)2, "item_type"),
      ITEM_ID((short)3, "item_id"),
      ACTION((short)4, "action"),
      TIME((short)5, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // ITEM_TYPE
            return ITEM_TYPE;
          case 3: // ITEM_ID
            return ITEM_ID;
          case 4: // ACTION
            return ACTION;
          case 5: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voteup_markfav_readlater_args.class, metaDataMap);
    }

    public voteup_markfav_readlater_args() {
    }

    public voteup_markfav_readlater_args(
      String user_name,
      String item_type,
      String item_id,
      String action,
      int time)
    {
      this();
      this.user_name = user_name;
      this.item_type = item_type;
      this.item_id = item_id;
      this.action = action;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public voteup_markfav_readlater_args(voteup_markfav_readlater_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
      if (other.isSetAction()) {
        this.action = other.action;
      }
      this.time = other.time;
    }

    public voteup_markfav_readlater_args deepCopy() {
      return new voteup_markfav_readlater_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.item_type = null;
      this.item_id = null;
      this.action = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public voteup_markfav_readlater_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getItem_type() {
      return this.item_type;
    }

    public voteup_markfav_readlater_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public voteup_markfav_readlater_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public String getAction() {
      return this.action;
    }

    public voteup_markfav_readlater_args setAction(String action) {
      this.action = action;
      return this;
    }

    public void unsetAction() {
      this.action = null;
    }

    /** Returns true if field action is set (has been assigned a value) and false otherwise */
    public boolean isSetAction() {
      return this.action != null;
    }

    public void setActionIsSet(boolean value) {
      if (!value) {
        this.action = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public voteup_markfav_readlater_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      case ACTION:
        if (value == null) {
          unsetAction();
        } else {
          setAction((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      case ACTION:
        return getAction();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      case ACTION:
        return isSetAction();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof voteup_markfav_readlater_args)
        return this.equals((voteup_markfav_readlater_args)that);
      return false;
    }

    public boolean equals(voteup_markfav_readlater_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      boolean this_present_action = true && this.isSetAction();
      boolean that_present_action = true && that.isSetAction();
      if (this_present_action || that_present_action) {
        if (!(this_present_action && that_present_action))
          return false;
        if (!this.action.equals(that.action))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(voteup_markfav_readlater_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      voteup_markfav_readlater_args typedOther = (voteup_markfav_readlater_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction()).compareTo(typedOther.isSetAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, typedOther.action);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("voteup_markfav_readlater_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action:");
      if (this.action == null) {
        sb.append("null");
      } else {
        sb.append(this.action);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class voteup_markfav_readlater_argsStandardSchemeFactory implements SchemeFactory {
      public voteup_markfav_readlater_argsStandardScheme getScheme() {
        return new voteup_markfav_readlater_argsStandardScheme();
      }
    }

    private static class voteup_markfav_readlater_argsStandardScheme extends StandardScheme<voteup_markfav_readlater_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, voteup_markfav_readlater_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.action = iprot.readString();
                struct.setActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, voteup_markfav_readlater_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        if (struct.action != null) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeString(struct.action);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class voteup_markfav_readlater_argsTupleSchemeFactory implements SchemeFactory {
      public voteup_markfav_readlater_argsTupleScheme getScheme() {
        return new voteup_markfav_readlater_argsTupleScheme();
      }
    }

    private static class voteup_markfav_readlater_argsTupleScheme extends TupleScheme<voteup_markfav_readlater_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, voteup_markfav_readlater_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetItem_type()) {
          optionals.set(1);
        }
        if (struct.isSetItem_id()) {
          optionals.set(2);
        }
        if (struct.isSetAction()) {
          optionals.set(3);
        }
        if (struct.isSetTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
        if (struct.isSetAction()) {
          oprot.writeString(struct.action);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, voteup_markfav_readlater_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.action = iprot.readString();
          struct.setActionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class voteup_markfav_readlater_result implements org.apache.thrift.TBase<voteup_markfav_readlater_result, voteup_markfav_readlater_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("voteup_markfav_readlater_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new voteup_markfav_readlater_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new voteup_markfav_readlater_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(voteup_markfav_readlater_result.class, metaDataMap);
    }

    public voteup_markfav_readlater_result() {
    }

    public voteup_markfav_readlater_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public voteup_markfav_readlater_result(voteup_markfav_readlater_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public voteup_markfav_readlater_result deepCopy() {
      return new voteup_markfav_readlater_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public voteup_markfav_readlater_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof voteup_markfav_readlater_result)
        return this.equals((voteup_markfav_readlater_result)that);
      return false;
    }

    public boolean equals(voteup_markfav_readlater_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(voteup_markfav_readlater_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      voteup_markfav_readlater_result typedOther = (voteup_markfav_readlater_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("voteup_markfav_readlater_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class voteup_markfav_readlater_resultStandardSchemeFactory implements SchemeFactory {
      public voteup_markfav_readlater_resultStandardScheme getScheme() {
        return new voteup_markfav_readlater_resultStandardScheme();
      }
    }

    private static class voteup_markfav_readlater_resultStandardScheme extends StandardScheme<voteup_markfav_readlater_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, voteup_markfav_readlater_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, voteup_markfav_readlater_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class voteup_markfav_readlater_resultTupleSchemeFactory implements SchemeFactory {
      public voteup_markfav_readlater_resultTupleScheme getScheme() {
        return new voteup_markfav_readlater_resultTupleScheme();
      }
    }

    private static class voteup_markfav_readlater_resultTupleScheme extends TupleScheme<voteup_markfav_readlater_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, voteup_markfav_readlater_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, voteup_markfav_readlater_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class votedown_args implements org.apache.thrift.TBase<votedown_args, votedown_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("votedown_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new votedown_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new votedown_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String item_type; // required
    public String item_id; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      ITEM_TYPE((short)2, "item_type"),
      ITEM_ID((short)3, "item_id"),
      TIME((short)4, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // ITEM_TYPE
            return ITEM_TYPE;
          case 3: // ITEM_ID
            return ITEM_ID;
          case 4: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(votedown_args.class, metaDataMap);
    }

    public votedown_args() {
    }

    public votedown_args(
      String user_name,
      String item_type,
      String item_id,
      int time)
    {
      this();
      this.user_name = user_name;
      this.item_type = item_type;
      this.item_id = item_id;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public votedown_args(votedown_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
      this.time = other.time;
    }

    public votedown_args deepCopy() {
      return new votedown_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.item_type = null;
      this.item_id = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public votedown_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getItem_type() {
      return this.item_type;
    }

    public votedown_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public votedown_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public votedown_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof votedown_args)
        return this.equals((votedown_args)that);
      return false;
    }

    public boolean equals(votedown_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(votedown_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      votedown_args typedOther = (votedown_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("votedown_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class votedown_argsStandardSchemeFactory implements SchemeFactory {
      public votedown_argsStandardScheme getScheme() {
        return new votedown_argsStandardScheme();
      }
    }

    private static class votedown_argsStandardScheme extends StandardScheme<votedown_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, votedown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, votedown_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class votedown_argsTupleSchemeFactory implements SchemeFactory {
      public votedown_argsTupleScheme getScheme() {
        return new votedown_argsTupleScheme();
      }
    }

    private static class votedown_argsTupleScheme extends TupleScheme<votedown_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, votedown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetItem_type()) {
          optionals.set(1);
        }
        if (struct.isSetItem_id()) {
          optionals.set(2);
        }
        if (struct.isSetTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, votedown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class votedown_result implements org.apache.thrift.TBase<votedown_result, votedown_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("votedown_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new votedown_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new votedown_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(votedown_result.class, metaDataMap);
    }

    public votedown_result() {
    }

    public votedown_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public votedown_result(votedown_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public votedown_result deepCopy() {
      return new votedown_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public votedown_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof votedown_result)
        return this.equals((votedown_result)that);
      return false;
    }

    public boolean equals(votedown_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(votedown_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      votedown_result typedOther = (votedown_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("votedown_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class votedown_resultStandardSchemeFactory implements SchemeFactory {
      public votedown_resultStandardScheme getScheme() {
        return new votedown_resultStandardScheme();
      }
    }

    private static class votedown_resultStandardScheme extends StandardScheme<votedown_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, votedown_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, votedown_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class votedown_resultTupleSchemeFactory implements SchemeFactory {
      public votedown_resultTupleScheme getScheme() {
        return new votedown_resultTupleScheme();
      }
    }

    private static class votedown_resultTupleScheme extends TupleScheme<votedown_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, votedown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, votedown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class user_remove_hashfav_args implements org.apache.thrift.TBase<user_remove_hashfav_args, user_remove_hashfav_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_remove_hashfav_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_remove_hashfav_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_remove_hashfav_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String tag_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      TAG_NAME((short)2, "tag_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // TAG_NAME
            return TAG_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG_NAME, new org.apache.thrift.meta_data.FieldMetaData("tag_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_remove_hashfav_args.class, metaDataMap);
    }

    public user_remove_hashfav_args() {
    }

    public user_remove_hashfav_args(
      String user_name,
      String tag_name)
    {
      this();
      this.user_name = user_name;
      this.tag_name = tag_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_remove_hashfav_args(user_remove_hashfav_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetTag_name()) {
        this.tag_name = other.tag_name;
      }
    }

    public user_remove_hashfav_args deepCopy() {
      return new user_remove_hashfav_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.tag_name = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public user_remove_hashfav_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getTag_name() {
      return this.tag_name;
    }

    public user_remove_hashfav_args setTag_name(String tag_name) {
      this.tag_name = tag_name;
      return this;
    }

    public void unsetTag_name() {
      this.tag_name = null;
    }

    /** Returns true if field tag_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTag_name() {
      return this.tag_name != null;
    }

    public void setTag_nameIsSet(boolean value) {
      if (!value) {
        this.tag_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case TAG_NAME:
        if (value == null) {
          unsetTag_name();
        } else {
          setTag_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case TAG_NAME:
        return getTag_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case TAG_NAME:
        return isSetTag_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_remove_hashfav_args)
        return this.equals((user_remove_hashfav_args)that);
      return false;
    }

    public boolean equals(user_remove_hashfav_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_tag_name = true && this.isSetTag_name();
      boolean that_present_tag_name = true && that.isSetTag_name();
      if (this_present_tag_name || that_present_tag_name) {
        if (!(this_present_tag_name && that_present_tag_name))
          return false;
        if (!this.tag_name.equals(that.tag_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_remove_hashfav_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_remove_hashfav_args typedOther = (user_remove_hashfav_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTag_name()).compareTo(typedOther.isSetTag_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_name, typedOther.tag_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_remove_hashfav_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag_name:");
      if (this.tag_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tag_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_remove_hashfav_argsStandardSchemeFactory implements SchemeFactory {
      public user_remove_hashfav_argsStandardScheme getScheme() {
        return new user_remove_hashfav_argsStandardScheme();
      }
    }

    private static class user_remove_hashfav_argsStandardScheme extends StandardScheme<user_remove_hashfav_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_remove_hashfav_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TAG_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tag_name = iprot.readString();
                struct.setTag_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_remove_hashfav_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.tag_name != null) {
          oprot.writeFieldBegin(TAG_NAME_FIELD_DESC);
          oprot.writeString(struct.tag_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_remove_hashfav_argsTupleSchemeFactory implements SchemeFactory {
      public user_remove_hashfav_argsTupleScheme getScheme() {
        return new user_remove_hashfav_argsTupleScheme();
      }
    }

    private static class user_remove_hashfav_argsTupleScheme extends TupleScheme<user_remove_hashfav_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_remove_hashfav_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetTag_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetTag_name()) {
          oprot.writeString(struct.tag_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_remove_hashfav_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tag_name = iprot.readString();
          struct.setTag_nameIsSet(true);
        }
      }
    }

  }

  public static class user_remove_hashfav_result implements org.apache.thrift.TBase<user_remove_hashfav_result, user_remove_hashfav_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_remove_hashfav_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_remove_hashfav_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_remove_hashfav_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_remove_hashfav_result.class, metaDataMap);
    }

    public user_remove_hashfav_result() {
    }

    public user_remove_hashfav_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_remove_hashfav_result(user_remove_hashfav_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public user_remove_hashfav_result deepCopy() {
      return new user_remove_hashfav_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public user_remove_hashfav_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_remove_hashfav_result)
        return this.equals((user_remove_hashfav_result)that);
      return false;
    }

    public boolean equals(user_remove_hashfav_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_remove_hashfav_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_remove_hashfav_result typedOther = (user_remove_hashfav_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_remove_hashfav_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_remove_hashfav_resultStandardSchemeFactory implements SchemeFactory {
      public user_remove_hashfav_resultStandardScheme getScheme() {
        return new user_remove_hashfav_resultStandardScheme();
      }
    }

    private static class user_remove_hashfav_resultStandardScheme extends StandardScheme<user_remove_hashfav_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_remove_hashfav_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_remove_hashfav_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_remove_hashfav_resultTupleSchemeFactory implements SchemeFactory {
      public user_remove_hashfav_resultTupleScheme getScheme() {
        return new user_remove_hashfav_resultTupleScheme();
      }
    }

    private static class user_remove_hashfav_resultTupleScheme extends TupleScheme<user_remove_hashfav_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_remove_hashfav_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_remove_hashfav_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class user_add_hashfav_args implements org.apache.thrift.TBase<user_add_hashfav_args, user_add_hashfav_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_add_hashfav_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tag_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_add_hashfav_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_add_hashfav_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String tag_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      TAG_NAME((short)2, "tag_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // TAG_NAME
            return TAG_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG_NAME, new org.apache.thrift.meta_data.FieldMetaData("tag_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_add_hashfav_args.class, metaDataMap);
    }

    public user_add_hashfav_args() {
    }

    public user_add_hashfav_args(
      String user_name,
      String tag_name)
    {
      this();
      this.user_name = user_name;
      this.tag_name = tag_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_add_hashfav_args(user_add_hashfav_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetTag_name()) {
        this.tag_name = other.tag_name;
      }
    }

    public user_add_hashfav_args deepCopy() {
      return new user_add_hashfav_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.tag_name = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public user_add_hashfav_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getTag_name() {
      return this.tag_name;
    }

    public user_add_hashfav_args setTag_name(String tag_name) {
      this.tag_name = tag_name;
      return this;
    }

    public void unsetTag_name() {
      this.tag_name = null;
    }

    /** Returns true if field tag_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTag_name() {
      return this.tag_name != null;
    }

    public void setTag_nameIsSet(boolean value) {
      if (!value) {
        this.tag_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case TAG_NAME:
        if (value == null) {
          unsetTag_name();
        } else {
          setTag_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case TAG_NAME:
        return getTag_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case TAG_NAME:
        return isSetTag_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_add_hashfav_args)
        return this.equals((user_add_hashfav_args)that);
      return false;
    }

    public boolean equals(user_add_hashfav_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_tag_name = true && this.isSetTag_name();
      boolean that_present_tag_name = true && that.isSetTag_name();
      if (this_present_tag_name || that_present_tag_name) {
        if (!(this_present_tag_name && that_present_tag_name))
          return false;
        if (!this.tag_name.equals(that.tag_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_add_hashfav_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_add_hashfav_args typedOther = (user_add_hashfav_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTag_name()).compareTo(typedOther.isSetTag_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag_name, typedOther.tag_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_add_hashfav_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag_name:");
      if (this.tag_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tag_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_add_hashfav_argsStandardSchemeFactory implements SchemeFactory {
      public user_add_hashfav_argsStandardScheme getScheme() {
        return new user_add_hashfav_argsStandardScheme();
      }
    }

    private static class user_add_hashfav_argsStandardScheme extends StandardScheme<user_add_hashfav_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_add_hashfav_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TAG_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tag_name = iprot.readString();
                struct.setTag_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_add_hashfav_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.tag_name != null) {
          oprot.writeFieldBegin(TAG_NAME_FIELD_DESC);
          oprot.writeString(struct.tag_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_add_hashfav_argsTupleSchemeFactory implements SchemeFactory {
      public user_add_hashfav_argsTupleScheme getScheme() {
        return new user_add_hashfav_argsTupleScheme();
      }
    }

    private static class user_add_hashfav_argsTupleScheme extends TupleScheme<user_add_hashfav_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_add_hashfav_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetTag_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetTag_name()) {
          oprot.writeString(struct.tag_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_add_hashfav_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tag_name = iprot.readString();
          struct.setTag_nameIsSet(true);
        }
      }
    }

  }

  public static class user_add_hashfav_result implements org.apache.thrift.TBase<user_add_hashfav_result, user_add_hashfav_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_add_hashfav_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_add_hashfav_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_add_hashfav_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_add_hashfav_result.class, metaDataMap);
    }

    public user_add_hashfav_result() {
    }

    public user_add_hashfav_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_add_hashfav_result(user_add_hashfav_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public user_add_hashfav_result deepCopy() {
      return new user_add_hashfav_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public user_add_hashfav_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_add_hashfav_result)
        return this.equals((user_add_hashfav_result)that);
      return false;
    }

    public boolean equals(user_add_hashfav_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_add_hashfav_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_add_hashfav_result typedOther = (user_add_hashfav_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_add_hashfav_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_add_hashfav_resultStandardSchemeFactory implements SchemeFactory {
      public user_add_hashfav_resultStandardScheme getScheme() {
        return new user_add_hashfav_resultStandardScheme();
      }
    }

    private static class user_add_hashfav_resultStandardScheme extends StandardScheme<user_add_hashfav_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_add_hashfav_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_add_hashfav_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_add_hashfav_resultTupleSchemeFactory implements SchemeFactory {
      public user_add_hashfav_resultTupleScheme getScheme() {
        return new user_add_hashfav_resultTupleScheme();
      }
    }

    private static class user_add_hashfav_resultTupleScheme extends TupleScheme<user_add_hashfav_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_add_hashfav_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_add_hashfav_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class user_add_favtopic_args implements org.apache.thrift.TBase<user_add_favtopic_args, user_add_favtopic_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_add_favtopic_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TOPICS_FIELD_DESC = new org.apache.thrift.protocol.TField("topics", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_add_favtopic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_add_favtopic_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String topics; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      TOPICS((short)2, "topics");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // TOPICS
            return TOPICS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOPICS, new org.apache.thrift.meta_data.FieldMetaData("topics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_add_favtopic_args.class, metaDataMap);
    }

    public user_add_favtopic_args() {
    }

    public user_add_favtopic_args(
      String user_name,
      String topics)
    {
      this();
      this.user_name = user_name;
      this.topics = topics;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_add_favtopic_args(user_add_favtopic_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetTopics()) {
        this.topics = other.topics;
      }
    }

    public user_add_favtopic_args deepCopy() {
      return new user_add_favtopic_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.topics = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public user_add_favtopic_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getTopics() {
      return this.topics;
    }

    public user_add_favtopic_args setTopics(String topics) {
      this.topics = topics;
      return this;
    }

    public void unsetTopics() {
      this.topics = null;
    }

    /** Returns true if field topics is set (has been assigned a value) and false otherwise */
    public boolean isSetTopics() {
      return this.topics != null;
    }

    public void setTopicsIsSet(boolean value) {
      if (!value) {
        this.topics = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case TOPICS:
        if (value == null) {
          unsetTopics();
        } else {
          setTopics((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case TOPICS:
        return getTopics();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case TOPICS:
        return isSetTopics();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_add_favtopic_args)
        return this.equals((user_add_favtopic_args)that);
      return false;
    }

    public boolean equals(user_add_favtopic_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_topics = true && this.isSetTopics();
      boolean that_present_topics = true && that.isSetTopics();
      if (this_present_topics || that_present_topics) {
        if (!(this_present_topics && that_present_topics))
          return false;
        if (!this.topics.equals(that.topics))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_add_favtopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_add_favtopic_args typedOther = (user_add_favtopic_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopics()).compareTo(typedOther.isSetTopics());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopics()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topics, typedOther.topics);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_add_favtopic_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topics:");
      if (this.topics == null) {
        sb.append("null");
      } else {
        sb.append(this.topics);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_add_favtopic_argsStandardSchemeFactory implements SchemeFactory {
      public user_add_favtopic_argsStandardScheme getScheme() {
        return new user_add_favtopic_argsStandardScheme();
      }
    }

    private static class user_add_favtopic_argsStandardScheme extends StandardScheme<user_add_favtopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_add_favtopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOPICS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topics = iprot.readString();
                struct.setTopicsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_add_favtopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.topics != null) {
          oprot.writeFieldBegin(TOPICS_FIELD_DESC);
          oprot.writeString(struct.topics);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_add_favtopic_argsTupleSchemeFactory implements SchemeFactory {
      public user_add_favtopic_argsTupleScheme getScheme() {
        return new user_add_favtopic_argsTupleScheme();
      }
    }

    private static class user_add_favtopic_argsTupleScheme extends TupleScheme<user_add_favtopic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_add_favtopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetTopics()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetTopics()) {
          oprot.writeString(struct.topics);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_add_favtopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topics = iprot.readString();
          struct.setTopicsIsSet(true);
        }
      }
    }

  }

  public static class user_add_favtopic_result implements org.apache.thrift.TBase<user_add_favtopic_result, user_add_favtopic_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_add_favtopic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_add_favtopic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_add_favtopic_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_add_favtopic_result.class, metaDataMap);
    }

    public user_add_favtopic_result() {
    }

    public user_add_favtopic_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_add_favtopic_result(user_add_favtopic_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public user_add_favtopic_result deepCopy() {
      return new user_add_favtopic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public user_add_favtopic_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_add_favtopic_result)
        return this.equals((user_add_favtopic_result)that);
      return false;
    }

    public boolean equals(user_add_favtopic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_add_favtopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_add_favtopic_result typedOther = (user_add_favtopic_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_add_favtopic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_add_favtopic_resultStandardSchemeFactory implements SchemeFactory {
      public user_add_favtopic_resultStandardScheme getScheme() {
        return new user_add_favtopic_resultStandardScheme();
      }
    }

    private static class user_add_favtopic_resultStandardScheme extends StandardScheme<user_add_favtopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_add_favtopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_add_favtopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_add_favtopic_resultTupleSchemeFactory implements SchemeFactory {
      public user_add_favtopic_resultTupleScheme getScheme() {
        return new user_add_favtopic_resultTupleScheme();
      }
    }

    private static class user_add_favtopic_resultTupleScheme extends TupleScheme<user_add_favtopic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_add_favtopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_add_favtopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class user_view_args implements org.apache.thrift.TBase<user_view_args, user_view_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_view_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_view_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_view_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String item_type; // required
    public String item_id; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      ITEM_TYPE((short)2, "item_type"),
      ITEM_ID((short)3, "item_id"),
      TIME((short)4, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // ITEM_TYPE
            return ITEM_TYPE;
          case 3: // ITEM_ID
            return ITEM_ID;
          case 4: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_view_args.class, metaDataMap);
    }

    public user_view_args() {
    }

    public user_view_args(
      String user_name,
      String item_type,
      String item_id,
      int time)
    {
      this();
      this.user_name = user_name;
      this.item_type = item_type;
      this.item_id = item_id;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_view_args(user_view_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
      this.time = other.time;
    }

    public user_view_args deepCopy() {
      return new user_view_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.item_type = null;
      this.item_id = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public user_view_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getItem_type() {
      return this.item_type;
    }

    public user_view_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public user_view_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public user_view_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_view_args)
        return this.equals((user_view_args)that);
      return false;
    }

    public boolean equals(user_view_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_view_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_view_args typedOther = (user_view_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_view_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_view_argsStandardSchemeFactory implements SchemeFactory {
      public user_view_argsStandardScheme getScheme() {
        return new user_view_argsStandardScheme();
      }
    }

    private static class user_view_argsStandardScheme extends StandardScheme<user_view_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_view_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_view_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_view_argsTupleSchemeFactory implements SchemeFactory {
      public user_view_argsTupleScheme getScheme() {
        return new user_view_argsTupleScheme();
      }
    }

    private static class user_view_argsTupleScheme extends TupleScheme<user_view_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_view_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetItem_type()) {
          optionals.set(1);
        }
        if (struct.isSetItem_id()) {
          optionals.set(2);
        }
        if (struct.isSetTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_view_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class user_view_result implements org.apache.thrift.TBase<user_view_result, user_view_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_view_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_view_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_view_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_view_result.class, metaDataMap);
    }

    public user_view_result() {
    }

    public user_view_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_view_result(user_view_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public user_view_result deepCopy() {
      return new user_view_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public user_view_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_view_result)
        return this.equals((user_view_result)that);
      return false;
    }

    public boolean equals(user_view_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_view_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_view_result typedOther = (user_view_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_view_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_view_resultStandardSchemeFactory implements SchemeFactory {
      public user_view_resultStandardScheme getScheme() {
        return new user_view_resultStandardScheme();
      }
    }

    private static class user_view_resultStandardScheme extends StandardScheme<user_view_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_view_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_view_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_view_resultTupleSchemeFactory implements SchemeFactory {
      public user_view_resultTupleScheme getScheme() {
        return new user_view_resultTupleScheme();
      }
    }

    private static class user_view_resultTupleScheme extends TupleScheme<user_view_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_view_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_view_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_all_items_args implements org.apache.thrift.TBase<get_all_items_args, get_all_items_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_items_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_all_items_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_all_items_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String user_name; // required
    public int count; // required
    public int prev_cnt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      USER_NAME((short)2, "user_name"),
      COUNT((short)3, "count"),
      PREV_CNT((short)4, "prev_cnt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // COUNT
            return COUNT;
          case 4: // PREV_CNT
            return PREV_CNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_items_args.class, metaDataMap);
    }

    public get_all_items_args() {
    }

    public get_all_items_args(
      String item_type,
      String user_name,
      int count,
      int prev_cnt)
    {
      this();
      this.item_type = item_type;
      this.user_name = user_name;
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_items_args(get_all_items_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
    }

    public get_all_items_args deepCopy() {
      return new get_all_items_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.user_name = null;
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public get_all_items_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_all_items_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public get_all_items_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_all_items_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case USER_NAME:
        return getUser_name();

      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case USER_NAME:
        return isSetUser_name();
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_items_args)
        return this.equals((get_all_items_args)that);
      return false;
    }

    public boolean equals(get_all_items_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_all_items_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_all_items_args typedOther = (get_all_items_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_items_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_all_items_argsStandardSchemeFactory implements SchemeFactory {
      public get_all_items_argsStandardScheme getScheme() {
        return new get_all_items_argsStandardScheme();
      }
    }

    private static class get_all_items_argsStandardScheme extends StandardScheme<get_all_items_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_items_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_items_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_all_items_argsTupleSchemeFactory implements SchemeFactory {
      public get_all_items_argsTupleScheme getScheme() {
        return new get_all_items_argsTupleScheme();
      }
    }

    private static class get_all_items_argsTupleScheme extends TupleScheme<get_all_items_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_items_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_items_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
      }
    }

  }

  public static class get_all_items_result implements org.apache.thrift.TBase<get_all_items_result, get_all_items_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_items_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_all_items_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_all_items_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_items_result.class, metaDataMap);
    }

    public get_all_items_result() {
    }

    public get_all_items_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_items_result(get_all_items_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_all_items_result deepCopy() {
      return new get_all_items_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_all_items_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_items_result)
        return this.equals((get_all_items_result)that);
      return false;
    }

    public boolean equals(get_all_items_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_all_items_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_all_items_result typedOther = (get_all_items_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_items_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_all_items_resultStandardSchemeFactory implements SchemeFactory {
      public get_all_items_resultStandardScheme getScheme() {
        return new get_all_items_resultStandardScheme();
      }
    }

    private static class get_all_items_resultStandardScheme extends StandardScheme<get_all_items_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_items_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_items_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_all_items_resultTupleSchemeFactory implements SchemeFactory {
      public get_all_items_resultTupleScheme getScheme() {
        return new get_all_items_resultTupleScheme();
      }
    }

    private static class get_all_items_resultTupleScheme extends TupleScheme<get_all_items_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_items_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_items_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_user_data_args implements org.apache.thrift.TBase<get_user_data_args, get_user_data_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_user_data_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_user_data_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_user_data_argsTupleSchemeFactory());
    }

    public String user_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_user_data_args.class, metaDataMap);
    }

    public get_user_data_args() {
    }

    public get_user_data_args(
      String user_name)
    {
      this();
      this.user_name = user_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_user_data_args(get_user_data_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
    }

    public get_user_data_args deepCopy() {
      return new get_user_data_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_user_data_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_user_data_args)
        return this.equals((get_user_data_args)that);
      return false;
    }

    public boolean equals(get_user_data_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_user_data_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_user_data_args typedOther = (get_user_data_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_user_data_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_user_data_argsStandardSchemeFactory implements SchemeFactory {
      public get_user_data_argsStandardScheme getScheme() {
        return new get_user_data_argsStandardScheme();
      }
    }

    private static class get_user_data_argsStandardScheme extends StandardScheme<get_user_data_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_user_data_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_user_data_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_user_data_argsTupleSchemeFactory implements SchemeFactory {
      public get_user_data_argsTupleScheme getScheme() {
        return new get_user_data_argsTupleScheme();
      }
    }

    private static class get_user_data_argsTupleScheme extends TupleScheme<get_user_data_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_user_data_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_user_data_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
      }
    }

  }

  public static class get_user_data_result implements org.apache.thrift.TBase<get_user_data_result, get_user_data_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_user_data_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_user_data_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_user_data_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_user_data_result.class, metaDataMap);
    }

    public get_user_data_result() {
    }

    public get_user_data_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_user_data_result(get_user_data_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_user_data_result deepCopy() {
      return new get_user_data_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_user_data_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_user_data_result)
        return this.equals((get_user_data_result)that);
      return false;
    }

    public boolean equals(get_user_data_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_user_data_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_user_data_result typedOther = (get_user_data_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_user_data_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_user_data_resultStandardSchemeFactory implements SchemeFactory {
      public get_user_data_resultStandardScheme getScheme() {
        return new get_user_data_resultStandardScheme();
      }
    }

    private static class get_user_data_resultStandardScheme extends StandardScheme<get_user_data_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_user_data_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_user_data_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_user_data_resultTupleSchemeFactory implements SchemeFactory {
      public get_user_data_resultTupleScheme getScheme() {
        return new get_user_data_resultTupleScheme();
      }
    }

    private static class get_user_data_resultTupleScheme extends TupleScheme<get_user_data_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_user_data_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_user_data_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_item_data_args implements org.apache.thrift.TBase<get_item_data_args, get_item_data_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_item_data_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_item_data_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_item_data_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String item_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ITEM_ID((short)2, "item_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_item_data_args.class, metaDataMap);
    }

    public get_item_data_args() {
    }

    public get_item_data_args(
      String item_type,
      String item_id)
    {
      this();
      this.item_type = item_type;
      this.item_id = item_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_item_data_args(get_item_data_args other) {
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
    }

    public get_item_data_args deepCopy() {
      return new get_item_data_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.item_id = null;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public get_item_data_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public get_item_data_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_item_data_args)
        return this.equals((get_item_data_args)that);
      return false;
    }

    public boolean equals(get_item_data_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_item_data_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_item_data_args typedOther = (get_item_data_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_item_data_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_item_data_argsStandardSchemeFactory implements SchemeFactory {
      public get_item_data_argsStandardScheme getScheme() {
        return new get_item_data_argsStandardScheme();
      }
    }

    private static class get_item_data_argsStandardScheme extends StandardScheme<get_item_data_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_item_data_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_item_data_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_item_data_argsTupleSchemeFactory implements SchemeFactory {
      public get_item_data_argsTupleScheme getScheme() {
        return new get_item_data_argsTupleScheme();
      }
    }

    private static class get_item_data_argsTupleScheme extends TupleScheme<get_item_data_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_item_data_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetItem_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_item_data_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
      }
    }

  }

  public static class get_item_data_result implements org.apache.thrift.TBase<get_item_data_result, get_item_data_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_item_data_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_item_data_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_item_data_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_item_data_result.class, metaDataMap);
    }

    public get_item_data_result() {
    }

    public get_item_data_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_item_data_result(get_item_data_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_item_data_result deepCopy() {
      return new get_item_data_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_item_data_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_item_data_result)
        return this.equals((get_item_data_result)that);
      return false;
    }

    public boolean equals(get_item_data_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_item_data_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_item_data_result typedOther = (get_item_data_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_item_data_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_item_data_resultStandardSchemeFactory implements SchemeFactory {
      public get_item_data_resultStandardScheme getScheme() {
        return new get_item_data_resultStandardScheme();
      }
    }

    private static class get_item_data_resultStandardScheme extends StandardScheme<get_item_data_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_item_data_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_item_data_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_item_data_resultTupleSchemeFactory implements SchemeFactory {
      public get_item_data_resultTupleScheme getScheme() {
        return new get_item_data_resultTupleScheme();
      }
    }

    private static class get_item_data_resultTupleScheme extends TupleScheme<get_item_data_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_item_data_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_item_data_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_monthly_items_args implements org.apache.thrift.TBase<get_monthly_items_args, get_monthly_items_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_monthly_items_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_monthly_items_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_monthly_items_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_monthly_items_args.class, metaDataMap);
    }

    public get_monthly_items_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_monthly_items_args(get_monthly_items_args other) {
    }

    public get_monthly_items_args deepCopy() {
      return new get_monthly_items_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_monthly_items_args)
        return this.equals((get_monthly_items_args)that);
      return false;
    }

    public boolean equals(get_monthly_items_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_monthly_items_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_monthly_items_args typedOther = (get_monthly_items_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_monthly_items_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_monthly_items_argsStandardSchemeFactory implements SchemeFactory {
      public get_monthly_items_argsStandardScheme getScheme() {
        return new get_monthly_items_argsStandardScheme();
      }
    }

    private static class get_monthly_items_argsStandardScheme extends StandardScheme<get_monthly_items_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_monthly_items_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_monthly_items_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_monthly_items_argsTupleSchemeFactory implements SchemeFactory {
      public get_monthly_items_argsTupleScheme getScheme() {
        return new get_monthly_items_argsTupleScheme();
      }
    }

    private static class get_monthly_items_argsTupleScheme extends TupleScheme<get_monthly_items_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_monthly_items_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_monthly_items_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class get_monthly_items_result implements org.apache.thrift.TBase<get_monthly_items_result, get_monthly_items_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_monthly_items_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_monthly_items_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_monthly_items_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_monthly_items_result.class, metaDataMap);
    }

    public get_monthly_items_result() {
    }

    public get_monthly_items_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_monthly_items_result(get_monthly_items_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_monthly_items_result deepCopy() {
      return new get_monthly_items_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_monthly_items_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_monthly_items_result)
        return this.equals((get_monthly_items_result)that);
      return false;
    }

    public boolean equals(get_monthly_items_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_monthly_items_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_monthly_items_result typedOther = (get_monthly_items_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_monthly_items_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_monthly_items_resultStandardSchemeFactory implements SchemeFactory {
      public get_monthly_items_resultStandardScheme getScheme() {
        return new get_monthly_items_resultStandardScheme();
      }
    }

    private static class get_monthly_items_resultStandardScheme extends StandardScheme<get_monthly_items_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_monthly_items_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_monthly_items_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_monthly_items_resultTupleSchemeFactory implements SchemeFactory {
      public get_monthly_items_resultTupleScheme getScheme() {
        return new get_monthly_items_resultTupleScheme();
      }
    }

    private static class get_monthly_items_resultTupleScheme extends TupleScheme<get_monthly_items_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_monthly_items_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_monthly_items_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class article_pushed_args implements org.apache.thrift.TBase<article_pushed_args, article_pushed_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("article_pushed_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new article_pushed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new article_pushed_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(article_pushed_args.class, metaDataMap);
    }

    public article_pushed_args() {
    }

    public article_pushed_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public article_pushed_args(article_pushed_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public article_pushed_args deepCopy() {
      return new article_pushed_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public article_pushed_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof article_pushed_args)
        return this.equals((article_pushed_args)that);
      return false;
    }

    public boolean equals(article_pushed_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(article_pushed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      article_pushed_args typedOther = (article_pushed_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("article_pushed_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class article_pushed_argsStandardSchemeFactory implements SchemeFactory {
      public article_pushed_argsStandardScheme getScheme() {
        return new article_pushed_argsStandardScheme();
      }
    }

    private static class article_pushed_argsStandardScheme extends StandardScheme<article_pushed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, article_pushed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, article_pushed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class article_pushed_argsTupleSchemeFactory implements SchemeFactory {
      public article_pushed_argsTupleScheme getScheme() {
        return new article_pushed_argsTupleScheme();
      }
    }

    private static class article_pushed_argsTupleScheme extends TupleScheme<article_pushed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, article_pushed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, article_pushed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class article_pushed_result implements org.apache.thrift.TBase<article_pushed_result, article_pushed_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("article_pushed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new article_pushed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new article_pushed_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(article_pushed_result.class, metaDataMap);
    }

    public article_pushed_result() {
    }

    public article_pushed_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public article_pushed_result(article_pushed_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public article_pushed_result deepCopy() {
      return new article_pushed_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public article_pushed_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof article_pushed_result)
        return this.equals((article_pushed_result)that);
      return false;
    }

    public boolean equals(article_pushed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(article_pushed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      article_pushed_result typedOther = (article_pushed_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("article_pushed_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class article_pushed_resultStandardSchemeFactory implements SchemeFactory {
      public article_pushed_resultStandardScheme getScheme() {
        return new article_pushed_resultStandardScheme();
      }
    }

    private static class article_pushed_resultStandardScheme extends StandardScheme<article_pushed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, article_pushed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, article_pushed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class article_pushed_resultTupleSchemeFactory implements SchemeFactory {
      public article_pushed_resultTupleScheme getScheme() {
        return new article_pushed_resultTupleScheme();
      }
    }

    private static class article_pushed_resultTupleScheme extends TupleScheme<article_pushed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, article_pushed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, article_pushed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class stream_args implements org.apache.thrift.TBase<stream_args, stream_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stream_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stream_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stream_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String item_type; // required
    public int count; // required
    public int prev_cnt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      ITEM_TYPE((short)2, "item_type"),
      COUNT((short)3, "count"),
      PREV_CNT((short)4, "prev_cnt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // ITEM_TYPE
            return ITEM_TYPE;
          case 3: // COUNT
            return COUNT;
          case 4: // PREV_CNT
            return PREV_CNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stream_args.class, metaDataMap);
    }

    public stream_args() {
    }

    public stream_args(
      String user_name,
      String item_type,
      int count,
      int prev_cnt)
    {
      this();
      this.user_name = user_name;
      this.item_type = item_type;
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stream_args(stream_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
    }

    public stream_args deepCopy() {
      return new stream_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.item_type = null;
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public stream_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getItem_type() {
      return this.item_type;
    }

    public stream_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public stream_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public stream_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case ITEM_TYPE:
        return getItem_type();

      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case ITEM_TYPE:
        return isSetItem_type();
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stream_args)
        return this.equals((stream_args)that);
      return false;
    }

    public boolean equals(stream_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stream_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stream_args typedOther = (stream_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stream_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stream_argsStandardSchemeFactory implements SchemeFactory {
      public stream_argsStandardScheme getScheme() {
        return new stream_argsStandardScheme();
      }
    }

    private static class stream_argsStandardScheme extends StandardScheme<stream_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stream_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stream_argsTupleSchemeFactory implements SchemeFactory {
      public stream_argsTupleScheme getScheme() {
        return new stream_argsTupleScheme();
      }
    }

    private static class stream_argsTupleScheme extends TupleScheme<stream_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetItem_type()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
      }
    }

  }

  public static class stream_result implements org.apache.thrift.TBase<stream_result, stream_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stream_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stream_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stream_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stream_result.class, metaDataMap);
    }

    public stream_result() {
    }

    public stream_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stream_result(stream_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public stream_result deepCopy() {
      return new stream_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public stream_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stream_result)
        return this.equals((stream_result)that);
      return false;
    }

    public boolean equals(stream_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stream_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stream_result typedOther = (stream_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stream_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stream_resultStandardSchemeFactory implements SchemeFactory {
      public stream_resultStandardScheme getScheme() {
        return new stream_resultStandardScheme();
      }
    }

    private static class stream_resultStandardScheme extends StandardScheme<stream_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stream_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stream_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stream_resultTupleSchemeFactory implements SchemeFactory {
      public stream_resultTupleScheme getScheme() {
        return new stream_resultTupleScheme();
      }
    }

    private static class stream_resultTupleScheme extends TupleScheme<stream_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class context_args implements org.apache.thrift.TBase<context_args, context_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("context_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new context_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new context_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String item_type; // required
    public String item_id; // required
    public int count; // required
    public int prev_cnt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      ITEM_TYPE((short)2, "item_type"),
      ITEM_ID((short)3, "item_id"),
      COUNT((short)4, "count"),
      PREV_CNT((short)5, "prev_cnt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // ITEM_TYPE
            return ITEM_TYPE;
          case 3: // ITEM_ID
            return ITEM_ID;
          case 4: // COUNT
            return COUNT;
          case 5: // PREV_CNT
            return PREV_CNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(context_args.class, metaDataMap);
    }

    public context_args() {
    }

    public context_args(
      String user_name,
      String item_type,
      String item_id,
      int count,
      int prev_cnt)
    {
      this();
      this.user_name = user_name;
      this.item_type = item_type;
      this.item_id = item_id;
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public context_args(context_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
    }

    public context_args deepCopy() {
      return new context_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.item_type = null;
      this.item_id = null;
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public context_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getItem_type() {
      return this.item_type;
    }

    public context_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public context_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public context_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public context_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof context_args)
        return this.equals((context_args)that);
      return false;
    }

    public boolean equals(context_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(context_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      context_args typedOther = (context_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("context_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class context_argsStandardSchemeFactory implements SchemeFactory {
      public context_argsStandardScheme getScheme() {
        return new context_argsStandardScheme();
      }
    }

    private static class context_argsStandardScheme extends StandardScheme<context_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, context_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, context_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class context_argsTupleSchemeFactory implements SchemeFactory {
      public context_argsTupleScheme getScheme() {
        return new context_argsTupleScheme();
      }
    }

    private static class context_argsTupleScheme extends TupleScheme<context_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, context_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetItem_type()) {
          optionals.set(1);
        }
        if (struct.isSetItem_id()) {
          optionals.set(2);
        }
        if (struct.isSetCount()) {
          optionals.set(3);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, context_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(4)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
      }
    }

  }

  public static class context_result implements org.apache.thrift.TBase<context_result, context_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("context_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new context_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new context_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(context_result.class, metaDataMap);
    }

    public context_result() {
    }

    public context_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public context_result(context_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public context_result deepCopy() {
      return new context_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public context_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof context_result)
        return this.equals((context_result)that);
      return false;
    }

    public boolean equals(context_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(context_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      context_result typedOther = (context_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("context_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class context_resultStandardSchemeFactory implements SchemeFactory {
      public context_resultStandardScheme getScheme() {
        return new context_resultStandardScheme();
      }
    }

    private static class context_resultStandardScheme extends StandardScheme<context_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, context_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, context_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class context_resultTupleSchemeFactory implements SchemeFactory {
      public context_resultTupleScheme getScheme() {
        return new context_resultTupleScheme();
      }
    }

    private static class context_resultTupleScheme extends TupleScheme<context_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, context_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, context_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class notifications_args implements org.apache.thrift.TBase<notifications_args, notifications_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifications_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifications_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifications_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public int count; // required
    public int prev_cnt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      COUNT((short)2, "count"),
      PREV_CNT((short)3, "prev_cnt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // COUNT
            return COUNT;
          case 3: // PREV_CNT
            return PREV_CNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifications_args.class, metaDataMap);
    }

    public notifications_args() {
    }

    public notifications_args(
      String user_name,
      int count,
      int prev_cnt)
    {
      this();
      this.user_name = user_name;
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifications_args(notifications_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
    }

    public notifications_args deepCopy() {
      return new notifications_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public notifications_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public notifications_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public notifications_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifications_args)
        return this.equals((notifications_args)that);
      return false;
    }

    public boolean equals(notifications_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifications_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifications_args typedOther = (notifications_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifications_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifications_argsStandardSchemeFactory implements SchemeFactory {
      public notifications_argsStandardScheme getScheme() {
        return new notifications_argsStandardScheme();
      }
    }

    private static class notifications_argsStandardScheme extends StandardScheme<notifications_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifications_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifications_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifications_argsTupleSchemeFactory implements SchemeFactory {
      public notifications_argsTupleScheme getScheme() {
        return new notifications_argsTupleScheme();
      }
    }

    private static class notifications_argsTupleScheme extends TupleScheme<notifications_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifications_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetCount()) {
          optionals.set(1);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifications_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(2)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
      }
    }

  }

  public static class notifications_result implements org.apache.thrift.TBase<notifications_result, notifications_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifications_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifications_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifications_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifications_result.class, metaDataMap);
    }

    public notifications_result() {
    }

    public notifications_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifications_result(notifications_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public notifications_result deepCopy() {
      return new notifications_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public notifications_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifications_result)
        return this.equals((notifications_result)that);
      return false;
    }

    public boolean equals(notifications_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifications_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifications_result typedOther = (notifications_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifications_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifications_resultStandardSchemeFactory implements SchemeFactory {
      public notifications_resultStandardScheme getScheme() {
        return new notifications_resultStandardScheme();
      }
    }

    private static class notifications_resultStandardScheme extends StandardScheme<notifications_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifications_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifications_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifications_resultTupleSchemeFactory implements SchemeFactory {
      public notifications_resultTupleScheme getScheme() {
        return new notifications_resultTupleScheme();
      }
    }

    private static class notifications_resultTupleScheme extends TupleScheme<notifications_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifications_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifications_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_article_args implements org.apache.thrift.TBase<create_article_args, create_article_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_article_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField A_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("a_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField A_TITLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("a_title_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField A_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("a_title", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField A_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("a_content", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField A_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("a_summary", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField A_FUT_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("a_fut_image", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField A_CAT_FIELD_DESC = new org.apache.thrift.protocol.TField("a_cat", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField A_SUBCAT_FIELD_DESC = new org.apache.thrift.protocol.TField("a_subcat", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField A_HASHTAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("a_hashtags", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField A_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("a_users", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField A_TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("a_time_created", org.apache.thrift.protocol.TType.I32, (short)12);
    private static final org.apache.thrift.protocol.TField RELATED_ARTICLES_FIELD_DESC = new org.apache.thrift.protocol.TField("related_articles", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField RELATED_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("related_events", org.apache.thrift.protocol.TType.STRING, (short)14);
    private static final org.apache.thrift.protocol.TField MOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("mod_name", org.apache.thrift.protocol.TType.STRING, (short)15);
    private static final org.apache.thrift.protocol.TField STARS_FIELD_DESC = new org.apache.thrift.protocol.TField("stars", org.apache.thrift.protocol.TType.I32, (short)16);
    private static final org.apache.thrift.protocol.TField IS_EDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_edit", org.apache.thrift.protocol.TType.I32, (short)17);
    private static final org.apache.thrift.protocol.TField IS_CLOSED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_closed", org.apache.thrift.protocol.TType.I32, (short)18);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_article_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_article_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String a_id; // required
    public String a_title_id; // required
    public String a_title; // required
    public String a_content; // required
    public String a_summary; // required
    public String a_fut_image; // required
    public String a_cat; // required
    public String a_subcat; // required
    public String a_hashtags; // required
    public String a_users; // required
    public int a_time_created; // required
    public String related_articles; // required
    public String related_events; // required
    public String mod_name; // required
    public int stars; // required
    public int is_edit; // required
    public int is_closed; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      A_ID((short)2, "a_id"),
      A_TITLE_ID((short)3, "a_title_id"),
      A_TITLE((short)4, "a_title"),
      A_CONTENT((short)5, "a_content"),
      A_SUMMARY((short)6, "a_summary"),
      A_FUT_IMAGE((short)7, "a_fut_image"),
      A_CAT((short)8, "a_cat"),
      A_SUBCAT((short)9, "a_subcat"),
      A_HASHTAGS((short)10, "a_hashtags"),
      A_USERS((short)11, "a_users"),
      A_TIME_CREATED((short)12, "a_time_created"),
      RELATED_ARTICLES((short)13, "related_articles"),
      RELATED_EVENTS((short)14, "related_events"),
      MOD_NAME((short)15, "mod_name"),
      STARS((short)16, "stars"),
      IS_EDIT((short)17, "is_edit"),
      IS_CLOSED((short)18, "is_closed");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // A_ID
            return A_ID;
          case 3: // A_TITLE_ID
            return A_TITLE_ID;
          case 4: // A_TITLE
            return A_TITLE;
          case 5: // A_CONTENT
            return A_CONTENT;
          case 6: // A_SUMMARY
            return A_SUMMARY;
          case 7: // A_FUT_IMAGE
            return A_FUT_IMAGE;
          case 8: // A_CAT
            return A_CAT;
          case 9: // A_SUBCAT
            return A_SUBCAT;
          case 10: // A_HASHTAGS
            return A_HASHTAGS;
          case 11: // A_USERS
            return A_USERS;
          case 12: // A_TIME_CREATED
            return A_TIME_CREATED;
          case 13: // RELATED_ARTICLES
            return RELATED_ARTICLES;
          case 14: // RELATED_EVENTS
            return RELATED_EVENTS;
          case 15: // MOD_NAME
            return MOD_NAME;
          case 16: // STARS
            return STARS;
          case 17: // IS_EDIT
            return IS_EDIT;
          case 18: // IS_CLOSED
            return IS_CLOSED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __A_TIME_CREATED_ISSET_ID = 0;
    private static final int __STARS_ISSET_ID = 1;
    private static final int __IS_EDIT_ISSET_ID = 2;
    private static final int __IS_CLOSED_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.A_ID, new org.apache.thrift.meta_data.FieldMetaData("a_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.A_TITLE_ID, new org.apache.thrift.meta_data.FieldMetaData("a_title_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.A_TITLE, new org.apache.thrift.meta_data.FieldMetaData("a_title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.A_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("a_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.A_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("a_summary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.A_FUT_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("a_fut_image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.A_CAT, new org.apache.thrift.meta_data.FieldMetaData("a_cat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.A_SUBCAT, new org.apache.thrift.meta_data.FieldMetaData("a_subcat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.A_HASHTAGS, new org.apache.thrift.meta_data.FieldMetaData("a_hashtags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.A_USERS, new org.apache.thrift.meta_data.FieldMetaData("a_users", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.A_TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("a_time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RELATED_ARTICLES, new org.apache.thrift.meta_data.FieldMetaData("related_articles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RELATED_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("related_events", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("mod_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STARS, new org.apache.thrift.meta_data.FieldMetaData("stars", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_EDIT, new org.apache.thrift.meta_data.FieldMetaData("is_edit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_CLOSED, new org.apache.thrift.meta_data.FieldMetaData("is_closed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_article_args.class, metaDataMap);
    }

    public create_article_args() {
    }

    public create_article_args(
      String user_name,
      String a_id,
      String a_title_id,
      String a_title,
      String a_content,
      String a_summary,
      String a_fut_image,
      String a_cat,
      String a_subcat,
      String a_hashtags,
      String a_users,
      int a_time_created,
      String related_articles,
      String related_events,
      String mod_name,
      int stars,
      int is_edit,
      int is_closed)
    {
      this();
      this.user_name = user_name;
      this.a_id = a_id;
      this.a_title_id = a_title_id;
      this.a_title = a_title;
      this.a_content = a_content;
      this.a_summary = a_summary;
      this.a_fut_image = a_fut_image;
      this.a_cat = a_cat;
      this.a_subcat = a_subcat;
      this.a_hashtags = a_hashtags;
      this.a_users = a_users;
      this.a_time_created = a_time_created;
      setA_time_createdIsSet(true);
      this.related_articles = related_articles;
      this.related_events = related_events;
      this.mod_name = mod_name;
      this.stars = stars;
      setStarsIsSet(true);
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      this.is_closed = is_closed;
      setIs_closedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_article_args(create_article_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetA_id()) {
        this.a_id = other.a_id;
      }
      if (other.isSetA_title_id()) {
        this.a_title_id = other.a_title_id;
      }
      if (other.isSetA_title()) {
        this.a_title = other.a_title;
      }
      if (other.isSetA_content()) {
        this.a_content = other.a_content;
      }
      if (other.isSetA_summary()) {
        this.a_summary = other.a_summary;
      }
      if (other.isSetA_fut_image()) {
        this.a_fut_image = other.a_fut_image;
      }
      if (other.isSetA_cat()) {
        this.a_cat = other.a_cat;
      }
      if (other.isSetA_subcat()) {
        this.a_subcat = other.a_subcat;
      }
      if (other.isSetA_hashtags()) {
        this.a_hashtags = other.a_hashtags;
      }
      if (other.isSetA_users()) {
        this.a_users = other.a_users;
      }
      this.a_time_created = other.a_time_created;
      if (other.isSetRelated_articles()) {
        this.related_articles = other.related_articles;
      }
      if (other.isSetRelated_events()) {
        this.related_events = other.related_events;
      }
      if (other.isSetMod_name()) {
        this.mod_name = other.mod_name;
      }
      this.stars = other.stars;
      this.is_edit = other.is_edit;
      this.is_closed = other.is_closed;
    }

    public create_article_args deepCopy() {
      return new create_article_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.a_id = null;
      this.a_title_id = null;
      this.a_title = null;
      this.a_content = null;
      this.a_summary = null;
      this.a_fut_image = null;
      this.a_cat = null;
      this.a_subcat = null;
      this.a_hashtags = null;
      this.a_users = null;
      setA_time_createdIsSet(false);
      this.a_time_created = 0;
      this.related_articles = null;
      this.related_events = null;
      this.mod_name = null;
      setStarsIsSet(false);
      this.stars = 0;
      setIs_editIsSet(false);
      this.is_edit = 0;
      setIs_closedIsSet(false);
      this.is_closed = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public create_article_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getA_id() {
      return this.a_id;
    }

    public create_article_args setA_id(String a_id) {
      this.a_id = a_id;
      return this;
    }

    public void unsetA_id() {
      this.a_id = null;
    }

    /** Returns true if field a_id is set (has been assigned a value) and false otherwise */
    public boolean isSetA_id() {
      return this.a_id != null;
    }

    public void setA_idIsSet(boolean value) {
      if (!value) {
        this.a_id = null;
      }
    }

    public String getA_title_id() {
      return this.a_title_id;
    }

    public create_article_args setA_title_id(String a_title_id) {
      this.a_title_id = a_title_id;
      return this;
    }

    public void unsetA_title_id() {
      this.a_title_id = null;
    }

    /** Returns true if field a_title_id is set (has been assigned a value) and false otherwise */
    public boolean isSetA_title_id() {
      return this.a_title_id != null;
    }

    public void setA_title_idIsSet(boolean value) {
      if (!value) {
        this.a_title_id = null;
      }
    }

    public String getA_title() {
      return this.a_title;
    }

    public create_article_args setA_title(String a_title) {
      this.a_title = a_title;
      return this;
    }

    public void unsetA_title() {
      this.a_title = null;
    }

    /** Returns true if field a_title is set (has been assigned a value) and false otherwise */
    public boolean isSetA_title() {
      return this.a_title != null;
    }

    public void setA_titleIsSet(boolean value) {
      if (!value) {
        this.a_title = null;
      }
    }

    public String getA_content() {
      return this.a_content;
    }

    public create_article_args setA_content(String a_content) {
      this.a_content = a_content;
      return this;
    }

    public void unsetA_content() {
      this.a_content = null;
    }

    /** Returns true if field a_content is set (has been assigned a value) and false otherwise */
    public boolean isSetA_content() {
      return this.a_content != null;
    }

    public void setA_contentIsSet(boolean value) {
      if (!value) {
        this.a_content = null;
      }
    }

    public String getA_summary() {
      return this.a_summary;
    }

    public create_article_args setA_summary(String a_summary) {
      this.a_summary = a_summary;
      return this;
    }

    public void unsetA_summary() {
      this.a_summary = null;
    }

    /** Returns true if field a_summary is set (has been assigned a value) and false otherwise */
    public boolean isSetA_summary() {
      return this.a_summary != null;
    }

    public void setA_summaryIsSet(boolean value) {
      if (!value) {
        this.a_summary = null;
      }
    }

    public String getA_fut_image() {
      return this.a_fut_image;
    }

    public create_article_args setA_fut_image(String a_fut_image) {
      this.a_fut_image = a_fut_image;
      return this;
    }

    public void unsetA_fut_image() {
      this.a_fut_image = null;
    }

    /** Returns true if field a_fut_image is set (has been assigned a value) and false otherwise */
    public boolean isSetA_fut_image() {
      return this.a_fut_image != null;
    }

    public void setA_fut_imageIsSet(boolean value) {
      if (!value) {
        this.a_fut_image = null;
      }
    }

    public String getA_cat() {
      return this.a_cat;
    }

    public create_article_args setA_cat(String a_cat) {
      this.a_cat = a_cat;
      return this;
    }

    public void unsetA_cat() {
      this.a_cat = null;
    }

    /** Returns true if field a_cat is set (has been assigned a value) and false otherwise */
    public boolean isSetA_cat() {
      return this.a_cat != null;
    }

    public void setA_catIsSet(boolean value) {
      if (!value) {
        this.a_cat = null;
      }
    }

    public String getA_subcat() {
      return this.a_subcat;
    }

    public create_article_args setA_subcat(String a_subcat) {
      this.a_subcat = a_subcat;
      return this;
    }

    public void unsetA_subcat() {
      this.a_subcat = null;
    }

    /** Returns true if field a_subcat is set (has been assigned a value) and false otherwise */
    public boolean isSetA_subcat() {
      return this.a_subcat != null;
    }

    public void setA_subcatIsSet(boolean value) {
      if (!value) {
        this.a_subcat = null;
      }
    }

    public String getA_hashtags() {
      return this.a_hashtags;
    }

    public create_article_args setA_hashtags(String a_hashtags) {
      this.a_hashtags = a_hashtags;
      return this;
    }

    public void unsetA_hashtags() {
      this.a_hashtags = null;
    }

    /** Returns true if field a_hashtags is set (has been assigned a value) and false otherwise */
    public boolean isSetA_hashtags() {
      return this.a_hashtags != null;
    }

    public void setA_hashtagsIsSet(boolean value) {
      if (!value) {
        this.a_hashtags = null;
      }
    }

    public String getA_users() {
      return this.a_users;
    }

    public create_article_args setA_users(String a_users) {
      this.a_users = a_users;
      return this;
    }

    public void unsetA_users() {
      this.a_users = null;
    }

    /** Returns true if field a_users is set (has been assigned a value) and false otherwise */
    public boolean isSetA_users() {
      return this.a_users != null;
    }

    public void setA_usersIsSet(boolean value) {
      if (!value) {
        this.a_users = null;
      }
    }

    public int getA_time_created() {
      return this.a_time_created;
    }

    public create_article_args setA_time_created(int a_time_created) {
      this.a_time_created = a_time_created;
      setA_time_createdIsSet(true);
      return this;
    }

    public void unsetA_time_created() {
      __isset_bit_vector.clear(__A_TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field a_time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetA_time_created() {
      return __isset_bit_vector.get(__A_TIME_CREATED_ISSET_ID);
    }

    public void setA_time_createdIsSet(boolean value) {
      __isset_bit_vector.set(__A_TIME_CREATED_ISSET_ID, value);
    }

    public String getRelated_articles() {
      return this.related_articles;
    }

    public create_article_args setRelated_articles(String related_articles) {
      this.related_articles = related_articles;
      return this;
    }

    public void unsetRelated_articles() {
      this.related_articles = null;
    }

    /** Returns true if field related_articles is set (has been assigned a value) and false otherwise */
    public boolean isSetRelated_articles() {
      return this.related_articles != null;
    }

    public void setRelated_articlesIsSet(boolean value) {
      if (!value) {
        this.related_articles = null;
      }
    }

    public String getRelated_events() {
      return this.related_events;
    }

    public create_article_args setRelated_events(String related_events) {
      this.related_events = related_events;
      return this;
    }

    public void unsetRelated_events() {
      this.related_events = null;
    }

    /** Returns true if field related_events is set (has been assigned a value) and false otherwise */
    public boolean isSetRelated_events() {
      return this.related_events != null;
    }

    public void setRelated_eventsIsSet(boolean value) {
      if (!value) {
        this.related_events = null;
      }
    }

    public String getMod_name() {
      return this.mod_name;
    }

    public create_article_args setMod_name(String mod_name) {
      this.mod_name = mod_name;
      return this;
    }

    public void unsetMod_name() {
      this.mod_name = null;
    }

    /** Returns true if field mod_name is set (has been assigned a value) and false otherwise */
    public boolean isSetMod_name() {
      return this.mod_name != null;
    }

    public void setMod_nameIsSet(boolean value) {
      if (!value) {
        this.mod_name = null;
      }
    }

    public int getStars() {
      return this.stars;
    }

    public create_article_args setStars(int stars) {
      this.stars = stars;
      setStarsIsSet(true);
      return this;
    }

    public void unsetStars() {
      __isset_bit_vector.clear(__STARS_ISSET_ID);
    }

    /** Returns true if field stars is set (has been assigned a value) and false otherwise */
    public boolean isSetStars() {
      return __isset_bit_vector.get(__STARS_ISSET_ID);
    }

    public void setStarsIsSet(boolean value) {
      __isset_bit_vector.set(__STARS_ISSET_ID, value);
    }

    public int getIs_edit() {
      return this.is_edit;
    }

    public create_article_args setIs_edit(int is_edit) {
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      return this;
    }

    public void unsetIs_edit() {
      __isset_bit_vector.clear(__IS_EDIT_ISSET_ID);
    }

    /** Returns true if field is_edit is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_edit() {
      return __isset_bit_vector.get(__IS_EDIT_ISSET_ID);
    }

    public void setIs_editIsSet(boolean value) {
      __isset_bit_vector.set(__IS_EDIT_ISSET_ID, value);
    }

    public int getIs_closed() {
      return this.is_closed;
    }

    public create_article_args setIs_closed(int is_closed) {
      this.is_closed = is_closed;
      setIs_closedIsSet(true);
      return this;
    }

    public void unsetIs_closed() {
      __isset_bit_vector.clear(__IS_CLOSED_ISSET_ID);
    }

    /** Returns true if field is_closed is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_closed() {
      return __isset_bit_vector.get(__IS_CLOSED_ISSET_ID);
    }

    public void setIs_closedIsSet(boolean value) {
      __isset_bit_vector.set(__IS_CLOSED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case A_ID:
        if (value == null) {
          unsetA_id();
        } else {
          setA_id((String)value);
        }
        break;

      case A_TITLE_ID:
        if (value == null) {
          unsetA_title_id();
        } else {
          setA_title_id((String)value);
        }
        break;

      case A_TITLE:
        if (value == null) {
          unsetA_title();
        } else {
          setA_title((String)value);
        }
        break;

      case A_CONTENT:
        if (value == null) {
          unsetA_content();
        } else {
          setA_content((String)value);
        }
        break;

      case A_SUMMARY:
        if (value == null) {
          unsetA_summary();
        } else {
          setA_summary((String)value);
        }
        break;

      case A_FUT_IMAGE:
        if (value == null) {
          unsetA_fut_image();
        } else {
          setA_fut_image((String)value);
        }
        break;

      case A_CAT:
        if (value == null) {
          unsetA_cat();
        } else {
          setA_cat((String)value);
        }
        break;

      case A_SUBCAT:
        if (value == null) {
          unsetA_subcat();
        } else {
          setA_subcat((String)value);
        }
        break;

      case A_HASHTAGS:
        if (value == null) {
          unsetA_hashtags();
        } else {
          setA_hashtags((String)value);
        }
        break;

      case A_USERS:
        if (value == null) {
          unsetA_users();
        } else {
          setA_users((String)value);
        }
        break;

      case A_TIME_CREATED:
        if (value == null) {
          unsetA_time_created();
        } else {
          setA_time_created((Integer)value);
        }
        break;

      case RELATED_ARTICLES:
        if (value == null) {
          unsetRelated_articles();
        } else {
          setRelated_articles((String)value);
        }
        break;

      case RELATED_EVENTS:
        if (value == null) {
          unsetRelated_events();
        } else {
          setRelated_events((String)value);
        }
        break;

      case MOD_NAME:
        if (value == null) {
          unsetMod_name();
        } else {
          setMod_name((String)value);
        }
        break;

      case STARS:
        if (value == null) {
          unsetStars();
        } else {
          setStars((Integer)value);
        }
        break;

      case IS_EDIT:
        if (value == null) {
          unsetIs_edit();
        } else {
          setIs_edit((Integer)value);
        }
        break;

      case IS_CLOSED:
        if (value == null) {
          unsetIs_closed();
        } else {
          setIs_closed((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case A_ID:
        return getA_id();

      case A_TITLE_ID:
        return getA_title_id();

      case A_TITLE:
        return getA_title();

      case A_CONTENT:
        return getA_content();

      case A_SUMMARY:
        return getA_summary();

      case A_FUT_IMAGE:
        return getA_fut_image();

      case A_CAT:
        return getA_cat();

      case A_SUBCAT:
        return getA_subcat();

      case A_HASHTAGS:
        return getA_hashtags();

      case A_USERS:
        return getA_users();

      case A_TIME_CREATED:
        return Integer.valueOf(getA_time_created());

      case RELATED_ARTICLES:
        return getRelated_articles();

      case RELATED_EVENTS:
        return getRelated_events();

      case MOD_NAME:
        return getMod_name();

      case STARS:
        return Integer.valueOf(getStars());

      case IS_EDIT:
        return Integer.valueOf(getIs_edit());

      case IS_CLOSED:
        return Integer.valueOf(getIs_closed());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case A_ID:
        return isSetA_id();
      case A_TITLE_ID:
        return isSetA_title_id();
      case A_TITLE:
        return isSetA_title();
      case A_CONTENT:
        return isSetA_content();
      case A_SUMMARY:
        return isSetA_summary();
      case A_FUT_IMAGE:
        return isSetA_fut_image();
      case A_CAT:
        return isSetA_cat();
      case A_SUBCAT:
        return isSetA_subcat();
      case A_HASHTAGS:
        return isSetA_hashtags();
      case A_USERS:
        return isSetA_users();
      case A_TIME_CREATED:
        return isSetA_time_created();
      case RELATED_ARTICLES:
        return isSetRelated_articles();
      case RELATED_EVENTS:
        return isSetRelated_events();
      case MOD_NAME:
        return isSetMod_name();
      case STARS:
        return isSetStars();
      case IS_EDIT:
        return isSetIs_edit();
      case IS_CLOSED:
        return isSetIs_closed();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_article_args)
        return this.equals((create_article_args)that);
      return false;
    }

    public boolean equals(create_article_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_a_id = true && this.isSetA_id();
      boolean that_present_a_id = true && that.isSetA_id();
      if (this_present_a_id || that_present_a_id) {
        if (!(this_present_a_id && that_present_a_id))
          return false;
        if (!this.a_id.equals(that.a_id))
          return false;
      }

      boolean this_present_a_title_id = true && this.isSetA_title_id();
      boolean that_present_a_title_id = true && that.isSetA_title_id();
      if (this_present_a_title_id || that_present_a_title_id) {
        if (!(this_present_a_title_id && that_present_a_title_id))
          return false;
        if (!this.a_title_id.equals(that.a_title_id))
          return false;
      }

      boolean this_present_a_title = true && this.isSetA_title();
      boolean that_present_a_title = true && that.isSetA_title();
      if (this_present_a_title || that_present_a_title) {
        if (!(this_present_a_title && that_present_a_title))
          return false;
        if (!this.a_title.equals(that.a_title))
          return false;
      }

      boolean this_present_a_content = true && this.isSetA_content();
      boolean that_present_a_content = true && that.isSetA_content();
      if (this_present_a_content || that_present_a_content) {
        if (!(this_present_a_content && that_present_a_content))
          return false;
        if (!this.a_content.equals(that.a_content))
          return false;
      }

      boolean this_present_a_summary = true && this.isSetA_summary();
      boolean that_present_a_summary = true && that.isSetA_summary();
      if (this_present_a_summary || that_present_a_summary) {
        if (!(this_present_a_summary && that_present_a_summary))
          return false;
        if (!this.a_summary.equals(that.a_summary))
          return false;
      }

      boolean this_present_a_fut_image = true && this.isSetA_fut_image();
      boolean that_present_a_fut_image = true && that.isSetA_fut_image();
      if (this_present_a_fut_image || that_present_a_fut_image) {
        if (!(this_present_a_fut_image && that_present_a_fut_image))
          return false;
        if (!this.a_fut_image.equals(that.a_fut_image))
          return false;
      }

      boolean this_present_a_cat = true && this.isSetA_cat();
      boolean that_present_a_cat = true && that.isSetA_cat();
      if (this_present_a_cat || that_present_a_cat) {
        if (!(this_present_a_cat && that_present_a_cat))
          return false;
        if (!this.a_cat.equals(that.a_cat))
          return false;
      }

      boolean this_present_a_subcat = true && this.isSetA_subcat();
      boolean that_present_a_subcat = true && that.isSetA_subcat();
      if (this_present_a_subcat || that_present_a_subcat) {
        if (!(this_present_a_subcat && that_present_a_subcat))
          return false;
        if (!this.a_subcat.equals(that.a_subcat))
          return false;
      }

      boolean this_present_a_hashtags = true && this.isSetA_hashtags();
      boolean that_present_a_hashtags = true && that.isSetA_hashtags();
      if (this_present_a_hashtags || that_present_a_hashtags) {
        if (!(this_present_a_hashtags && that_present_a_hashtags))
          return false;
        if (!this.a_hashtags.equals(that.a_hashtags))
          return false;
      }

      boolean this_present_a_users = true && this.isSetA_users();
      boolean that_present_a_users = true && that.isSetA_users();
      if (this_present_a_users || that_present_a_users) {
        if (!(this_present_a_users && that_present_a_users))
          return false;
        if (!this.a_users.equals(that.a_users))
          return false;
      }

      boolean this_present_a_time_created = true;
      boolean that_present_a_time_created = true;
      if (this_present_a_time_created || that_present_a_time_created) {
        if (!(this_present_a_time_created && that_present_a_time_created))
          return false;
        if (this.a_time_created != that.a_time_created)
          return false;
      }

      boolean this_present_related_articles = true && this.isSetRelated_articles();
      boolean that_present_related_articles = true && that.isSetRelated_articles();
      if (this_present_related_articles || that_present_related_articles) {
        if (!(this_present_related_articles && that_present_related_articles))
          return false;
        if (!this.related_articles.equals(that.related_articles))
          return false;
      }

      boolean this_present_related_events = true && this.isSetRelated_events();
      boolean that_present_related_events = true && that.isSetRelated_events();
      if (this_present_related_events || that_present_related_events) {
        if (!(this_present_related_events && that_present_related_events))
          return false;
        if (!this.related_events.equals(that.related_events))
          return false;
      }

      boolean this_present_mod_name = true && this.isSetMod_name();
      boolean that_present_mod_name = true && that.isSetMod_name();
      if (this_present_mod_name || that_present_mod_name) {
        if (!(this_present_mod_name && that_present_mod_name))
          return false;
        if (!this.mod_name.equals(that.mod_name))
          return false;
      }

      boolean this_present_stars = true;
      boolean that_present_stars = true;
      if (this_present_stars || that_present_stars) {
        if (!(this_present_stars && that_present_stars))
          return false;
        if (this.stars != that.stars)
          return false;
      }

      boolean this_present_is_edit = true;
      boolean that_present_is_edit = true;
      if (this_present_is_edit || that_present_is_edit) {
        if (!(this_present_is_edit && that_present_is_edit))
          return false;
        if (this.is_edit != that.is_edit)
          return false;
      }

      boolean this_present_is_closed = true;
      boolean that_present_is_closed = true;
      if (this_present_is_closed || that_present_is_closed) {
        if (!(this_present_is_closed && that_present_is_closed))
          return false;
        if (this.is_closed != that.is_closed)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_article_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_article_args typedOther = (create_article_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetA_id()).compareTo(typedOther.isSetA_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_id, typedOther.a_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetA_title_id()).compareTo(typedOther.isSetA_title_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_title_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_title_id, typedOther.a_title_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetA_title()).compareTo(typedOther.isSetA_title());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_title()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_title, typedOther.a_title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetA_content()).compareTo(typedOther.isSetA_content());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_content()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_content, typedOther.a_content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetA_summary()).compareTo(typedOther.isSetA_summary());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_summary()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_summary, typedOther.a_summary);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetA_fut_image()).compareTo(typedOther.isSetA_fut_image());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_fut_image()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_fut_image, typedOther.a_fut_image);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetA_cat()).compareTo(typedOther.isSetA_cat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_cat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_cat, typedOther.a_cat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetA_subcat()).compareTo(typedOther.isSetA_subcat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_subcat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_subcat, typedOther.a_subcat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetA_hashtags()).compareTo(typedOther.isSetA_hashtags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_hashtags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_hashtags, typedOther.a_hashtags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetA_users()).compareTo(typedOther.isSetA_users());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_users()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_users, typedOther.a_users);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetA_time_created()).compareTo(typedOther.isSetA_time_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_time_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_time_created, typedOther.a_time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRelated_articles()).compareTo(typedOther.isSetRelated_articles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelated_articles()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.related_articles, typedOther.related_articles);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRelated_events()).compareTo(typedOther.isSetRelated_events());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelated_events()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.related_events, typedOther.related_events);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMod_name()).compareTo(typedOther.isSetMod_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMod_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mod_name, typedOther.mod_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStars()).compareTo(typedOther.isSetStars());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStars()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stars, typedOther.stars);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_edit()).compareTo(typedOther.isSetIs_edit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_edit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_edit, typedOther.is_edit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_closed()).compareTo(typedOther.isSetIs_closed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_closed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_closed, typedOther.is_closed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_article_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("a_id:");
      if (this.a_id == null) {
        sb.append("null");
      } else {
        sb.append(this.a_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("a_title_id:");
      if (this.a_title_id == null) {
        sb.append("null");
      } else {
        sb.append(this.a_title_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("a_title:");
      if (this.a_title == null) {
        sb.append("null");
      } else {
        sb.append(this.a_title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("a_content:");
      if (this.a_content == null) {
        sb.append("null");
      } else {
        sb.append(this.a_content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("a_summary:");
      if (this.a_summary == null) {
        sb.append("null");
      } else {
        sb.append(this.a_summary);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("a_fut_image:");
      if (this.a_fut_image == null) {
        sb.append("null");
      } else {
        sb.append(this.a_fut_image);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("a_cat:");
      if (this.a_cat == null) {
        sb.append("null");
      } else {
        sb.append(this.a_cat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("a_subcat:");
      if (this.a_subcat == null) {
        sb.append("null");
      } else {
        sb.append(this.a_subcat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("a_hashtags:");
      if (this.a_hashtags == null) {
        sb.append("null");
      } else {
        sb.append(this.a_hashtags);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("a_users:");
      if (this.a_users == null) {
        sb.append("null");
      } else {
        sb.append(this.a_users);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("a_time_created:");
      sb.append(this.a_time_created);
      first = false;
      if (!first) sb.append(", ");
      sb.append("related_articles:");
      if (this.related_articles == null) {
        sb.append("null");
      } else {
        sb.append(this.related_articles);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("related_events:");
      if (this.related_events == null) {
        sb.append("null");
      } else {
        sb.append(this.related_events);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mod_name:");
      if (this.mod_name == null) {
        sb.append("null");
      } else {
        sb.append(this.mod_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stars:");
      sb.append(this.stars);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_edit:");
      sb.append(this.is_edit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_closed:");
      sb.append(this.is_closed);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_article_argsStandardSchemeFactory implements SchemeFactory {
      public create_article_argsStandardScheme getScheme() {
        return new create_article_argsStandardScheme();
      }
    }

    private static class create_article_argsStandardScheme extends StandardScheme<create_article_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_article_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // A_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_id = iprot.readString();
                struct.setA_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // A_TITLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_title_id = iprot.readString();
                struct.setA_title_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // A_TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_title = iprot.readString();
                struct.setA_titleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // A_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_content = iprot.readString();
                struct.setA_contentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // A_SUMMARY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_summary = iprot.readString();
                struct.setA_summaryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // A_FUT_IMAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_fut_image = iprot.readString();
                struct.setA_fut_imageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // A_CAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_cat = iprot.readString();
                struct.setA_catIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // A_SUBCAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_subcat = iprot.readString();
                struct.setA_subcatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // A_HASHTAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_hashtags = iprot.readString();
                struct.setA_hashtagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // A_USERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_users = iprot.readString();
                struct.setA_usersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // A_TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.a_time_created = iprot.readI32();
                struct.setA_time_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // RELATED_ARTICLES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.related_articles = iprot.readString();
                struct.setRelated_articlesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // RELATED_EVENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.related_events = iprot.readString();
                struct.setRelated_eventsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // MOD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mod_name = iprot.readString();
                struct.setMod_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 16: // STARS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stars = iprot.readI32();
                struct.setStarsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 17: // IS_EDIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_edit = iprot.readI32();
                struct.setIs_editIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 18: // IS_CLOSED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_closed = iprot.readI32();
                struct.setIs_closedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_article_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.a_id != null) {
          oprot.writeFieldBegin(A_ID_FIELD_DESC);
          oprot.writeString(struct.a_id);
          oprot.writeFieldEnd();
        }
        if (struct.a_title_id != null) {
          oprot.writeFieldBegin(A_TITLE_ID_FIELD_DESC);
          oprot.writeString(struct.a_title_id);
          oprot.writeFieldEnd();
        }
        if (struct.a_title != null) {
          oprot.writeFieldBegin(A_TITLE_FIELD_DESC);
          oprot.writeString(struct.a_title);
          oprot.writeFieldEnd();
        }
        if (struct.a_content != null) {
          oprot.writeFieldBegin(A_CONTENT_FIELD_DESC);
          oprot.writeString(struct.a_content);
          oprot.writeFieldEnd();
        }
        if (struct.a_summary != null) {
          oprot.writeFieldBegin(A_SUMMARY_FIELD_DESC);
          oprot.writeString(struct.a_summary);
          oprot.writeFieldEnd();
        }
        if (struct.a_fut_image != null) {
          oprot.writeFieldBegin(A_FUT_IMAGE_FIELD_DESC);
          oprot.writeString(struct.a_fut_image);
          oprot.writeFieldEnd();
        }
        if (struct.a_cat != null) {
          oprot.writeFieldBegin(A_CAT_FIELD_DESC);
          oprot.writeString(struct.a_cat);
          oprot.writeFieldEnd();
        }
        if (struct.a_subcat != null) {
          oprot.writeFieldBegin(A_SUBCAT_FIELD_DESC);
          oprot.writeString(struct.a_subcat);
          oprot.writeFieldEnd();
        }
        if (struct.a_hashtags != null) {
          oprot.writeFieldBegin(A_HASHTAGS_FIELD_DESC);
          oprot.writeString(struct.a_hashtags);
          oprot.writeFieldEnd();
        }
        if (struct.a_users != null) {
          oprot.writeFieldBegin(A_USERS_FIELD_DESC);
          oprot.writeString(struct.a_users);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(A_TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.a_time_created);
        oprot.writeFieldEnd();
        if (struct.related_articles != null) {
          oprot.writeFieldBegin(RELATED_ARTICLES_FIELD_DESC);
          oprot.writeString(struct.related_articles);
          oprot.writeFieldEnd();
        }
        if (struct.related_events != null) {
          oprot.writeFieldBegin(RELATED_EVENTS_FIELD_DESC);
          oprot.writeString(struct.related_events);
          oprot.writeFieldEnd();
        }
        if (struct.mod_name != null) {
          oprot.writeFieldBegin(MOD_NAME_FIELD_DESC);
          oprot.writeString(struct.mod_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STARS_FIELD_DESC);
        oprot.writeI32(struct.stars);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_EDIT_FIELD_DESC);
        oprot.writeI32(struct.is_edit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_CLOSED_FIELD_DESC);
        oprot.writeI32(struct.is_closed);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_article_argsTupleSchemeFactory implements SchemeFactory {
      public create_article_argsTupleScheme getScheme() {
        return new create_article_argsTupleScheme();
      }
    }

    private static class create_article_argsTupleScheme extends TupleScheme<create_article_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_article_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetA_id()) {
          optionals.set(1);
        }
        if (struct.isSetA_title_id()) {
          optionals.set(2);
        }
        if (struct.isSetA_title()) {
          optionals.set(3);
        }
        if (struct.isSetA_content()) {
          optionals.set(4);
        }
        if (struct.isSetA_summary()) {
          optionals.set(5);
        }
        if (struct.isSetA_fut_image()) {
          optionals.set(6);
        }
        if (struct.isSetA_cat()) {
          optionals.set(7);
        }
        if (struct.isSetA_subcat()) {
          optionals.set(8);
        }
        if (struct.isSetA_hashtags()) {
          optionals.set(9);
        }
        if (struct.isSetA_users()) {
          optionals.set(10);
        }
        if (struct.isSetA_time_created()) {
          optionals.set(11);
        }
        if (struct.isSetRelated_articles()) {
          optionals.set(12);
        }
        if (struct.isSetRelated_events()) {
          optionals.set(13);
        }
        if (struct.isSetMod_name()) {
          optionals.set(14);
        }
        if (struct.isSetStars()) {
          optionals.set(15);
        }
        if (struct.isSetIs_edit()) {
          optionals.set(16);
        }
        if (struct.isSetIs_closed()) {
          optionals.set(17);
        }
        oprot.writeBitSet(optionals, 18);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetA_id()) {
          oprot.writeString(struct.a_id);
        }
        if (struct.isSetA_title_id()) {
          oprot.writeString(struct.a_title_id);
        }
        if (struct.isSetA_title()) {
          oprot.writeString(struct.a_title);
        }
        if (struct.isSetA_content()) {
          oprot.writeString(struct.a_content);
        }
        if (struct.isSetA_summary()) {
          oprot.writeString(struct.a_summary);
        }
        if (struct.isSetA_fut_image()) {
          oprot.writeString(struct.a_fut_image);
        }
        if (struct.isSetA_cat()) {
          oprot.writeString(struct.a_cat);
        }
        if (struct.isSetA_subcat()) {
          oprot.writeString(struct.a_subcat);
        }
        if (struct.isSetA_hashtags()) {
          oprot.writeString(struct.a_hashtags);
        }
        if (struct.isSetA_users()) {
          oprot.writeString(struct.a_users);
        }
        if (struct.isSetA_time_created()) {
          oprot.writeI32(struct.a_time_created);
        }
        if (struct.isSetRelated_articles()) {
          oprot.writeString(struct.related_articles);
        }
        if (struct.isSetRelated_events()) {
          oprot.writeString(struct.related_events);
        }
        if (struct.isSetMod_name()) {
          oprot.writeString(struct.mod_name);
        }
        if (struct.isSetStars()) {
          oprot.writeI32(struct.stars);
        }
        if (struct.isSetIs_edit()) {
          oprot.writeI32(struct.is_edit);
        }
        if (struct.isSetIs_closed()) {
          oprot.writeI32(struct.is_closed);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_article_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(18);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.a_id = iprot.readString();
          struct.setA_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.a_title_id = iprot.readString();
          struct.setA_title_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.a_title = iprot.readString();
          struct.setA_titleIsSet(true);
        }
        if (incoming.get(4)) {
          struct.a_content = iprot.readString();
          struct.setA_contentIsSet(true);
        }
        if (incoming.get(5)) {
          struct.a_summary = iprot.readString();
          struct.setA_summaryIsSet(true);
        }
        if (incoming.get(6)) {
          struct.a_fut_image = iprot.readString();
          struct.setA_fut_imageIsSet(true);
        }
        if (incoming.get(7)) {
          struct.a_cat = iprot.readString();
          struct.setA_catIsSet(true);
        }
        if (incoming.get(8)) {
          struct.a_subcat = iprot.readString();
          struct.setA_subcatIsSet(true);
        }
        if (incoming.get(9)) {
          struct.a_hashtags = iprot.readString();
          struct.setA_hashtagsIsSet(true);
        }
        if (incoming.get(10)) {
          struct.a_users = iprot.readString();
          struct.setA_usersIsSet(true);
        }
        if (incoming.get(11)) {
          struct.a_time_created = iprot.readI32();
          struct.setA_time_createdIsSet(true);
        }
        if (incoming.get(12)) {
          struct.related_articles = iprot.readString();
          struct.setRelated_articlesIsSet(true);
        }
        if (incoming.get(13)) {
          struct.related_events = iprot.readString();
          struct.setRelated_eventsIsSet(true);
        }
        if (incoming.get(14)) {
          struct.mod_name = iprot.readString();
          struct.setMod_nameIsSet(true);
        }
        if (incoming.get(15)) {
          struct.stars = iprot.readI32();
          struct.setStarsIsSet(true);
        }
        if (incoming.get(16)) {
          struct.is_edit = iprot.readI32();
          struct.setIs_editIsSet(true);
        }
        if (incoming.get(17)) {
          struct.is_closed = iprot.readI32();
          struct.setIs_closedIsSet(true);
        }
      }
    }

  }

  public static class create_article_result implements org.apache.thrift.TBase<create_article_result, create_article_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_article_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_article_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_article_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_article_result.class, metaDataMap);
    }

    public create_article_result() {
    }

    public create_article_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_article_result(create_article_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public create_article_result deepCopy() {
      return new create_article_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public create_article_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_article_result)
        return this.equals((create_article_result)that);
      return false;
    }

    public boolean equals(create_article_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_article_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_article_result typedOther = (create_article_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_article_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_article_resultStandardSchemeFactory implements SchemeFactory {
      public create_article_resultStandardScheme getScheme() {
        return new create_article_resultStandardScheme();
      }
    }

    private static class create_article_resultStandardScheme extends StandardScheme<create_article_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_article_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_article_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_article_resultTupleSchemeFactory implements SchemeFactory {
      public create_article_resultTupleScheme getScheme() {
        return new create_article_resultTupleScheme();
      }
    }

    private static class create_article_resultTupleScheme extends TupleScheme<create_article_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_article_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_article_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_cfpost_args implements org.apache.thrift.TBase<create_cfpost_args, create_cfpost_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_cfpost_args");

    private static final org.apache.thrift.protocol.TField CF_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_user", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CF_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_title", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CF_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_url", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CF_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_content", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField CF_FUT_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_fut_image", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField CF_HASHTAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_hashtags", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField CF_TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_time_created", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField CF_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_end_date", org.apache.thrift.protocol.TType.I32, (short)9);
    private static final org.apache.thrift.protocol.TField CF_AMT_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_amt_target", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField CF_AMT_RAISED_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_amt_raised", org.apache.thrift.protocol.TType.I32, (short)11);
    private static final org.apache.thrift.protocol.TField CF_PPL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cf_ppl_count", org.apache.thrift.protocol.TType.I32, (short)12);
    private static final org.apache.thrift.protocol.TField IS_EDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_edit", org.apache.thrift.protocol.TType.I32, (short)13);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_cfpost_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_cfpost_argsTupleSchemeFactory());
    }

    public String cf_user; // required
    public String cf_id; // required
    public String cf_title; // required
    public String cf_url; // required
    public String cf_content; // required
    public String cf_fut_image; // required
    public String cf_hashtags; // required
    public int cf_time_created; // required
    public int cf_end_date; // required
    public int cf_amt_target; // required
    public int cf_amt_raised; // required
    public int cf_ppl_count; // required
    public int is_edit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CF_USER((short)1, "cf_user"),
      CF_ID((short)2, "cf_id"),
      CF_TITLE((short)3, "cf_title"),
      CF_URL((short)4, "cf_url"),
      CF_CONTENT((short)5, "cf_content"),
      CF_FUT_IMAGE((short)6, "cf_fut_image"),
      CF_HASHTAGS((short)7, "cf_hashtags"),
      CF_TIME_CREATED((short)8, "cf_time_created"),
      CF_END_DATE((short)9, "cf_end_date"),
      CF_AMT_TARGET((short)10, "cf_amt_target"),
      CF_AMT_RAISED((short)11, "cf_amt_raised"),
      CF_PPL_COUNT((short)12, "cf_ppl_count"),
      IS_EDIT((short)13, "is_edit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CF_USER
            return CF_USER;
          case 2: // CF_ID
            return CF_ID;
          case 3: // CF_TITLE
            return CF_TITLE;
          case 4: // CF_URL
            return CF_URL;
          case 5: // CF_CONTENT
            return CF_CONTENT;
          case 6: // CF_FUT_IMAGE
            return CF_FUT_IMAGE;
          case 7: // CF_HASHTAGS
            return CF_HASHTAGS;
          case 8: // CF_TIME_CREATED
            return CF_TIME_CREATED;
          case 9: // CF_END_DATE
            return CF_END_DATE;
          case 10: // CF_AMT_TARGET
            return CF_AMT_TARGET;
          case 11: // CF_AMT_RAISED
            return CF_AMT_RAISED;
          case 12: // CF_PPL_COUNT
            return CF_PPL_COUNT;
          case 13: // IS_EDIT
            return IS_EDIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CF_TIME_CREATED_ISSET_ID = 0;
    private static final int __CF_END_DATE_ISSET_ID = 1;
    private static final int __CF_AMT_TARGET_ISSET_ID = 2;
    private static final int __CF_AMT_RAISED_ISSET_ID = 3;
    private static final int __CF_PPL_COUNT_ISSET_ID = 4;
    private static final int __IS_EDIT_ISSET_ID = 5;
    private BitSet __isset_bit_vector = new BitSet(6);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CF_USER, new org.apache.thrift.meta_data.FieldMetaData("cf_user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CF_ID, new org.apache.thrift.meta_data.FieldMetaData("cf_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CF_TITLE, new org.apache.thrift.meta_data.FieldMetaData("cf_title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CF_URL, new org.apache.thrift.meta_data.FieldMetaData("cf_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CF_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("cf_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CF_FUT_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("cf_fut_image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CF_HASHTAGS, new org.apache.thrift.meta_data.FieldMetaData("cf_hashtags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CF_TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("cf_time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CF_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("cf_end_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CF_AMT_TARGET, new org.apache.thrift.meta_data.FieldMetaData("cf_amt_target", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CF_AMT_RAISED, new org.apache.thrift.meta_data.FieldMetaData("cf_amt_raised", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CF_PPL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("cf_ppl_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_EDIT, new org.apache.thrift.meta_data.FieldMetaData("is_edit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_cfpost_args.class, metaDataMap);
    }

    public create_cfpost_args() {
    }

    public create_cfpost_args(
      String cf_user,
      String cf_id,
      String cf_title,
      String cf_url,
      String cf_content,
      String cf_fut_image,
      String cf_hashtags,
      int cf_time_created,
      int cf_end_date,
      int cf_amt_target,
      int cf_amt_raised,
      int cf_ppl_count,
      int is_edit)
    {
      this();
      this.cf_user = cf_user;
      this.cf_id = cf_id;
      this.cf_title = cf_title;
      this.cf_url = cf_url;
      this.cf_content = cf_content;
      this.cf_fut_image = cf_fut_image;
      this.cf_hashtags = cf_hashtags;
      this.cf_time_created = cf_time_created;
      setCf_time_createdIsSet(true);
      this.cf_end_date = cf_end_date;
      setCf_end_dateIsSet(true);
      this.cf_amt_target = cf_amt_target;
      setCf_amt_targetIsSet(true);
      this.cf_amt_raised = cf_amt_raised;
      setCf_amt_raisedIsSet(true);
      this.cf_ppl_count = cf_ppl_count;
      setCf_ppl_countIsSet(true);
      this.is_edit = is_edit;
      setIs_editIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_cfpost_args(create_cfpost_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetCf_user()) {
        this.cf_user = other.cf_user;
      }
      if (other.isSetCf_id()) {
        this.cf_id = other.cf_id;
      }
      if (other.isSetCf_title()) {
        this.cf_title = other.cf_title;
      }
      if (other.isSetCf_url()) {
        this.cf_url = other.cf_url;
      }
      if (other.isSetCf_content()) {
        this.cf_content = other.cf_content;
      }
      if (other.isSetCf_fut_image()) {
        this.cf_fut_image = other.cf_fut_image;
      }
      if (other.isSetCf_hashtags()) {
        this.cf_hashtags = other.cf_hashtags;
      }
      this.cf_time_created = other.cf_time_created;
      this.cf_end_date = other.cf_end_date;
      this.cf_amt_target = other.cf_amt_target;
      this.cf_amt_raised = other.cf_amt_raised;
      this.cf_ppl_count = other.cf_ppl_count;
      this.is_edit = other.is_edit;
    }

    public create_cfpost_args deepCopy() {
      return new create_cfpost_args(this);
    }

    @Override
    public void clear() {
      this.cf_user = null;
      this.cf_id = null;
      this.cf_title = null;
      this.cf_url = null;
      this.cf_content = null;
      this.cf_fut_image = null;
      this.cf_hashtags = null;
      setCf_time_createdIsSet(false);
      this.cf_time_created = 0;
      setCf_end_dateIsSet(false);
      this.cf_end_date = 0;
      setCf_amt_targetIsSet(false);
      this.cf_amt_target = 0;
      setCf_amt_raisedIsSet(false);
      this.cf_amt_raised = 0;
      setCf_ppl_countIsSet(false);
      this.cf_ppl_count = 0;
      setIs_editIsSet(false);
      this.is_edit = 0;
    }

    public String getCf_user() {
      return this.cf_user;
    }

    public create_cfpost_args setCf_user(String cf_user) {
      this.cf_user = cf_user;
      return this;
    }

    public void unsetCf_user() {
      this.cf_user = null;
    }

    /** Returns true if field cf_user is set (has been assigned a value) and false otherwise */
    public boolean isSetCf_user() {
      return this.cf_user != null;
    }

    public void setCf_userIsSet(boolean value) {
      if (!value) {
        this.cf_user = null;
      }
    }

    public String getCf_id() {
      return this.cf_id;
    }

    public create_cfpost_args setCf_id(String cf_id) {
      this.cf_id = cf_id;
      return this;
    }

    public void unsetCf_id() {
      this.cf_id = null;
    }

    /** Returns true if field cf_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCf_id() {
      return this.cf_id != null;
    }

    public void setCf_idIsSet(boolean value) {
      if (!value) {
        this.cf_id = null;
      }
    }

    public String getCf_title() {
      return this.cf_title;
    }

    public create_cfpost_args setCf_title(String cf_title) {
      this.cf_title = cf_title;
      return this;
    }

    public void unsetCf_title() {
      this.cf_title = null;
    }

    /** Returns true if field cf_title is set (has been assigned a value) and false otherwise */
    public boolean isSetCf_title() {
      return this.cf_title != null;
    }

    public void setCf_titleIsSet(boolean value) {
      if (!value) {
        this.cf_title = null;
      }
    }

    public String getCf_url() {
      return this.cf_url;
    }

    public create_cfpost_args setCf_url(String cf_url) {
      this.cf_url = cf_url;
      return this;
    }

    public void unsetCf_url() {
      this.cf_url = null;
    }

    /** Returns true if field cf_url is set (has been assigned a value) and false otherwise */
    public boolean isSetCf_url() {
      return this.cf_url != null;
    }

    public void setCf_urlIsSet(boolean value) {
      if (!value) {
        this.cf_url = null;
      }
    }

    public String getCf_content() {
      return this.cf_content;
    }

    public create_cfpost_args setCf_content(String cf_content) {
      this.cf_content = cf_content;
      return this;
    }

    public void unsetCf_content() {
      this.cf_content = null;
    }

    /** Returns true if field cf_content is set (has been assigned a value) and false otherwise */
    public boolean isSetCf_content() {
      return this.cf_content != null;
    }

    public void setCf_contentIsSet(boolean value) {
      if (!value) {
        this.cf_content = null;
      }
    }

    public String getCf_fut_image() {
      return this.cf_fut_image;
    }

    public create_cfpost_args setCf_fut_image(String cf_fut_image) {
      this.cf_fut_image = cf_fut_image;
      return this;
    }

    public void unsetCf_fut_image() {
      this.cf_fut_image = null;
    }

    /** Returns true if field cf_fut_image is set (has been assigned a value) and false otherwise */
    public boolean isSetCf_fut_image() {
      return this.cf_fut_image != null;
    }

    public void setCf_fut_imageIsSet(boolean value) {
      if (!value) {
        this.cf_fut_image = null;
      }
    }

    public String getCf_hashtags() {
      return this.cf_hashtags;
    }

    public create_cfpost_args setCf_hashtags(String cf_hashtags) {
      this.cf_hashtags = cf_hashtags;
      return this;
    }

    public void unsetCf_hashtags() {
      this.cf_hashtags = null;
    }

    /** Returns true if field cf_hashtags is set (has been assigned a value) and false otherwise */
    public boolean isSetCf_hashtags() {
      return this.cf_hashtags != null;
    }

    public void setCf_hashtagsIsSet(boolean value) {
      if (!value) {
        this.cf_hashtags = null;
      }
    }

    public int getCf_time_created() {
      return this.cf_time_created;
    }

    public create_cfpost_args setCf_time_created(int cf_time_created) {
      this.cf_time_created = cf_time_created;
      setCf_time_createdIsSet(true);
      return this;
    }

    public void unsetCf_time_created() {
      __isset_bit_vector.clear(__CF_TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field cf_time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetCf_time_created() {
      return __isset_bit_vector.get(__CF_TIME_CREATED_ISSET_ID);
    }

    public void setCf_time_createdIsSet(boolean value) {
      __isset_bit_vector.set(__CF_TIME_CREATED_ISSET_ID, value);
    }

    public int getCf_end_date() {
      return this.cf_end_date;
    }

    public create_cfpost_args setCf_end_date(int cf_end_date) {
      this.cf_end_date = cf_end_date;
      setCf_end_dateIsSet(true);
      return this;
    }

    public void unsetCf_end_date() {
      __isset_bit_vector.clear(__CF_END_DATE_ISSET_ID);
    }

    /** Returns true if field cf_end_date is set (has been assigned a value) and false otherwise */
    public boolean isSetCf_end_date() {
      return __isset_bit_vector.get(__CF_END_DATE_ISSET_ID);
    }

    public void setCf_end_dateIsSet(boolean value) {
      __isset_bit_vector.set(__CF_END_DATE_ISSET_ID, value);
    }

    public int getCf_amt_target() {
      return this.cf_amt_target;
    }

    public create_cfpost_args setCf_amt_target(int cf_amt_target) {
      this.cf_amt_target = cf_amt_target;
      setCf_amt_targetIsSet(true);
      return this;
    }

    public void unsetCf_amt_target() {
      __isset_bit_vector.clear(__CF_AMT_TARGET_ISSET_ID);
    }

    /** Returns true if field cf_amt_target is set (has been assigned a value) and false otherwise */
    public boolean isSetCf_amt_target() {
      return __isset_bit_vector.get(__CF_AMT_TARGET_ISSET_ID);
    }

    public void setCf_amt_targetIsSet(boolean value) {
      __isset_bit_vector.set(__CF_AMT_TARGET_ISSET_ID, value);
    }

    public int getCf_amt_raised() {
      return this.cf_amt_raised;
    }

    public create_cfpost_args setCf_amt_raised(int cf_amt_raised) {
      this.cf_amt_raised = cf_amt_raised;
      setCf_amt_raisedIsSet(true);
      return this;
    }

    public void unsetCf_amt_raised() {
      __isset_bit_vector.clear(__CF_AMT_RAISED_ISSET_ID);
    }

    /** Returns true if field cf_amt_raised is set (has been assigned a value) and false otherwise */
    public boolean isSetCf_amt_raised() {
      return __isset_bit_vector.get(__CF_AMT_RAISED_ISSET_ID);
    }

    public void setCf_amt_raisedIsSet(boolean value) {
      __isset_bit_vector.set(__CF_AMT_RAISED_ISSET_ID, value);
    }

    public int getCf_ppl_count() {
      return this.cf_ppl_count;
    }

    public create_cfpost_args setCf_ppl_count(int cf_ppl_count) {
      this.cf_ppl_count = cf_ppl_count;
      setCf_ppl_countIsSet(true);
      return this;
    }

    public void unsetCf_ppl_count() {
      __isset_bit_vector.clear(__CF_PPL_COUNT_ISSET_ID);
    }

    /** Returns true if field cf_ppl_count is set (has been assigned a value) and false otherwise */
    public boolean isSetCf_ppl_count() {
      return __isset_bit_vector.get(__CF_PPL_COUNT_ISSET_ID);
    }

    public void setCf_ppl_countIsSet(boolean value) {
      __isset_bit_vector.set(__CF_PPL_COUNT_ISSET_ID, value);
    }

    public int getIs_edit() {
      return this.is_edit;
    }

    public create_cfpost_args setIs_edit(int is_edit) {
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      return this;
    }

    public void unsetIs_edit() {
      __isset_bit_vector.clear(__IS_EDIT_ISSET_ID);
    }

    /** Returns true if field is_edit is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_edit() {
      return __isset_bit_vector.get(__IS_EDIT_ISSET_ID);
    }

    public void setIs_editIsSet(boolean value) {
      __isset_bit_vector.set(__IS_EDIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CF_USER:
        if (value == null) {
          unsetCf_user();
        } else {
          setCf_user((String)value);
        }
        break;

      case CF_ID:
        if (value == null) {
          unsetCf_id();
        } else {
          setCf_id((String)value);
        }
        break;

      case CF_TITLE:
        if (value == null) {
          unsetCf_title();
        } else {
          setCf_title((String)value);
        }
        break;

      case CF_URL:
        if (value == null) {
          unsetCf_url();
        } else {
          setCf_url((String)value);
        }
        break;

      case CF_CONTENT:
        if (value == null) {
          unsetCf_content();
        } else {
          setCf_content((String)value);
        }
        break;

      case CF_FUT_IMAGE:
        if (value == null) {
          unsetCf_fut_image();
        } else {
          setCf_fut_image((String)value);
        }
        break;

      case CF_HASHTAGS:
        if (value == null) {
          unsetCf_hashtags();
        } else {
          setCf_hashtags((String)value);
        }
        break;

      case CF_TIME_CREATED:
        if (value == null) {
          unsetCf_time_created();
        } else {
          setCf_time_created((Integer)value);
        }
        break;

      case CF_END_DATE:
        if (value == null) {
          unsetCf_end_date();
        } else {
          setCf_end_date((Integer)value);
        }
        break;

      case CF_AMT_TARGET:
        if (value == null) {
          unsetCf_amt_target();
        } else {
          setCf_amt_target((Integer)value);
        }
        break;

      case CF_AMT_RAISED:
        if (value == null) {
          unsetCf_amt_raised();
        } else {
          setCf_amt_raised((Integer)value);
        }
        break;

      case CF_PPL_COUNT:
        if (value == null) {
          unsetCf_ppl_count();
        } else {
          setCf_ppl_count((Integer)value);
        }
        break;

      case IS_EDIT:
        if (value == null) {
          unsetIs_edit();
        } else {
          setIs_edit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CF_USER:
        return getCf_user();

      case CF_ID:
        return getCf_id();

      case CF_TITLE:
        return getCf_title();

      case CF_URL:
        return getCf_url();

      case CF_CONTENT:
        return getCf_content();

      case CF_FUT_IMAGE:
        return getCf_fut_image();

      case CF_HASHTAGS:
        return getCf_hashtags();

      case CF_TIME_CREATED:
        return Integer.valueOf(getCf_time_created());

      case CF_END_DATE:
        return Integer.valueOf(getCf_end_date());

      case CF_AMT_TARGET:
        return Integer.valueOf(getCf_amt_target());

      case CF_AMT_RAISED:
        return Integer.valueOf(getCf_amt_raised());

      case CF_PPL_COUNT:
        return Integer.valueOf(getCf_ppl_count());

      case IS_EDIT:
        return Integer.valueOf(getIs_edit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CF_USER:
        return isSetCf_user();
      case CF_ID:
        return isSetCf_id();
      case CF_TITLE:
        return isSetCf_title();
      case CF_URL:
        return isSetCf_url();
      case CF_CONTENT:
        return isSetCf_content();
      case CF_FUT_IMAGE:
        return isSetCf_fut_image();
      case CF_HASHTAGS:
        return isSetCf_hashtags();
      case CF_TIME_CREATED:
        return isSetCf_time_created();
      case CF_END_DATE:
        return isSetCf_end_date();
      case CF_AMT_TARGET:
        return isSetCf_amt_target();
      case CF_AMT_RAISED:
        return isSetCf_amt_raised();
      case CF_PPL_COUNT:
        return isSetCf_ppl_count();
      case IS_EDIT:
        return isSetIs_edit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_cfpost_args)
        return this.equals((create_cfpost_args)that);
      return false;
    }

    public boolean equals(create_cfpost_args that) {
      if (that == null)
        return false;

      boolean this_present_cf_user = true && this.isSetCf_user();
      boolean that_present_cf_user = true && that.isSetCf_user();
      if (this_present_cf_user || that_present_cf_user) {
        if (!(this_present_cf_user && that_present_cf_user))
          return false;
        if (!this.cf_user.equals(that.cf_user))
          return false;
      }

      boolean this_present_cf_id = true && this.isSetCf_id();
      boolean that_present_cf_id = true && that.isSetCf_id();
      if (this_present_cf_id || that_present_cf_id) {
        if (!(this_present_cf_id && that_present_cf_id))
          return false;
        if (!this.cf_id.equals(that.cf_id))
          return false;
      }

      boolean this_present_cf_title = true && this.isSetCf_title();
      boolean that_present_cf_title = true && that.isSetCf_title();
      if (this_present_cf_title || that_present_cf_title) {
        if (!(this_present_cf_title && that_present_cf_title))
          return false;
        if (!this.cf_title.equals(that.cf_title))
          return false;
      }

      boolean this_present_cf_url = true && this.isSetCf_url();
      boolean that_present_cf_url = true && that.isSetCf_url();
      if (this_present_cf_url || that_present_cf_url) {
        if (!(this_present_cf_url && that_present_cf_url))
          return false;
        if (!this.cf_url.equals(that.cf_url))
          return false;
      }

      boolean this_present_cf_content = true && this.isSetCf_content();
      boolean that_present_cf_content = true && that.isSetCf_content();
      if (this_present_cf_content || that_present_cf_content) {
        if (!(this_present_cf_content && that_present_cf_content))
          return false;
        if (!this.cf_content.equals(that.cf_content))
          return false;
      }

      boolean this_present_cf_fut_image = true && this.isSetCf_fut_image();
      boolean that_present_cf_fut_image = true && that.isSetCf_fut_image();
      if (this_present_cf_fut_image || that_present_cf_fut_image) {
        if (!(this_present_cf_fut_image && that_present_cf_fut_image))
          return false;
        if (!this.cf_fut_image.equals(that.cf_fut_image))
          return false;
      }

      boolean this_present_cf_hashtags = true && this.isSetCf_hashtags();
      boolean that_present_cf_hashtags = true && that.isSetCf_hashtags();
      if (this_present_cf_hashtags || that_present_cf_hashtags) {
        if (!(this_present_cf_hashtags && that_present_cf_hashtags))
          return false;
        if (!this.cf_hashtags.equals(that.cf_hashtags))
          return false;
      }

      boolean this_present_cf_time_created = true;
      boolean that_present_cf_time_created = true;
      if (this_present_cf_time_created || that_present_cf_time_created) {
        if (!(this_present_cf_time_created && that_present_cf_time_created))
          return false;
        if (this.cf_time_created != that.cf_time_created)
          return false;
      }

      boolean this_present_cf_end_date = true;
      boolean that_present_cf_end_date = true;
      if (this_present_cf_end_date || that_present_cf_end_date) {
        if (!(this_present_cf_end_date && that_present_cf_end_date))
          return false;
        if (this.cf_end_date != that.cf_end_date)
          return false;
      }

      boolean this_present_cf_amt_target = true;
      boolean that_present_cf_amt_target = true;
      if (this_present_cf_amt_target || that_present_cf_amt_target) {
        if (!(this_present_cf_amt_target && that_present_cf_amt_target))
          return false;
        if (this.cf_amt_target != that.cf_amt_target)
          return false;
      }

      boolean this_present_cf_amt_raised = true;
      boolean that_present_cf_amt_raised = true;
      if (this_present_cf_amt_raised || that_present_cf_amt_raised) {
        if (!(this_present_cf_amt_raised && that_present_cf_amt_raised))
          return false;
        if (this.cf_amt_raised != that.cf_amt_raised)
          return false;
      }

      boolean this_present_cf_ppl_count = true;
      boolean that_present_cf_ppl_count = true;
      if (this_present_cf_ppl_count || that_present_cf_ppl_count) {
        if (!(this_present_cf_ppl_count && that_present_cf_ppl_count))
          return false;
        if (this.cf_ppl_count != that.cf_ppl_count)
          return false;
      }

      boolean this_present_is_edit = true;
      boolean that_present_is_edit = true;
      if (this_present_is_edit || that_present_is_edit) {
        if (!(this_present_is_edit && that_present_is_edit))
          return false;
        if (this.is_edit != that.is_edit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_cfpost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_cfpost_args typedOther = (create_cfpost_args)other;

      lastComparison = Boolean.valueOf(isSetCf_user()).compareTo(typedOther.isSetCf_user());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCf_user()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_user, typedOther.cf_user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCf_id()).compareTo(typedOther.isSetCf_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCf_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_id, typedOther.cf_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCf_title()).compareTo(typedOther.isSetCf_title());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCf_title()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_title, typedOther.cf_title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCf_url()).compareTo(typedOther.isSetCf_url());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCf_url()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_url, typedOther.cf_url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCf_content()).compareTo(typedOther.isSetCf_content());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCf_content()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_content, typedOther.cf_content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCf_fut_image()).compareTo(typedOther.isSetCf_fut_image());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCf_fut_image()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_fut_image, typedOther.cf_fut_image);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCf_hashtags()).compareTo(typedOther.isSetCf_hashtags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCf_hashtags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_hashtags, typedOther.cf_hashtags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCf_time_created()).compareTo(typedOther.isSetCf_time_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCf_time_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_time_created, typedOther.cf_time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCf_end_date()).compareTo(typedOther.isSetCf_end_date());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCf_end_date()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_end_date, typedOther.cf_end_date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCf_amt_target()).compareTo(typedOther.isSetCf_amt_target());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCf_amt_target()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_amt_target, typedOther.cf_amt_target);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCf_amt_raised()).compareTo(typedOther.isSetCf_amt_raised());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCf_amt_raised()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_amt_raised, typedOther.cf_amt_raised);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCf_ppl_count()).compareTo(typedOther.isSetCf_ppl_count());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCf_ppl_count()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf_ppl_count, typedOther.cf_ppl_count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_edit()).compareTo(typedOther.isSetIs_edit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_edit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_edit, typedOther.is_edit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_cfpost_args(");
      boolean first = true;

      sb.append("cf_user:");
      if (this.cf_user == null) {
        sb.append("null");
      } else {
        sb.append(this.cf_user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cf_id:");
      if (this.cf_id == null) {
        sb.append("null");
      } else {
        sb.append(this.cf_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cf_title:");
      if (this.cf_title == null) {
        sb.append("null");
      } else {
        sb.append(this.cf_title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cf_url:");
      if (this.cf_url == null) {
        sb.append("null");
      } else {
        sb.append(this.cf_url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cf_content:");
      if (this.cf_content == null) {
        sb.append("null");
      } else {
        sb.append(this.cf_content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cf_fut_image:");
      if (this.cf_fut_image == null) {
        sb.append("null");
      } else {
        sb.append(this.cf_fut_image);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cf_hashtags:");
      if (this.cf_hashtags == null) {
        sb.append("null");
      } else {
        sb.append(this.cf_hashtags);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cf_time_created:");
      sb.append(this.cf_time_created);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cf_end_date:");
      sb.append(this.cf_end_date);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cf_amt_target:");
      sb.append(this.cf_amt_target);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cf_amt_raised:");
      sb.append(this.cf_amt_raised);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cf_ppl_count:");
      sb.append(this.cf_ppl_count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_edit:");
      sb.append(this.is_edit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_cfpost_argsStandardSchemeFactory implements SchemeFactory {
      public create_cfpost_argsStandardScheme getScheme() {
        return new create_cfpost_argsStandardScheme();
      }
    }

    private static class create_cfpost_argsStandardScheme extends StandardScheme<create_cfpost_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_cfpost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CF_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cf_user = iprot.readString();
                struct.setCf_userIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CF_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cf_id = iprot.readString();
                struct.setCf_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CF_TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cf_title = iprot.readString();
                struct.setCf_titleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CF_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cf_url = iprot.readString();
                struct.setCf_urlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CF_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cf_content = iprot.readString();
                struct.setCf_contentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CF_FUT_IMAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cf_fut_image = iprot.readString();
                struct.setCf_fut_imageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // CF_HASHTAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cf_hashtags = iprot.readString();
                struct.setCf_hashtagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // CF_TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cf_time_created = iprot.readI32();
                struct.setCf_time_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // CF_END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cf_end_date = iprot.readI32();
                struct.setCf_end_dateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // CF_AMT_TARGET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cf_amt_target = iprot.readI32();
                struct.setCf_amt_targetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // CF_AMT_RAISED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cf_amt_raised = iprot.readI32();
                struct.setCf_amt_raisedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // CF_PPL_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cf_ppl_count = iprot.readI32();
                struct.setCf_ppl_countIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // IS_EDIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_edit = iprot.readI32();
                struct.setIs_editIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_cfpost_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cf_user != null) {
          oprot.writeFieldBegin(CF_USER_FIELD_DESC);
          oprot.writeString(struct.cf_user);
          oprot.writeFieldEnd();
        }
        if (struct.cf_id != null) {
          oprot.writeFieldBegin(CF_ID_FIELD_DESC);
          oprot.writeString(struct.cf_id);
          oprot.writeFieldEnd();
        }
        if (struct.cf_title != null) {
          oprot.writeFieldBegin(CF_TITLE_FIELD_DESC);
          oprot.writeString(struct.cf_title);
          oprot.writeFieldEnd();
        }
        if (struct.cf_url != null) {
          oprot.writeFieldBegin(CF_URL_FIELD_DESC);
          oprot.writeString(struct.cf_url);
          oprot.writeFieldEnd();
        }
        if (struct.cf_content != null) {
          oprot.writeFieldBegin(CF_CONTENT_FIELD_DESC);
          oprot.writeString(struct.cf_content);
          oprot.writeFieldEnd();
        }
        if (struct.cf_fut_image != null) {
          oprot.writeFieldBegin(CF_FUT_IMAGE_FIELD_DESC);
          oprot.writeString(struct.cf_fut_image);
          oprot.writeFieldEnd();
        }
        if (struct.cf_hashtags != null) {
          oprot.writeFieldBegin(CF_HASHTAGS_FIELD_DESC);
          oprot.writeString(struct.cf_hashtags);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CF_TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.cf_time_created);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CF_END_DATE_FIELD_DESC);
        oprot.writeI32(struct.cf_end_date);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CF_AMT_TARGET_FIELD_DESC);
        oprot.writeI32(struct.cf_amt_target);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CF_AMT_RAISED_FIELD_DESC);
        oprot.writeI32(struct.cf_amt_raised);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CF_PPL_COUNT_FIELD_DESC);
        oprot.writeI32(struct.cf_ppl_count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_EDIT_FIELD_DESC);
        oprot.writeI32(struct.is_edit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_cfpost_argsTupleSchemeFactory implements SchemeFactory {
      public create_cfpost_argsTupleScheme getScheme() {
        return new create_cfpost_argsTupleScheme();
      }
    }

    private static class create_cfpost_argsTupleScheme extends TupleScheme<create_cfpost_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_cfpost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCf_user()) {
          optionals.set(0);
        }
        if (struct.isSetCf_id()) {
          optionals.set(1);
        }
        if (struct.isSetCf_title()) {
          optionals.set(2);
        }
        if (struct.isSetCf_url()) {
          optionals.set(3);
        }
        if (struct.isSetCf_content()) {
          optionals.set(4);
        }
        if (struct.isSetCf_fut_image()) {
          optionals.set(5);
        }
        if (struct.isSetCf_hashtags()) {
          optionals.set(6);
        }
        if (struct.isSetCf_time_created()) {
          optionals.set(7);
        }
        if (struct.isSetCf_end_date()) {
          optionals.set(8);
        }
        if (struct.isSetCf_amt_target()) {
          optionals.set(9);
        }
        if (struct.isSetCf_amt_raised()) {
          optionals.set(10);
        }
        if (struct.isSetCf_ppl_count()) {
          optionals.set(11);
        }
        if (struct.isSetIs_edit()) {
          optionals.set(12);
        }
        oprot.writeBitSet(optionals, 13);
        if (struct.isSetCf_user()) {
          oprot.writeString(struct.cf_user);
        }
        if (struct.isSetCf_id()) {
          oprot.writeString(struct.cf_id);
        }
        if (struct.isSetCf_title()) {
          oprot.writeString(struct.cf_title);
        }
        if (struct.isSetCf_url()) {
          oprot.writeString(struct.cf_url);
        }
        if (struct.isSetCf_content()) {
          oprot.writeString(struct.cf_content);
        }
        if (struct.isSetCf_fut_image()) {
          oprot.writeString(struct.cf_fut_image);
        }
        if (struct.isSetCf_hashtags()) {
          oprot.writeString(struct.cf_hashtags);
        }
        if (struct.isSetCf_time_created()) {
          oprot.writeI32(struct.cf_time_created);
        }
        if (struct.isSetCf_end_date()) {
          oprot.writeI32(struct.cf_end_date);
        }
        if (struct.isSetCf_amt_target()) {
          oprot.writeI32(struct.cf_amt_target);
        }
        if (struct.isSetCf_amt_raised()) {
          oprot.writeI32(struct.cf_amt_raised);
        }
        if (struct.isSetCf_ppl_count()) {
          oprot.writeI32(struct.cf_ppl_count);
        }
        if (struct.isSetIs_edit()) {
          oprot.writeI32(struct.is_edit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_cfpost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(13);
        if (incoming.get(0)) {
          struct.cf_user = iprot.readString();
          struct.setCf_userIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cf_id = iprot.readString();
          struct.setCf_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cf_title = iprot.readString();
          struct.setCf_titleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.cf_url = iprot.readString();
          struct.setCf_urlIsSet(true);
        }
        if (incoming.get(4)) {
          struct.cf_content = iprot.readString();
          struct.setCf_contentIsSet(true);
        }
        if (incoming.get(5)) {
          struct.cf_fut_image = iprot.readString();
          struct.setCf_fut_imageIsSet(true);
        }
        if (incoming.get(6)) {
          struct.cf_hashtags = iprot.readString();
          struct.setCf_hashtagsIsSet(true);
        }
        if (incoming.get(7)) {
          struct.cf_time_created = iprot.readI32();
          struct.setCf_time_createdIsSet(true);
        }
        if (incoming.get(8)) {
          struct.cf_end_date = iprot.readI32();
          struct.setCf_end_dateIsSet(true);
        }
        if (incoming.get(9)) {
          struct.cf_amt_target = iprot.readI32();
          struct.setCf_amt_targetIsSet(true);
        }
        if (incoming.get(10)) {
          struct.cf_amt_raised = iprot.readI32();
          struct.setCf_amt_raisedIsSet(true);
        }
        if (incoming.get(11)) {
          struct.cf_ppl_count = iprot.readI32();
          struct.setCf_ppl_countIsSet(true);
        }
        if (incoming.get(12)) {
          struct.is_edit = iprot.readI32();
          struct.setIs_editIsSet(true);
        }
      }
    }

  }

  public static class create_cfpost_result implements org.apache.thrift.TBase<create_cfpost_result, create_cfpost_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_cfpost_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_cfpost_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_cfpost_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_cfpost_result.class, metaDataMap);
    }

    public create_cfpost_result() {
    }

    public create_cfpost_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_cfpost_result(create_cfpost_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public create_cfpost_result deepCopy() {
      return new create_cfpost_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public create_cfpost_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_cfpost_result)
        return this.equals((create_cfpost_result)that);
      return false;
    }

    public boolean equals(create_cfpost_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_cfpost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_cfpost_result typedOther = (create_cfpost_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_cfpost_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_cfpost_resultStandardSchemeFactory implements SchemeFactory {
      public create_cfpost_resultStandardScheme getScheme() {
        return new create_cfpost_resultStandardScheme();
      }
    }

    private static class create_cfpost_resultStandardScheme extends StandardScheme<create_cfpost_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_cfpost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_cfpost_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_cfpost_resultTupleSchemeFactory implements SchemeFactory {
      public create_cfpost_resultTupleScheme getScheme() {
        return new create_cfpost_resultTupleScheme();
      }
    }

    private static class create_cfpost_resultTupleScheme extends TupleScheme<create_cfpost_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_cfpost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_cfpost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_poll_args implements org.apache.thrift.TBase<create_poll_args, create_poll_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_poll_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("p_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField P_QTN_FIELD_DESC = new org.apache.thrift.protocol.TField("p_qtn", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField P_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("p_status", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField P_TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("p_time_created", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_poll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_poll_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String item_id; // required
    public String p_id; // required
    public String p_qtn; // required
    public int p_status; // required
    public int p_time_created; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ITEM_ID((short)2, "item_id"),
      P_ID((short)3, "p_id"),
      P_QTN((short)4, "p_qtn"),
      P_STATUS((short)5, "p_status"),
      P_TIME_CREATED((short)6, "p_time_created");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          case 3: // P_ID
            return P_ID;
          case 4: // P_QTN
            return P_QTN;
          case 5: // P_STATUS
            return P_STATUS;
          case 6: // P_TIME_CREATED
            return P_TIME_CREATED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __P_STATUS_ISSET_ID = 0;
    private static final int __P_TIME_CREATED_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("p_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_QTN, new org.apache.thrift.meta_data.FieldMetaData("p_qtn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_STATUS, new org.apache.thrift.meta_data.FieldMetaData("p_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.P_TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("p_time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_poll_args.class, metaDataMap);
    }

    public create_poll_args() {
    }

    public create_poll_args(
      String item_type,
      String item_id,
      String p_id,
      String p_qtn,
      int p_status,
      int p_time_created)
    {
      this();
      this.item_type = item_type;
      this.item_id = item_id;
      this.p_id = p_id;
      this.p_qtn = p_qtn;
      this.p_status = p_status;
      setP_statusIsSet(true);
      this.p_time_created = p_time_created;
      setP_time_createdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_poll_args(create_poll_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
      if (other.isSetP_id()) {
        this.p_id = other.p_id;
      }
      if (other.isSetP_qtn()) {
        this.p_qtn = other.p_qtn;
      }
      this.p_status = other.p_status;
      this.p_time_created = other.p_time_created;
    }

    public create_poll_args deepCopy() {
      return new create_poll_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.item_id = null;
      this.p_id = null;
      this.p_qtn = null;
      setP_statusIsSet(false);
      this.p_status = 0;
      setP_time_createdIsSet(false);
      this.p_time_created = 0;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public create_poll_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public create_poll_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public String getP_id() {
      return this.p_id;
    }

    public create_poll_args setP_id(String p_id) {
      this.p_id = p_id;
      return this;
    }

    public void unsetP_id() {
      this.p_id = null;
    }

    /** Returns true if field p_id is set (has been assigned a value) and false otherwise */
    public boolean isSetP_id() {
      return this.p_id != null;
    }

    public void setP_idIsSet(boolean value) {
      if (!value) {
        this.p_id = null;
      }
    }

    public String getP_qtn() {
      return this.p_qtn;
    }

    public create_poll_args setP_qtn(String p_qtn) {
      this.p_qtn = p_qtn;
      return this;
    }

    public void unsetP_qtn() {
      this.p_qtn = null;
    }

    /** Returns true if field p_qtn is set (has been assigned a value) and false otherwise */
    public boolean isSetP_qtn() {
      return this.p_qtn != null;
    }

    public void setP_qtnIsSet(boolean value) {
      if (!value) {
        this.p_qtn = null;
      }
    }

    public int getP_status() {
      return this.p_status;
    }

    public create_poll_args setP_status(int p_status) {
      this.p_status = p_status;
      setP_statusIsSet(true);
      return this;
    }

    public void unsetP_status() {
      __isset_bit_vector.clear(__P_STATUS_ISSET_ID);
    }

    /** Returns true if field p_status is set (has been assigned a value) and false otherwise */
    public boolean isSetP_status() {
      return __isset_bit_vector.get(__P_STATUS_ISSET_ID);
    }

    public void setP_statusIsSet(boolean value) {
      __isset_bit_vector.set(__P_STATUS_ISSET_ID, value);
    }

    public int getP_time_created() {
      return this.p_time_created;
    }

    public create_poll_args setP_time_created(int p_time_created) {
      this.p_time_created = p_time_created;
      setP_time_createdIsSet(true);
      return this;
    }

    public void unsetP_time_created() {
      __isset_bit_vector.clear(__P_TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field p_time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetP_time_created() {
      return __isset_bit_vector.get(__P_TIME_CREATED_ISSET_ID);
    }

    public void setP_time_createdIsSet(boolean value) {
      __isset_bit_vector.set(__P_TIME_CREATED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      case P_ID:
        if (value == null) {
          unsetP_id();
        } else {
          setP_id((String)value);
        }
        break;

      case P_QTN:
        if (value == null) {
          unsetP_qtn();
        } else {
          setP_qtn((String)value);
        }
        break;

      case P_STATUS:
        if (value == null) {
          unsetP_status();
        } else {
          setP_status((Integer)value);
        }
        break;

      case P_TIME_CREATED:
        if (value == null) {
          unsetP_time_created();
        } else {
          setP_time_created((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      case P_ID:
        return getP_id();

      case P_QTN:
        return getP_qtn();

      case P_STATUS:
        return Integer.valueOf(getP_status());

      case P_TIME_CREATED:
        return Integer.valueOf(getP_time_created());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      case P_ID:
        return isSetP_id();
      case P_QTN:
        return isSetP_qtn();
      case P_STATUS:
        return isSetP_status();
      case P_TIME_CREATED:
        return isSetP_time_created();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_poll_args)
        return this.equals((create_poll_args)that);
      return false;
    }

    public boolean equals(create_poll_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      boolean this_present_p_id = true && this.isSetP_id();
      boolean that_present_p_id = true && that.isSetP_id();
      if (this_present_p_id || that_present_p_id) {
        if (!(this_present_p_id && that_present_p_id))
          return false;
        if (!this.p_id.equals(that.p_id))
          return false;
      }

      boolean this_present_p_qtn = true && this.isSetP_qtn();
      boolean that_present_p_qtn = true && that.isSetP_qtn();
      if (this_present_p_qtn || that_present_p_qtn) {
        if (!(this_present_p_qtn && that_present_p_qtn))
          return false;
        if (!this.p_qtn.equals(that.p_qtn))
          return false;
      }

      boolean this_present_p_status = true;
      boolean that_present_p_status = true;
      if (this_present_p_status || that_present_p_status) {
        if (!(this_present_p_status && that_present_p_status))
          return false;
        if (this.p_status != that.p_status)
          return false;
      }

      boolean this_present_p_time_created = true;
      boolean that_present_p_time_created = true;
      if (this_present_p_time_created || that_present_p_time_created) {
        if (!(this_present_p_time_created && that_present_p_time_created))
          return false;
        if (this.p_time_created != that.p_time_created)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_poll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_poll_args typedOther = (create_poll_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_id()).compareTo(typedOther.isSetP_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_id, typedOther.p_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_qtn()).compareTo(typedOther.isSetP_qtn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_qtn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_qtn, typedOther.p_qtn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_status()).compareTo(typedOther.isSetP_status());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_status()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_status, typedOther.p_status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_time_created()).compareTo(typedOther.isSetP_time_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_time_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_time_created, typedOther.p_time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_poll_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_id:");
      if (this.p_id == null) {
        sb.append("null");
      } else {
        sb.append(this.p_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_qtn:");
      if (this.p_qtn == null) {
        sb.append("null");
      } else {
        sb.append(this.p_qtn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_status:");
      sb.append(this.p_status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_time_created:");
      sb.append(this.p_time_created);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_poll_argsStandardSchemeFactory implements SchemeFactory {
      public create_poll_argsStandardScheme getScheme() {
        return new create_poll_argsStandardScheme();
      }
    }

    private static class create_poll_argsStandardScheme extends StandardScheme<create_poll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_poll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_id = iprot.readString();
                struct.setP_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // P_QTN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_qtn = iprot.readString();
                struct.setP_qtnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // P_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.p_status = iprot.readI32();
                struct.setP_statusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // P_TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.p_time_created = iprot.readI32();
                struct.setP_time_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_poll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        if (struct.p_id != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.p_id);
          oprot.writeFieldEnd();
        }
        if (struct.p_qtn != null) {
          oprot.writeFieldBegin(P_QTN_FIELD_DESC);
          oprot.writeString(struct.p_qtn);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(P_STATUS_FIELD_DESC);
        oprot.writeI32(struct.p_status);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(P_TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.p_time_created);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_poll_argsTupleSchemeFactory implements SchemeFactory {
      public create_poll_argsTupleScheme getScheme() {
        return new create_poll_argsTupleScheme();
      }
    }

    private static class create_poll_argsTupleScheme extends TupleScheme<create_poll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_poll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetItem_id()) {
          optionals.set(1);
        }
        if (struct.isSetP_id()) {
          optionals.set(2);
        }
        if (struct.isSetP_qtn()) {
          optionals.set(3);
        }
        if (struct.isSetP_status()) {
          optionals.set(4);
        }
        if (struct.isSetP_time_created()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
        if (struct.isSetP_id()) {
          oprot.writeString(struct.p_id);
        }
        if (struct.isSetP_qtn()) {
          oprot.writeString(struct.p_qtn);
        }
        if (struct.isSetP_status()) {
          oprot.writeI32(struct.p_status);
        }
        if (struct.isSetP_time_created()) {
          oprot.writeI32(struct.p_time_created);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_poll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.p_id = iprot.readString();
          struct.setP_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.p_qtn = iprot.readString();
          struct.setP_qtnIsSet(true);
        }
        if (incoming.get(4)) {
          struct.p_status = iprot.readI32();
          struct.setP_statusIsSet(true);
        }
        if (incoming.get(5)) {
          struct.p_time_created = iprot.readI32();
          struct.setP_time_createdIsSet(true);
        }
      }
    }

  }

  public static class create_poll_result implements org.apache.thrift.TBase<create_poll_result, create_poll_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_poll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_poll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_poll_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_poll_result.class, metaDataMap);
    }

    public create_poll_result() {
    }

    public create_poll_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_poll_result(create_poll_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public create_poll_result deepCopy() {
      return new create_poll_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public create_poll_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_poll_result)
        return this.equals((create_poll_result)that);
      return false;
    }

    public boolean equals(create_poll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_poll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_poll_result typedOther = (create_poll_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_poll_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_poll_resultStandardSchemeFactory implements SchemeFactory {
      public create_poll_resultStandardScheme getScheme() {
        return new create_poll_resultStandardScheme();
      }
    }

    private static class create_poll_resultStandardScheme extends StandardScheme<create_poll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_poll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_poll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_poll_resultTupleSchemeFactory implements SchemeFactory {
      public create_poll_resultTupleScheme getScheme() {
        return new create_poll_resultTupleScheme();
      }
    }

    private static class create_poll_resultTupleScheme extends TupleScheme<create_poll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_poll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_poll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class respond_poll_args implements org.apache.thrift.TBase<respond_poll_args, respond_poll_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("respond_poll_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("p_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new respond_poll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new respond_poll_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String p_id; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      P_ID((short)2, "p_id"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // P_ID
            return P_ID;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("p_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(respond_poll_args.class, metaDataMap);
    }

    public respond_poll_args() {
    }

    public respond_poll_args(
      String user_name,
      String p_id,
      int time)
    {
      this();
      this.user_name = user_name;
      this.p_id = p_id;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public respond_poll_args(respond_poll_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetP_id()) {
        this.p_id = other.p_id;
      }
      this.time = other.time;
    }

    public respond_poll_args deepCopy() {
      return new respond_poll_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.p_id = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public respond_poll_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getP_id() {
      return this.p_id;
    }

    public respond_poll_args setP_id(String p_id) {
      this.p_id = p_id;
      return this;
    }

    public void unsetP_id() {
      this.p_id = null;
    }

    /** Returns true if field p_id is set (has been assigned a value) and false otherwise */
    public boolean isSetP_id() {
      return this.p_id != null;
    }

    public void setP_idIsSet(boolean value) {
      if (!value) {
        this.p_id = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public respond_poll_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case P_ID:
        if (value == null) {
          unsetP_id();
        } else {
          setP_id((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case P_ID:
        return getP_id();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case P_ID:
        return isSetP_id();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof respond_poll_args)
        return this.equals((respond_poll_args)that);
      return false;
    }

    public boolean equals(respond_poll_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_p_id = true && this.isSetP_id();
      boolean that_present_p_id = true && that.isSetP_id();
      if (this_present_p_id || that_present_p_id) {
        if (!(this_present_p_id && that_present_p_id))
          return false;
        if (!this.p_id.equals(that.p_id))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(respond_poll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      respond_poll_args typedOther = (respond_poll_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_id()).compareTo(typedOther.isSetP_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_id, typedOther.p_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("respond_poll_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_id:");
      if (this.p_id == null) {
        sb.append("null");
      } else {
        sb.append(this.p_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class respond_poll_argsStandardSchemeFactory implements SchemeFactory {
      public respond_poll_argsStandardScheme getScheme() {
        return new respond_poll_argsStandardScheme();
      }
    }

    private static class respond_poll_argsStandardScheme extends StandardScheme<respond_poll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, respond_poll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_id = iprot.readString();
                struct.setP_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, respond_poll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.p_id != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.p_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class respond_poll_argsTupleSchemeFactory implements SchemeFactory {
      public respond_poll_argsTupleScheme getScheme() {
        return new respond_poll_argsTupleScheme();
      }
    }

    private static class respond_poll_argsTupleScheme extends TupleScheme<respond_poll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, respond_poll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetP_id()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetP_id()) {
          oprot.writeString(struct.p_id);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, respond_poll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p_id = iprot.readString();
          struct.setP_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class respond_poll_result implements org.apache.thrift.TBase<respond_poll_result, respond_poll_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("respond_poll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new respond_poll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new respond_poll_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(respond_poll_result.class, metaDataMap);
    }

    public respond_poll_result() {
    }

    public respond_poll_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public respond_poll_result(respond_poll_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public respond_poll_result deepCopy() {
      return new respond_poll_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public respond_poll_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof respond_poll_result)
        return this.equals((respond_poll_result)that);
      return false;
    }

    public boolean equals(respond_poll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(respond_poll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      respond_poll_result typedOther = (respond_poll_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("respond_poll_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class respond_poll_resultStandardSchemeFactory implements SchemeFactory {
      public respond_poll_resultStandardScheme getScheme() {
        return new respond_poll_resultStandardScheme();
      }
    }

    private static class respond_poll_resultStandardScheme extends StandardScheme<respond_poll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, respond_poll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, respond_poll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class respond_poll_resultTupleSchemeFactory implements SchemeFactory {
      public respond_poll_resultTupleScheme getScheme() {
        return new respond_poll_resultTupleScheme();
      }
    }

    private static class respond_poll_resultTupleScheme extends TupleScheme<respond_poll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, respond_poll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, respond_poll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class featured_item_args implements org.apache.thrift.TBase<featured_item_args, featured_item_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("featured_item_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new featured_item_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new featured_item_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String item_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ITEM_ID((short)2, "item_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(featured_item_args.class, metaDataMap);
    }

    public featured_item_args() {
    }

    public featured_item_args(
      String item_type,
      String item_id)
    {
      this();
      this.item_type = item_type;
      this.item_id = item_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public featured_item_args(featured_item_args other) {
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
    }

    public featured_item_args deepCopy() {
      return new featured_item_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.item_id = null;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public featured_item_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public featured_item_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof featured_item_args)
        return this.equals((featured_item_args)that);
      return false;
    }

    public boolean equals(featured_item_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(featured_item_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      featured_item_args typedOther = (featured_item_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("featured_item_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class featured_item_argsStandardSchemeFactory implements SchemeFactory {
      public featured_item_argsStandardScheme getScheme() {
        return new featured_item_argsStandardScheme();
      }
    }

    private static class featured_item_argsStandardScheme extends StandardScheme<featured_item_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, featured_item_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, featured_item_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class featured_item_argsTupleSchemeFactory implements SchemeFactory {
      public featured_item_argsTupleScheme getScheme() {
        return new featured_item_argsTupleScheme();
      }
    }

    private static class featured_item_argsTupleScheme extends TupleScheme<featured_item_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, featured_item_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetItem_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, featured_item_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
      }
    }

  }

  public static class featured_item_result implements org.apache.thrift.TBase<featured_item_result, featured_item_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("featured_item_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new featured_item_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new featured_item_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(featured_item_result.class, metaDataMap);
    }

    public featured_item_result() {
    }

    public featured_item_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public featured_item_result(featured_item_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public featured_item_result deepCopy() {
      return new featured_item_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public featured_item_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof featured_item_result)
        return this.equals((featured_item_result)that);
      return false;
    }

    public boolean equals(featured_item_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(featured_item_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      featured_item_result typedOther = (featured_item_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("featured_item_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class featured_item_resultStandardSchemeFactory implements SchemeFactory {
      public featured_item_resultStandardScheme getScheme() {
        return new featured_item_resultStandardScheme();
      }
    }

    private static class featured_item_resultStandardScheme extends StandardScheme<featured_item_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, featured_item_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, featured_item_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class featured_item_resultTupleSchemeFactory implements SchemeFactory {
      public featured_item_resultTupleScheme getScheme() {
        return new featured_item_resultTupleScheme();
      }
    }

    private static class featured_item_resultTupleScheme extends TupleScheme<featured_item_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, featured_item_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, featured_item_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class headlines_item_args implements org.apache.thrift.TBase<headlines_item_args, headlines_item_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("headlines_item_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new headlines_item_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new headlines_item_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String item_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ITEM_ID((short)2, "item_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(headlines_item_args.class, metaDataMap);
    }

    public headlines_item_args() {
    }

    public headlines_item_args(
      String item_type,
      String item_id)
    {
      this();
      this.item_type = item_type;
      this.item_id = item_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public headlines_item_args(headlines_item_args other) {
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
    }

    public headlines_item_args deepCopy() {
      return new headlines_item_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.item_id = null;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public headlines_item_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public headlines_item_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof headlines_item_args)
        return this.equals((headlines_item_args)that);
      return false;
    }

    public boolean equals(headlines_item_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(headlines_item_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      headlines_item_args typedOther = (headlines_item_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("headlines_item_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class headlines_item_argsStandardSchemeFactory implements SchemeFactory {
      public headlines_item_argsStandardScheme getScheme() {
        return new headlines_item_argsStandardScheme();
      }
    }

    private static class headlines_item_argsStandardScheme extends StandardScheme<headlines_item_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, headlines_item_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, headlines_item_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class headlines_item_argsTupleSchemeFactory implements SchemeFactory {
      public headlines_item_argsTupleScheme getScheme() {
        return new headlines_item_argsTupleScheme();
      }
    }

    private static class headlines_item_argsTupleScheme extends TupleScheme<headlines_item_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, headlines_item_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetItem_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, headlines_item_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
      }
    }

  }

  public static class headlines_item_result implements org.apache.thrift.TBase<headlines_item_result, headlines_item_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("headlines_item_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new headlines_item_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new headlines_item_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(headlines_item_result.class, metaDataMap);
    }

    public headlines_item_result() {
    }

    public headlines_item_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public headlines_item_result(headlines_item_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public headlines_item_result deepCopy() {
      return new headlines_item_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public headlines_item_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof headlines_item_result)
        return this.equals((headlines_item_result)that);
      return false;
    }

    public boolean equals(headlines_item_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(headlines_item_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      headlines_item_result typedOther = (headlines_item_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("headlines_item_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class headlines_item_resultStandardSchemeFactory implements SchemeFactory {
      public headlines_item_resultStandardScheme getScheme() {
        return new headlines_item_resultStandardScheme();
      }
    }

    private static class headlines_item_resultStandardScheme extends StandardScheme<headlines_item_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, headlines_item_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, headlines_item_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class headlines_item_resultTupleSchemeFactory implements SchemeFactory {
      public headlines_item_resultTupleScheme getScheme() {
        return new headlines_item_resultTupleScheme();
      }
    }

    private static class headlines_item_resultTupleScheme extends TupleScheme<headlines_item_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, headlines_item_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, headlines_item_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_tiles_args implements org.apache.thrift.TBase<get_tiles_args, get_tiles_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_tiles_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CAT_FIELD_DESC = new org.apache.thrift.protocol.TField("cat", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField ART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("art_id", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TILES_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tiles_type", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_tiles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_tiles_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String cat; // required
    public int count; // required
    public int prev_cnt; // required
    public String art_id; // required
    public String tiles_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      CAT((short)2, "cat"),
      COUNT((short)3, "count"),
      PREV_CNT((short)4, "prev_cnt"),
      ART_ID((short)5, "art_id"),
      TILES_TYPE((short)6, "tiles_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // CAT
            return CAT;
          case 3: // COUNT
            return COUNT;
          case 4: // PREV_CNT
            return PREV_CNT;
          case 5: // ART_ID
            return ART_ID;
          case 6: // TILES_TYPE
            return TILES_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CAT, new org.apache.thrift.meta_data.FieldMetaData("cat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ART_ID, new org.apache.thrift.meta_data.FieldMetaData("art_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TILES_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tiles_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_tiles_args.class, metaDataMap);
    }

    public get_tiles_args() {
    }

    public get_tiles_args(
      String user_name,
      String cat,
      int count,
      int prev_cnt,
      String art_id,
      String tiles_type)
    {
      this();
      this.user_name = user_name;
      this.cat = cat;
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      this.art_id = art_id;
      this.tiles_type = tiles_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tiles_args(get_tiles_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetCat()) {
        this.cat = other.cat;
      }
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
      if (other.isSetArt_id()) {
        this.art_id = other.art_id;
      }
      if (other.isSetTiles_type()) {
        this.tiles_type = other.tiles_type;
      }
    }

    public get_tiles_args deepCopy() {
      return new get_tiles_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.cat = null;
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
      this.art_id = null;
      this.tiles_type = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_tiles_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getCat() {
      return this.cat;
    }

    public get_tiles_args setCat(String cat) {
      this.cat = cat;
      return this;
    }

    public void unsetCat() {
      this.cat = null;
    }

    /** Returns true if field cat is set (has been assigned a value) and false otherwise */
    public boolean isSetCat() {
      return this.cat != null;
    }

    public void setCatIsSet(boolean value) {
      if (!value) {
        this.cat = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public get_tiles_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_tiles_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public String getArt_id() {
      return this.art_id;
    }

    public get_tiles_args setArt_id(String art_id) {
      this.art_id = art_id;
      return this;
    }

    public void unsetArt_id() {
      this.art_id = null;
    }

    /** Returns true if field art_id is set (has been assigned a value) and false otherwise */
    public boolean isSetArt_id() {
      return this.art_id != null;
    }

    public void setArt_idIsSet(boolean value) {
      if (!value) {
        this.art_id = null;
      }
    }

    public String getTiles_type() {
      return this.tiles_type;
    }

    public get_tiles_args setTiles_type(String tiles_type) {
      this.tiles_type = tiles_type;
      return this;
    }

    public void unsetTiles_type() {
      this.tiles_type = null;
    }

    /** Returns true if field tiles_type is set (has been assigned a value) and false otherwise */
    public boolean isSetTiles_type() {
      return this.tiles_type != null;
    }

    public void setTiles_typeIsSet(boolean value) {
      if (!value) {
        this.tiles_type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case CAT:
        if (value == null) {
          unsetCat();
        } else {
          setCat((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      case ART_ID:
        if (value == null) {
          unsetArt_id();
        } else {
          setArt_id((String)value);
        }
        break;

      case TILES_TYPE:
        if (value == null) {
          unsetTiles_type();
        } else {
          setTiles_type((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case CAT:
        return getCat();

      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      case ART_ID:
        return getArt_id();

      case TILES_TYPE:
        return getTiles_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case CAT:
        return isSetCat();
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      case ART_ID:
        return isSetArt_id();
      case TILES_TYPE:
        return isSetTiles_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tiles_args)
        return this.equals((get_tiles_args)that);
      return false;
    }

    public boolean equals(get_tiles_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_cat = true && this.isSetCat();
      boolean that_present_cat = true && that.isSetCat();
      if (this_present_cat || that_present_cat) {
        if (!(this_present_cat && that_present_cat))
          return false;
        if (!this.cat.equals(that.cat))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      boolean this_present_art_id = true && this.isSetArt_id();
      boolean that_present_art_id = true && that.isSetArt_id();
      if (this_present_art_id || that_present_art_id) {
        if (!(this_present_art_id && that_present_art_id))
          return false;
        if (!this.art_id.equals(that.art_id))
          return false;
      }

      boolean this_present_tiles_type = true && this.isSetTiles_type();
      boolean that_present_tiles_type = true && that.isSetTiles_type();
      if (this_present_tiles_type || that_present_tiles_type) {
        if (!(this_present_tiles_type && that_present_tiles_type))
          return false;
        if (!this.tiles_type.equals(that.tiles_type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_tiles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_tiles_args typedOther = (get_tiles_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCat()).compareTo(typedOther.isSetCat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cat, typedOther.cat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArt_id()).compareTo(typedOther.isSetArt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.art_id, typedOther.art_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTiles_type()).compareTo(typedOther.isSetTiles_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTiles_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiles_type, typedOther.tiles_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_tiles_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cat:");
      if (this.cat == null) {
        sb.append("null");
      } else {
        sb.append(this.cat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      if (!first) sb.append(", ");
      sb.append("art_id:");
      if (this.art_id == null) {
        sb.append("null");
      } else {
        sb.append(this.art_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tiles_type:");
      if (this.tiles_type == null) {
        sb.append("null");
      } else {
        sb.append(this.tiles_type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_tiles_argsStandardSchemeFactory implements SchemeFactory {
      public get_tiles_argsStandardScheme getScheme() {
        return new get_tiles_argsStandardScheme();
      }
    }

    private static class get_tiles_argsStandardScheme extends StandardScheme<get_tiles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_tiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cat = iprot.readString();
                struct.setCatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ART_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.art_id = iprot.readString();
                struct.setArt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TILES_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tiles_type = iprot.readString();
                struct.setTiles_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_tiles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.cat != null) {
          oprot.writeFieldBegin(CAT_FIELD_DESC);
          oprot.writeString(struct.cat);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        if (struct.art_id != null) {
          oprot.writeFieldBegin(ART_ID_FIELD_DESC);
          oprot.writeString(struct.art_id);
          oprot.writeFieldEnd();
        }
        if (struct.tiles_type != null) {
          oprot.writeFieldBegin(TILES_TYPE_FIELD_DESC);
          oprot.writeString(struct.tiles_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_tiles_argsTupleSchemeFactory implements SchemeFactory {
      public get_tiles_argsTupleScheme getScheme() {
        return new get_tiles_argsTupleScheme();
      }
    }

    private static class get_tiles_argsTupleScheme extends TupleScheme<get_tiles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_tiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetCat()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(3);
        }
        if (struct.isSetArt_id()) {
          optionals.set(4);
        }
        if (struct.isSetTiles_type()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetCat()) {
          oprot.writeString(struct.cat);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
        if (struct.isSetArt_id()) {
          oprot.writeString(struct.art_id);
        }
        if (struct.isSetTiles_type()) {
          oprot.writeString(struct.tiles_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_tiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cat = iprot.readString();
          struct.setCatIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
        if (incoming.get(4)) {
          struct.art_id = iprot.readString();
          struct.setArt_idIsSet(true);
        }
        if (incoming.get(5)) {
          struct.tiles_type = iprot.readString();
          struct.setTiles_typeIsSet(true);
        }
      }
    }

  }

  public static class get_tiles_result implements org.apache.thrift.TBase<get_tiles_result, get_tiles_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_tiles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_tiles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_tiles_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_tiles_result.class, metaDataMap);
    }

    public get_tiles_result() {
    }

    public get_tiles_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tiles_result(get_tiles_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_tiles_result deepCopy() {
      return new get_tiles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_tiles_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tiles_result)
        return this.equals((get_tiles_result)that);
      return false;
    }

    public boolean equals(get_tiles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_tiles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_tiles_result typedOther = (get_tiles_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_tiles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_tiles_resultStandardSchemeFactory implements SchemeFactory {
      public get_tiles_resultStandardScheme getScheme() {
        return new get_tiles_resultStandardScheme();
      }
    }

    private static class get_tiles_resultStandardScheme extends StandardScheme<get_tiles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_tiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_tiles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_tiles_resultTupleSchemeFactory implements SchemeFactory {
      public get_tiles_resultTupleScheme getScheme() {
        return new get_tiles_resultTupleScheme();
      }
    }

    private static class get_tiles_resultTupleScheme extends TupleScheme<get_tiles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_tiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_tiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_tiles_temp_args implements org.apache.thrift.TBase<get_tiles_temp_args, get_tiles_temp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_tiles_temp_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CAT_FIELD_DESC = new org.apache.thrift.protocol.TField("cat", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField ART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("art_id", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TILES_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tiles_type", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_tiles_temp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_tiles_temp_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String cat; // required
    public int count; // required
    public int prev_cnt; // required
    public String art_id; // required
    public String tiles_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      CAT((short)2, "cat"),
      COUNT((short)3, "count"),
      PREV_CNT((short)4, "prev_cnt"),
      ART_ID((short)5, "art_id"),
      TILES_TYPE((short)6, "tiles_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // CAT
            return CAT;
          case 3: // COUNT
            return COUNT;
          case 4: // PREV_CNT
            return PREV_CNT;
          case 5: // ART_ID
            return ART_ID;
          case 6: // TILES_TYPE
            return TILES_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CAT, new org.apache.thrift.meta_data.FieldMetaData("cat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ART_ID, new org.apache.thrift.meta_data.FieldMetaData("art_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TILES_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tiles_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_tiles_temp_args.class, metaDataMap);
    }

    public get_tiles_temp_args() {
    }

    public get_tiles_temp_args(
      String user_name,
      String cat,
      int count,
      int prev_cnt,
      String art_id,
      String tiles_type)
    {
      this();
      this.user_name = user_name;
      this.cat = cat;
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      this.art_id = art_id;
      this.tiles_type = tiles_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tiles_temp_args(get_tiles_temp_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetCat()) {
        this.cat = other.cat;
      }
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
      if (other.isSetArt_id()) {
        this.art_id = other.art_id;
      }
      if (other.isSetTiles_type()) {
        this.tiles_type = other.tiles_type;
      }
    }

    public get_tiles_temp_args deepCopy() {
      return new get_tiles_temp_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.cat = null;
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
      this.art_id = null;
      this.tiles_type = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_tiles_temp_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getCat() {
      return this.cat;
    }

    public get_tiles_temp_args setCat(String cat) {
      this.cat = cat;
      return this;
    }

    public void unsetCat() {
      this.cat = null;
    }

    /** Returns true if field cat is set (has been assigned a value) and false otherwise */
    public boolean isSetCat() {
      return this.cat != null;
    }

    public void setCatIsSet(boolean value) {
      if (!value) {
        this.cat = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public get_tiles_temp_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_tiles_temp_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public String getArt_id() {
      return this.art_id;
    }

    public get_tiles_temp_args setArt_id(String art_id) {
      this.art_id = art_id;
      return this;
    }

    public void unsetArt_id() {
      this.art_id = null;
    }

    /** Returns true if field art_id is set (has been assigned a value) and false otherwise */
    public boolean isSetArt_id() {
      return this.art_id != null;
    }

    public void setArt_idIsSet(boolean value) {
      if (!value) {
        this.art_id = null;
      }
    }

    public String getTiles_type() {
      return this.tiles_type;
    }

    public get_tiles_temp_args setTiles_type(String tiles_type) {
      this.tiles_type = tiles_type;
      return this;
    }

    public void unsetTiles_type() {
      this.tiles_type = null;
    }

    /** Returns true if field tiles_type is set (has been assigned a value) and false otherwise */
    public boolean isSetTiles_type() {
      return this.tiles_type != null;
    }

    public void setTiles_typeIsSet(boolean value) {
      if (!value) {
        this.tiles_type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case CAT:
        if (value == null) {
          unsetCat();
        } else {
          setCat((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      case ART_ID:
        if (value == null) {
          unsetArt_id();
        } else {
          setArt_id((String)value);
        }
        break;

      case TILES_TYPE:
        if (value == null) {
          unsetTiles_type();
        } else {
          setTiles_type((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case CAT:
        return getCat();

      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      case ART_ID:
        return getArt_id();

      case TILES_TYPE:
        return getTiles_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case CAT:
        return isSetCat();
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      case ART_ID:
        return isSetArt_id();
      case TILES_TYPE:
        return isSetTiles_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tiles_temp_args)
        return this.equals((get_tiles_temp_args)that);
      return false;
    }

    public boolean equals(get_tiles_temp_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_cat = true && this.isSetCat();
      boolean that_present_cat = true && that.isSetCat();
      if (this_present_cat || that_present_cat) {
        if (!(this_present_cat && that_present_cat))
          return false;
        if (!this.cat.equals(that.cat))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      boolean this_present_art_id = true && this.isSetArt_id();
      boolean that_present_art_id = true && that.isSetArt_id();
      if (this_present_art_id || that_present_art_id) {
        if (!(this_present_art_id && that_present_art_id))
          return false;
        if (!this.art_id.equals(that.art_id))
          return false;
      }

      boolean this_present_tiles_type = true && this.isSetTiles_type();
      boolean that_present_tiles_type = true && that.isSetTiles_type();
      if (this_present_tiles_type || that_present_tiles_type) {
        if (!(this_present_tiles_type && that_present_tiles_type))
          return false;
        if (!this.tiles_type.equals(that.tiles_type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_tiles_temp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_tiles_temp_args typedOther = (get_tiles_temp_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCat()).compareTo(typedOther.isSetCat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cat, typedOther.cat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArt_id()).compareTo(typedOther.isSetArt_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArt_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.art_id, typedOther.art_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTiles_type()).compareTo(typedOther.isSetTiles_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTiles_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiles_type, typedOther.tiles_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_tiles_temp_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cat:");
      if (this.cat == null) {
        sb.append("null");
      } else {
        sb.append(this.cat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      if (!first) sb.append(", ");
      sb.append("art_id:");
      if (this.art_id == null) {
        sb.append("null");
      } else {
        sb.append(this.art_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tiles_type:");
      if (this.tiles_type == null) {
        sb.append("null");
      } else {
        sb.append(this.tiles_type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_tiles_temp_argsStandardSchemeFactory implements SchemeFactory {
      public get_tiles_temp_argsStandardScheme getScheme() {
        return new get_tiles_temp_argsStandardScheme();
      }
    }

    private static class get_tiles_temp_argsStandardScheme extends StandardScheme<get_tiles_temp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_tiles_temp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cat = iprot.readString();
                struct.setCatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ART_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.art_id = iprot.readString();
                struct.setArt_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TILES_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tiles_type = iprot.readString();
                struct.setTiles_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_tiles_temp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.cat != null) {
          oprot.writeFieldBegin(CAT_FIELD_DESC);
          oprot.writeString(struct.cat);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        if (struct.art_id != null) {
          oprot.writeFieldBegin(ART_ID_FIELD_DESC);
          oprot.writeString(struct.art_id);
          oprot.writeFieldEnd();
        }
        if (struct.tiles_type != null) {
          oprot.writeFieldBegin(TILES_TYPE_FIELD_DESC);
          oprot.writeString(struct.tiles_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_tiles_temp_argsTupleSchemeFactory implements SchemeFactory {
      public get_tiles_temp_argsTupleScheme getScheme() {
        return new get_tiles_temp_argsTupleScheme();
      }
    }

    private static class get_tiles_temp_argsTupleScheme extends TupleScheme<get_tiles_temp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_tiles_temp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetCat()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(3);
        }
        if (struct.isSetArt_id()) {
          optionals.set(4);
        }
        if (struct.isSetTiles_type()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetCat()) {
          oprot.writeString(struct.cat);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
        if (struct.isSetArt_id()) {
          oprot.writeString(struct.art_id);
        }
        if (struct.isSetTiles_type()) {
          oprot.writeString(struct.tiles_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_tiles_temp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cat = iprot.readString();
          struct.setCatIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
        if (incoming.get(4)) {
          struct.art_id = iprot.readString();
          struct.setArt_idIsSet(true);
        }
        if (incoming.get(5)) {
          struct.tiles_type = iprot.readString();
          struct.setTiles_typeIsSet(true);
        }
      }
    }

  }

  public static class get_tiles_temp_result implements org.apache.thrift.TBase<get_tiles_temp_result, get_tiles_temp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_tiles_temp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_tiles_temp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_tiles_temp_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_tiles_temp_result.class, metaDataMap);
    }

    public get_tiles_temp_result() {
    }

    public get_tiles_temp_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tiles_temp_result(get_tiles_temp_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_tiles_temp_result deepCopy() {
      return new get_tiles_temp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_tiles_temp_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tiles_temp_result)
        return this.equals((get_tiles_temp_result)that);
      return false;
    }

    public boolean equals(get_tiles_temp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_tiles_temp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_tiles_temp_result typedOther = (get_tiles_temp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_tiles_temp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_tiles_temp_resultStandardSchemeFactory implements SchemeFactory {
      public get_tiles_temp_resultStandardScheme getScheme() {
        return new get_tiles_temp_resultStandardScheme();
      }
    }

    private static class get_tiles_temp_resultStandardScheme extends StandardScheme<get_tiles_temp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_tiles_temp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_tiles_temp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_tiles_temp_resultTupleSchemeFactory implements SchemeFactory {
      public get_tiles_temp_resultTupleScheme getScheme() {
        return new get_tiles_temp_resultTupleScheme();
      }
    }

    private static class get_tiles_temp_resultTupleScheme extends TupleScheme<get_tiles_temp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_tiles_temp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_tiles_temp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_elections_home_args implements org.apache.thrift.TBase<get_elections_home_args, get_elections_home_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_elections_home_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILTER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_type", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILTER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_value", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_elections_home_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_elections_home_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String filter_type; // required
    public String filter_value; // required
    public int count; // required
    public int prev_cnt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      FILTER_TYPE((short)2, "filter_type"),
      FILTER_VALUE((short)3, "filter_value"),
      COUNT((short)4, "count"),
      PREV_CNT((short)5, "prev_cnt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // FILTER_TYPE
            return FILTER_TYPE;
          case 3: // FILTER_VALUE
            return FILTER_VALUE;
          case 4: // COUNT
            return COUNT;
          case 5: // PREV_CNT
            return PREV_CNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILTER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("filter_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILTER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("filter_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_elections_home_args.class, metaDataMap);
    }

    public get_elections_home_args() {
    }

    public get_elections_home_args(
      String user_name,
      String filter_type,
      String filter_value,
      int count,
      int prev_cnt)
    {
      this();
      this.user_name = user_name;
      this.filter_type = filter_type;
      this.filter_value = filter_value;
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_elections_home_args(get_elections_home_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetFilter_type()) {
        this.filter_type = other.filter_type;
      }
      if (other.isSetFilter_value()) {
        this.filter_value = other.filter_value;
      }
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
    }

    public get_elections_home_args deepCopy() {
      return new get_elections_home_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.filter_type = null;
      this.filter_value = null;
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_elections_home_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getFilter_type() {
      return this.filter_type;
    }

    public get_elections_home_args setFilter_type(String filter_type) {
      this.filter_type = filter_type;
      return this;
    }

    public void unsetFilter_type() {
      this.filter_type = null;
    }

    /** Returns true if field filter_type is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter_type() {
      return this.filter_type != null;
    }

    public void setFilter_typeIsSet(boolean value) {
      if (!value) {
        this.filter_type = null;
      }
    }

    public String getFilter_value() {
      return this.filter_value;
    }

    public get_elections_home_args setFilter_value(String filter_value) {
      this.filter_value = filter_value;
      return this;
    }

    public void unsetFilter_value() {
      this.filter_value = null;
    }

    /** Returns true if field filter_value is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter_value() {
      return this.filter_value != null;
    }

    public void setFilter_valueIsSet(boolean value) {
      if (!value) {
        this.filter_value = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public get_elections_home_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_elections_home_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case FILTER_TYPE:
        if (value == null) {
          unsetFilter_type();
        } else {
          setFilter_type((String)value);
        }
        break;

      case FILTER_VALUE:
        if (value == null) {
          unsetFilter_value();
        } else {
          setFilter_value((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case FILTER_TYPE:
        return getFilter_type();

      case FILTER_VALUE:
        return getFilter_value();

      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case FILTER_TYPE:
        return isSetFilter_type();
      case FILTER_VALUE:
        return isSetFilter_value();
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_elections_home_args)
        return this.equals((get_elections_home_args)that);
      return false;
    }

    public boolean equals(get_elections_home_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_filter_type = true && this.isSetFilter_type();
      boolean that_present_filter_type = true && that.isSetFilter_type();
      if (this_present_filter_type || that_present_filter_type) {
        if (!(this_present_filter_type && that_present_filter_type))
          return false;
        if (!this.filter_type.equals(that.filter_type))
          return false;
      }

      boolean this_present_filter_value = true && this.isSetFilter_value();
      boolean that_present_filter_value = true && that.isSetFilter_value();
      if (this_present_filter_value || that_present_filter_value) {
        if (!(this_present_filter_value && that_present_filter_value))
          return false;
        if (!this.filter_value.equals(that.filter_value))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_elections_home_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_elections_home_args typedOther = (get_elections_home_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter_type()).compareTo(typedOther.isSetFilter_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_type, typedOther.filter_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter_value()).compareTo(typedOther.isSetFilter_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_value, typedOther.filter_value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_elections_home_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter_type:");
      if (this.filter_type == null) {
        sb.append("null");
      } else {
        sb.append(this.filter_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter_value:");
      if (this.filter_value == null) {
        sb.append("null");
      } else {
        sb.append(this.filter_value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_elections_home_argsStandardSchemeFactory implements SchemeFactory {
      public get_elections_home_argsStandardScheme getScheme() {
        return new get_elections_home_argsStandardScheme();
      }
    }

    private static class get_elections_home_argsStandardScheme extends StandardScheme<get_elections_home_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_elections_home_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILTER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filter_type = iprot.readString();
                struct.setFilter_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILTER_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filter_value = iprot.readString();
                struct.setFilter_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_elections_home_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.filter_type != null) {
          oprot.writeFieldBegin(FILTER_TYPE_FIELD_DESC);
          oprot.writeString(struct.filter_type);
          oprot.writeFieldEnd();
        }
        if (struct.filter_value != null) {
          oprot.writeFieldBegin(FILTER_VALUE_FIELD_DESC);
          oprot.writeString(struct.filter_value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_elections_home_argsTupleSchemeFactory implements SchemeFactory {
      public get_elections_home_argsTupleScheme getScheme() {
        return new get_elections_home_argsTupleScheme();
      }
    }

    private static class get_elections_home_argsTupleScheme extends TupleScheme<get_elections_home_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_elections_home_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetFilter_type()) {
          optionals.set(1);
        }
        if (struct.isSetFilter_value()) {
          optionals.set(2);
        }
        if (struct.isSetCount()) {
          optionals.set(3);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetFilter_type()) {
          oprot.writeString(struct.filter_type);
        }
        if (struct.isSetFilter_value()) {
          oprot.writeString(struct.filter_value);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_elections_home_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.filter_type = iprot.readString();
          struct.setFilter_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.filter_value = iprot.readString();
          struct.setFilter_valueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(4)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
      }
    }

  }

  public static class get_elections_home_result implements org.apache.thrift.TBase<get_elections_home_result, get_elections_home_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_elections_home_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_elections_home_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_elections_home_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_elections_home_result.class, metaDataMap);
    }

    public get_elections_home_result() {
    }

    public get_elections_home_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_elections_home_result(get_elections_home_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_elections_home_result deepCopy() {
      return new get_elections_home_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_elections_home_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_elections_home_result)
        return this.equals((get_elections_home_result)that);
      return false;
    }

    public boolean equals(get_elections_home_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_elections_home_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_elections_home_result typedOther = (get_elections_home_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_elections_home_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_elections_home_resultStandardSchemeFactory implements SchemeFactory {
      public get_elections_home_resultStandardScheme getScheme() {
        return new get_elections_home_resultStandardScheme();
      }
    }

    private static class get_elections_home_resultStandardScheme extends StandardScheme<get_elections_home_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_elections_home_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_elections_home_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_elections_home_resultTupleSchemeFactory implements SchemeFactory {
      public get_elections_home_resultTupleScheme getScheme() {
        return new get_elections_home_resultTupleScheme();
      }
    }

    private static class get_elections_home_resultTupleScheme extends TupleScheme<get_elections_home_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_elections_home_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_elections_home_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_elections_more_args implements org.apache.thrift.TBase<get_elections_more_args, get_elections_more_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_elections_more_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILTER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_type", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILTER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_value", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_elections_more_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_elections_more_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String filter_type; // required
    public String filter_value; // required
    public String item_type; // required
    public int count; // required
    public int prev_cnt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      FILTER_TYPE((short)2, "filter_type"),
      FILTER_VALUE((short)3, "filter_value"),
      ITEM_TYPE((short)4, "item_type"),
      COUNT((short)5, "count"),
      PREV_CNT((short)6, "prev_cnt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // FILTER_TYPE
            return FILTER_TYPE;
          case 3: // FILTER_VALUE
            return FILTER_VALUE;
          case 4: // ITEM_TYPE
            return ITEM_TYPE;
          case 5: // COUNT
            return COUNT;
          case 6: // PREV_CNT
            return PREV_CNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILTER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("filter_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILTER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("filter_value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_elections_more_args.class, metaDataMap);
    }

    public get_elections_more_args() {
    }

    public get_elections_more_args(
      String user_name,
      String filter_type,
      String filter_value,
      String item_type,
      int count,
      int prev_cnt)
    {
      this();
      this.user_name = user_name;
      this.filter_type = filter_type;
      this.filter_value = filter_value;
      this.item_type = item_type;
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_elections_more_args(get_elections_more_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetFilter_type()) {
        this.filter_type = other.filter_type;
      }
      if (other.isSetFilter_value()) {
        this.filter_value = other.filter_value;
      }
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
    }

    public get_elections_more_args deepCopy() {
      return new get_elections_more_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.filter_type = null;
      this.filter_value = null;
      this.item_type = null;
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_elections_more_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getFilter_type() {
      return this.filter_type;
    }

    public get_elections_more_args setFilter_type(String filter_type) {
      this.filter_type = filter_type;
      return this;
    }

    public void unsetFilter_type() {
      this.filter_type = null;
    }

    /** Returns true if field filter_type is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter_type() {
      return this.filter_type != null;
    }

    public void setFilter_typeIsSet(boolean value) {
      if (!value) {
        this.filter_type = null;
      }
    }

    public String getFilter_value() {
      return this.filter_value;
    }

    public get_elections_more_args setFilter_value(String filter_value) {
      this.filter_value = filter_value;
      return this;
    }

    public void unsetFilter_value() {
      this.filter_value = null;
    }

    /** Returns true if field filter_value is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter_value() {
      return this.filter_value != null;
    }

    public void setFilter_valueIsSet(boolean value) {
      if (!value) {
        this.filter_value = null;
      }
    }

    public String getItem_type() {
      return this.item_type;
    }

    public get_elections_more_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public get_elections_more_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_elections_more_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case FILTER_TYPE:
        if (value == null) {
          unsetFilter_type();
        } else {
          setFilter_type((String)value);
        }
        break;

      case FILTER_VALUE:
        if (value == null) {
          unsetFilter_value();
        } else {
          setFilter_value((String)value);
        }
        break;

      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case FILTER_TYPE:
        return getFilter_type();

      case FILTER_VALUE:
        return getFilter_value();

      case ITEM_TYPE:
        return getItem_type();

      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case FILTER_TYPE:
        return isSetFilter_type();
      case FILTER_VALUE:
        return isSetFilter_value();
      case ITEM_TYPE:
        return isSetItem_type();
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_elections_more_args)
        return this.equals((get_elections_more_args)that);
      return false;
    }

    public boolean equals(get_elections_more_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_filter_type = true && this.isSetFilter_type();
      boolean that_present_filter_type = true && that.isSetFilter_type();
      if (this_present_filter_type || that_present_filter_type) {
        if (!(this_present_filter_type && that_present_filter_type))
          return false;
        if (!this.filter_type.equals(that.filter_type))
          return false;
      }

      boolean this_present_filter_value = true && this.isSetFilter_value();
      boolean that_present_filter_value = true && that.isSetFilter_value();
      if (this_present_filter_value || that_present_filter_value) {
        if (!(this_present_filter_value && that_present_filter_value))
          return false;
        if (!this.filter_value.equals(that.filter_value))
          return false;
      }

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_elections_more_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_elections_more_args typedOther = (get_elections_more_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter_type()).compareTo(typedOther.isSetFilter_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_type, typedOther.filter_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter_value()).compareTo(typedOther.isSetFilter_value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter_value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_value, typedOther.filter_value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_elections_more_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter_type:");
      if (this.filter_type == null) {
        sb.append("null");
      } else {
        sb.append(this.filter_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter_value:");
      if (this.filter_value == null) {
        sb.append("null");
      } else {
        sb.append(this.filter_value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_elections_more_argsStandardSchemeFactory implements SchemeFactory {
      public get_elections_more_argsStandardScheme getScheme() {
        return new get_elections_more_argsStandardScheme();
      }
    }

    private static class get_elections_more_argsStandardScheme extends StandardScheme<get_elections_more_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_elections_more_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILTER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filter_type = iprot.readString();
                struct.setFilter_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILTER_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filter_value = iprot.readString();
                struct.setFilter_valueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_elections_more_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.filter_type != null) {
          oprot.writeFieldBegin(FILTER_TYPE_FIELD_DESC);
          oprot.writeString(struct.filter_type);
          oprot.writeFieldEnd();
        }
        if (struct.filter_value != null) {
          oprot.writeFieldBegin(FILTER_VALUE_FIELD_DESC);
          oprot.writeString(struct.filter_value);
          oprot.writeFieldEnd();
        }
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_elections_more_argsTupleSchemeFactory implements SchemeFactory {
      public get_elections_more_argsTupleScheme getScheme() {
        return new get_elections_more_argsTupleScheme();
      }
    }

    private static class get_elections_more_argsTupleScheme extends TupleScheme<get_elections_more_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_elections_more_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetFilter_type()) {
          optionals.set(1);
        }
        if (struct.isSetFilter_value()) {
          optionals.set(2);
        }
        if (struct.isSetItem_type()) {
          optionals.set(3);
        }
        if (struct.isSetCount()) {
          optionals.set(4);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetFilter_type()) {
          oprot.writeString(struct.filter_type);
        }
        if (struct.isSetFilter_value()) {
          oprot.writeString(struct.filter_value);
        }
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_elections_more_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.filter_type = iprot.readString();
          struct.setFilter_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.filter_value = iprot.readString();
          struct.setFilter_valueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(5)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
      }
    }

  }

  public static class get_elections_more_result implements org.apache.thrift.TBase<get_elections_more_result, get_elections_more_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_elections_more_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_elections_more_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_elections_more_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_elections_more_result.class, metaDataMap);
    }

    public get_elections_more_result() {
    }

    public get_elections_more_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_elections_more_result(get_elections_more_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_elections_more_result deepCopy() {
      return new get_elections_more_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_elections_more_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_elections_more_result)
        return this.equals((get_elections_more_result)that);
      return false;
    }

    public boolean equals(get_elections_more_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_elections_more_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_elections_more_result typedOther = (get_elections_more_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_elections_more_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_elections_more_resultStandardSchemeFactory implements SchemeFactory {
      public get_elections_more_resultStandardScheme getScheme() {
        return new get_elections_more_resultStandardScheme();
      }
    }

    private static class get_elections_more_resultStandardScheme extends StandardScheme<get_elections_more_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_elections_more_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_elections_more_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_elections_more_resultTupleSchemeFactory implements SchemeFactory {
      public get_elections_more_resultTupleScheme getScheme() {
        return new get_elections_more_resultTupleScheme();
      }
    }

    private static class get_elections_more_resultTupleScheme extends TupleScheme<get_elections_more_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_elections_more_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_elections_more_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_article_args implements org.apache.thrift.TBase<delete_article_args, delete_article_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_article_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_article_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_article_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_article_args.class, metaDataMap);
    }

    public delete_article_args() {
    }

    public delete_article_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_article_args(delete_article_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public delete_article_args deepCopy() {
      return new delete_article_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public delete_article_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_article_args)
        return this.equals((delete_article_args)that);
      return false;
    }

    public boolean equals(delete_article_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_article_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_article_args typedOther = (delete_article_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_article_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_article_argsStandardSchemeFactory implements SchemeFactory {
      public delete_article_argsStandardScheme getScheme() {
        return new delete_article_argsStandardScheme();
      }
    }

    private static class delete_article_argsStandardScheme extends StandardScheme<delete_article_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_article_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_article_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_article_argsTupleSchemeFactory implements SchemeFactory {
      public delete_article_argsTupleScheme getScheme() {
        return new delete_article_argsTupleScheme();
      }
    }

    private static class delete_article_argsTupleScheme extends TupleScheme<delete_article_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_article_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_article_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class delete_article_result implements org.apache.thrift.TBase<delete_article_result, delete_article_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_article_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_article_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_article_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_article_result.class, metaDataMap);
    }

    public delete_article_result() {
    }

    public delete_article_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_article_result(delete_article_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public delete_article_result deepCopy() {
      return new delete_article_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delete_article_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_article_result)
        return this.equals((delete_article_result)that);
      return false;
    }

    public boolean equals(delete_article_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_article_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_article_result typedOther = (delete_article_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_article_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_article_resultStandardSchemeFactory implements SchemeFactory {
      public delete_article_resultStandardScheme getScheme() {
        return new delete_article_resultStandardScheme();
      }
    }

    private static class delete_article_resultStandardScheme extends StandardScheme<delete_article_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_article_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_article_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_article_resultTupleSchemeFactory implements SchemeFactory {
      public delete_article_resultTupleScheme getScheme() {
        return new delete_article_resultTupleScheme();
      }
    }

    private static class delete_article_resultTupleScheme extends TupleScheme<delete_article_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_article_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_article_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_space_args implements org.apache.thrift.TBase<delete_space_args, delete_space_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_space_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_space_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_space_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_space_args.class, metaDataMap);
    }

    public delete_space_args() {
    }

    public delete_space_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_space_args(delete_space_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public delete_space_args deepCopy() {
      return new delete_space_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public delete_space_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_space_args)
        return this.equals((delete_space_args)that);
      return false;
    }

    public boolean equals(delete_space_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_space_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_space_args typedOther = (delete_space_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_space_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_space_argsStandardSchemeFactory implements SchemeFactory {
      public delete_space_argsStandardScheme getScheme() {
        return new delete_space_argsStandardScheme();
      }
    }

    private static class delete_space_argsStandardScheme extends StandardScheme<delete_space_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_space_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_space_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_space_argsTupleSchemeFactory implements SchemeFactory {
      public delete_space_argsTupleScheme getScheme() {
        return new delete_space_argsTupleScheme();
      }
    }

    private static class delete_space_argsTupleScheme extends TupleScheme<delete_space_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_space_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_space_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class delete_space_result implements org.apache.thrift.TBase<delete_space_result, delete_space_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_space_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_space_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_space_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_space_result.class, metaDataMap);
    }

    public delete_space_result() {
    }

    public delete_space_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_space_result(delete_space_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public delete_space_result deepCopy() {
      return new delete_space_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delete_space_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_space_result)
        return this.equals((delete_space_result)that);
      return false;
    }

    public boolean equals(delete_space_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_space_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_space_result typedOther = (delete_space_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_space_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_space_resultStandardSchemeFactory implements SchemeFactory {
      public delete_space_resultStandardScheme getScheme() {
        return new delete_space_resultStandardScheme();
      }
    }

    private static class delete_space_resultStandardScheme extends StandardScheme<delete_space_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_space_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_space_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_space_resultTupleSchemeFactory implements SchemeFactory {
      public delete_space_resultTupleScheme getScheme() {
        return new delete_space_resultTupleScheme();
      }
    }

    private static class delete_space_resultTupleScheme extends TupleScheme<delete_space_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_space_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_space_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_poll_args implements org.apache.thrift.TBase<delete_poll_args, delete_poll_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_poll_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_poll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_poll_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_poll_args.class, metaDataMap);
    }

    public delete_poll_args() {
    }

    public delete_poll_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_poll_args(delete_poll_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public delete_poll_args deepCopy() {
      return new delete_poll_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public delete_poll_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_poll_args)
        return this.equals((delete_poll_args)that);
      return false;
    }

    public boolean equals(delete_poll_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_poll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_poll_args typedOther = (delete_poll_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_poll_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_poll_argsStandardSchemeFactory implements SchemeFactory {
      public delete_poll_argsStandardScheme getScheme() {
        return new delete_poll_argsStandardScheme();
      }
    }

    private static class delete_poll_argsStandardScheme extends StandardScheme<delete_poll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_poll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_poll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_poll_argsTupleSchemeFactory implements SchemeFactory {
      public delete_poll_argsTupleScheme getScheme() {
        return new delete_poll_argsTupleScheme();
      }
    }

    private static class delete_poll_argsTupleScheme extends TupleScheme<delete_poll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_poll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_poll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class delete_poll_result implements org.apache.thrift.TBase<delete_poll_result, delete_poll_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_poll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_poll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_poll_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_poll_result.class, metaDataMap);
    }

    public delete_poll_result() {
    }

    public delete_poll_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_poll_result(delete_poll_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public delete_poll_result deepCopy() {
      return new delete_poll_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delete_poll_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_poll_result)
        return this.equals((delete_poll_result)that);
      return false;
    }

    public boolean equals(delete_poll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_poll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_poll_result typedOther = (delete_poll_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_poll_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_poll_resultStandardSchemeFactory implements SchemeFactory {
      public delete_poll_resultStandardScheme getScheme() {
        return new delete_poll_resultStandardScheme();
      }
    }

    private static class delete_poll_resultStandardScheme extends StandardScheme<delete_poll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_poll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_poll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_poll_resultTupleSchemeFactory implements SchemeFactory {
      public delete_poll_resultTupleScheme getScheme() {
        return new delete_poll_resultTupleScheme();
      }
    }

    private static class delete_poll_resultTupleScheme extends TupleScheme<delete_poll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_poll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_poll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_userfeed_args implements org.apache.thrift.TBase<get_userfeed_args, get_userfeed_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_userfeed_args");

    private static final org.apache.thrift.protocol.TField FEED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("feed_type", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_userfeed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_userfeed_argsTupleSchemeFactory());
    }

    public String feed_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FEED_TYPE((short)1, "feed_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FEED_TYPE
            return FEED_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FEED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("feed_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_userfeed_args.class, metaDataMap);
    }

    public get_userfeed_args() {
    }

    public get_userfeed_args(
      String feed_type)
    {
      this();
      this.feed_type = feed_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_userfeed_args(get_userfeed_args other) {
      if (other.isSetFeed_type()) {
        this.feed_type = other.feed_type;
      }
    }

    public get_userfeed_args deepCopy() {
      return new get_userfeed_args(this);
    }

    @Override
    public void clear() {
      this.feed_type = null;
    }

    public String getFeed_type() {
      return this.feed_type;
    }

    public get_userfeed_args setFeed_type(String feed_type) {
      this.feed_type = feed_type;
      return this;
    }

    public void unsetFeed_type() {
      this.feed_type = null;
    }

    /** Returns true if field feed_type is set (has been assigned a value) and false otherwise */
    public boolean isSetFeed_type() {
      return this.feed_type != null;
    }

    public void setFeed_typeIsSet(boolean value) {
      if (!value) {
        this.feed_type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FEED_TYPE:
        if (value == null) {
          unsetFeed_type();
        } else {
          setFeed_type((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FEED_TYPE:
        return getFeed_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FEED_TYPE:
        return isSetFeed_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_userfeed_args)
        return this.equals((get_userfeed_args)that);
      return false;
    }

    public boolean equals(get_userfeed_args that) {
      if (that == null)
        return false;

      boolean this_present_feed_type = true && this.isSetFeed_type();
      boolean that_present_feed_type = true && that.isSetFeed_type();
      if (this_present_feed_type || that_present_feed_type) {
        if (!(this_present_feed_type && that_present_feed_type))
          return false;
        if (!this.feed_type.equals(that.feed_type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_userfeed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_userfeed_args typedOther = (get_userfeed_args)other;

      lastComparison = Boolean.valueOf(isSetFeed_type()).compareTo(typedOther.isSetFeed_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeed_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feed_type, typedOther.feed_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_userfeed_args(");
      boolean first = true;

      sb.append("feed_type:");
      if (this.feed_type == null) {
        sb.append("null");
      } else {
        sb.append(this.feed_type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_userfeed_argsStandardSchemeFactory implements SchemeFactory {
      public get_userfeed_argsStandardScheme getScheme() {
        return new get_userfeed_argsStandardScheme();
      }
    }

    private static class get_userfeed_argsStandardScheme extends StandardScheme<get_userfeed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_userfeed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FEED_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feed_type = iprot.readString();
                struct.setFeed_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_userfeed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.feed_type != null) {
          oprot.writeFieldBegin(FEED_TYPE_FIELD_DESC);
          oprot.writeString(struct.feed_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_userfeed_argsTupleSchemeFactory implements SchemeFactory {
      public get_userfeed_argsTupleScheme getScheme() {
        return new get_userfeed_argsTupleScheme();
      }
    }

    private static class get_userfeed_argsTupleScheme extends TupleScheme<get_userfeed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_userfeed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFeed_type()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFeed_type()) {
          oprot.writeString(struct.feed_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_userfeed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.feed_type = iprot.readString();
          struct.setFeed_typeIsSet(true);
        }
      }
    }

  }

  public static class get_userfeed_result implements org.apache.thrift.TBase<get_userfeed_result, get_userfeed_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_userfeed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_userfeed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_userfeed_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_userfeed_result.class, metaDataMap);
    }

    public get_userfeed_result() {
    }

    public get_userfeed_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_userfeed_result(get_userfeed_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_userfeed_result deepCopy() {
      return new get_userfeed_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_userfeed_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_userfeed_result)
        return this.equals((get_userfeed_result)that);
      return false;
    }

    public boolean equals(get_userfeed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_userfeed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_userfeed_result typedOther = (get_userfeed_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_userfeed_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_userfeed_resultStandardSchemeFactory implements SchemeFactory {
      public get_userfeed_resultStandardScheme getScheme() {
        return new get_userfeed_resultStandardScheme();
      }
    }

    private static class get_userfeed_resultStandardScheme extends StandardScheme<get_userfeed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_userfeed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_userfeed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_userfeed_resultTupleSchemeFactory implements SchemeFactory {
      public get_userfeed_resultTupleScheme getScheme() {
        return new get_userfeed_resultTupleScheme();
      }
    }

    private static class get_userfeed_resultTupleScheme extends TupleScheme<get_userfeed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_userfeed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_userfeed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_itemfeed_args implements org.apache.thrift.TBase<get_itemfeed_args, get_itemfeed_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_itemfeed_args");

    private static final org.apache.thrift.protocol.TField FEED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("feed_type", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_itemfeed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_itemfeed_argsTupleSchemeFactory());
    }

    public String feed_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FEED_TYPE((short)1, "feed_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FEED_TYPE
            return FEED_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FEED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("feed_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_itemfeed_args.class, metaDataMap);
    }

    public get_itemfeed_args() {
    }

    public get_itemfeed_args(
      String feed_type)
    {
      this();
      this.feed_type = feed_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_itemfeed_args(get_itemfeed_args other) {
      if (other.isSetFeed_type()) {
        this.feed_type = other.feed_type;
      }
    }

    public get_itemfeed_args deepCopy() {
      return new get_itemfeed_args(this);
    }

    @Override
    public void clear() {
      this.feed_type = null;
    }

    public String getFeed_type() {
      return this.feed_type;
    }

    public get_itemfeed_args setFeed_type(String feed_type) {
      this.feed_type = feed_type;
      return this;
    }

    public void unsetFeed_type() {
      this.feed_type = null;
    }

    /** Returns true if field feed_type is set (has been assigned a value) and false otherwise */
    public boolean isSetFeed_type() {
      return this.feed_type != null;
    }

    public void setFeed_typeIsSet(boolean value) {
      if (!value) {
        this.feed_type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FEED_TYPE:
        if (value == null) {
          unsetFeed_type();
        } else {
          setFeed_type((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FEED_TYPE:
        return getFeed_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FEED_TYPE:
        return isSetFeed_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_itemfeed_args)
        return this.equals((get_itemfeed_args)that);
      return false;
    }

    public boolean equals(get_itemfeed_args that) {
      if (that == null)
        return false;

      boolean this_present_feed_type = true && this.isSetFeed_type();
      boolean that_present_feed_type = true && that.isSetFeed_type();
      if (this_present_feed_type || that_present_feed_type) {
        if (!(this_present_feed_type && that_present_feed_type))
          return false;
        if (!this.feed_type.equals(that.feed_type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_itemfeed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_itemfeed_args typedOther = (get_itemfeed_args)other;

      lastComparison = Boolean.valueOf(isSetFeed_type()).compareTo(typedOther.isSetFeed_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeed_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feed_type, typedOther.feed_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_itemfeed_args(");
      boolean first = true;

      sb.append("feed_type:");
      if (this.feed_type == null) {
        sb.append("null");
      } else {
        sb.append(this.feed_type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_itemfeed_argsStandardSchemeFactory implements SchemeFactory {
      public get_itemfeed_argsStandardScheme getScheme() {
        return new get_itemfeed_argsStandardScheme();
      }
    }

    private static class get_itemfeed_argsStandardScheme extends StandardScheme<get_itemfeed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_itemfeed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FEED_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feed_type = iprot.readString();
                struct.setFeed_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_itemfeed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.feed_type != null) {
          oprot.writeFieldBegin(FEED_TYPE_FIELD_DESC);
          oprot.writeString(struct.feed_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_itemfeed_argsTupleSchemeFactory implements SchemeFactory {
      public get_itemfeed_argsTupleScheme getScheme() {
        return new get_itemfeed_argsTupleScheme();
      }
    }

    private static class get_itemfeed_argsTupleScheme extends TupleScheme<get_itemfeed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_itemfeed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFeed_type()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFeed_type()) {
          oprot.writeString(struct.feed_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_itemfeed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.feed_type = iprot.readString();
          struct.setFeed_typeIsSet(true);
        }
      }
    }

  }

  public static class get_itemfeed_result implements org.apache.thrift.TBase<get_itemfeed_result, get_itemfeed_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_itemfeed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_itemfeed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_itemfeed_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_itemfeed_result.class, metaDataMap);
    }

    public get_itemfeed_result() {
    }

    public get_itemfeed_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_itemfeed_result(get_itemfeed_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_itemfeed_result deepCopy() {
      return new get_itemfeed_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_itemfeed_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_itemfeed_result)
        return this.equals((get_itemfeed_result)that);
      return false;
    }

    public boolean equals(get_itemfeed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_itemfeed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_itemfeed_result typedOther = (get_itemfeed_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_itemfeed_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_itemfeed_resultStandardSchemeFactory implements SchemeFactory {
      public get_itemfeed_resultStandardScheme getScheme() {
        return new get_itemfeed_resultStandardScheme();
      }
    }

    private static class get_itemfeed_resultStandardScheme extends StandardScheme<get_itemfeed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_itemfeed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_itemfeed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_itemfeed_resultTupleSchemeFactory implements SchemeFactory {
      public get_itemfeed_resultTupleScheme getScheme() {
        return new get_itemfeed_resultTupleScheme();
      }
    }

    private static class get_itemfeed_resultTupleScheme extends TupleScheme<get_itemfeed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_itemfeed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_itemfeed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_trends_args implements org.apache.thrift.TBase<get_trends_args, get_trends_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_trends_args");

    private static final org.apache.thrift.protocol.TField CAT_FIELD_DESC = new org.apache.thrift.protocol.TField("cat", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_trends_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_trends_argsTupleSchemeFactory());
    }

    public String cat; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CAT((short)1, "cat");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CAT
            return CAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CAT, new org.apache.thrift.meta_data.FieldMetaData("cat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_trends_args.class, metaDataMap);
    }

    public get_trends_args() {
    }

    public get_trends_args(
      String cat)
    {
      this();
      this.cat = cat;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_trends_args(get_trends_args other) {
      if (other.isSetCat()) {
        this.cat = other.cat;
      }
    }

    public get_trends_args deepCopy() {
      return new get_trends_args(this);
    }

    @Override
    public void clear() {
      this.cat = null;
    }

    public String getCat() {
      return this.cat;
    }

    public get_trends_args setCat(String cat) {
      this.cat = cat;
      return this;
    }

    public void unsetCat() {
      this.cat = null;
    }

    /** Returns true if field cat is set (has been assigned a value) and false otherwise */
    public boolean isSetCat() {
      return this.cat != null;
    }

    public void setCatIsSet(boolean value) {
      if (!value) {
        this.cat = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CAT:
        if (value == null) {
          unsetCat();
        } else {
          setCat((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CAT:
        return getCat();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CAT:
        return isSetCat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_trends_args)
        return this.equals((get_trends_args)that);
      return false;
    }

    public boolean equals(get_trends_args that) {
      if (that == null)
        return false;

      boolean this_present_cat = true && this.isSetCat();
      boolean that_present_cat = true && that.isSetCat();
      if (this_present_cat || that_present_cat) {
        if (!(this_present_cat && that_present_cat))
          return false;
        if (!this.cat.equals(that.cat))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_trends_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_trends_args typedOther = (get_trends_args)other;

      lastComparison = Boolean.valueOf(isSetCat()).compareTo(typedOther.isSetCat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cat, typedOther.cat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_trends_args(");
      boolean first = true;

      sb.append("cat:");
      if (this.cat == null) {
        sb.append("null");
      } else {
        sb.append(this.cat);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_trends_argsStandardSchemeFactory implements SchemeFactory {
      public get_trends_argsStandardScheme getScheme() {
        return new get_trends_argsStandardScheme();
      }
    }

    private static class get_trends_argsStandardScheme extends StandardScheme<get_trends_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_trends_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cat = iprot.readString();
                struct.setCatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_trends_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cat != null) {
          oprot.writeFieldBegin(CAT_FIELD_DESC);
          oprot.writeString(struct.cat);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_trends_argsTupleSchemeFactory implements SchemeFactory {
      public get_trends_argsTupleScheme getScheme() {
        return new get_trends_argsTupleScheme();
      }
    }

    private static class get_trends_argsTupleScheme extends TupleScheme<get_trends_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_trends_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCat()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCat()) {
          oprot.writeString(struct.cat);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_trends_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cat = iprot.readString();
          struct.setCatIsSet(true);
        }
      }
    }

  }

  public static class get_trends_result implements org.apache.thrift.TBase<get_trends_result, get_trends_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_trends_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_trends_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_trends_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_trends_result.class, metaDataMap);
    }

    public get_trends_result() {
    }

    public get_trends_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_trends_result(get_trends_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_trends_result deepCopy() {
      return new get_trends_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_trends_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_trends_result)
        return this.equals((get_trends_result)that);
      return false;
    }

    public boolean equals(get_trends_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_trends_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_trends_result typedOther = (get_trends_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_trends_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_trends_resultStandardSchemeFactory implements SchemeFactory {
      public get_trends_resultStandardScheme getScheme() {
        return new get_trends_resultStandardScheme();
      }
    }

    private static class get_trends_resultStandardScheme extends StandardScheme<get_trends_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_trends_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_trends_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_trends_resultTupleSchemeFactory implements SchemeFactory {
      public get_trends_resultTupleScheme getScheme() {
        return new get_trends_resultTupleScheme();
      }
    }

    private static class get_trends_resultTupleScheme extends TupleScheme<get_trends_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_trends_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_trends_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class suggestions_args implements org.apache.thrift.TBase<suggestions_args, suggestions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("suggestions_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CAT_FIELD_DESC = new org.apache.thrift.protocol.TField("cat", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField HASHTAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("hashtags", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new suggestions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new suggestions_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String item_id; // required
    public String content; // required
    public String cat; // required
    public String hashtags; // required
    public int count; // required
    public int prev_cnt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ITEM_ID((short)2, "item_id"),
      CONTENT((short)3, "content"),
      CAT((short)4, "cat"),
      HASHTAGS((short)5, "hashtags"),
      COUNT((short)6, "count"),
      PREV_CNT((short)7, "prev_cnt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          case 3: // CONTENT
            return CONTENT;
          case 4: // CAT
            return CAT;
          case 5: // HASHTAGS
            return HASHTAGS;
          case 6: // COUNT
            return COUNT;
          case 7: // PREV_CNT
            return PREV_CNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CAT, new org.apache.thrift.meta_data.FieldMetaData("cat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HASHTAGS, new org.apache.thrift.meta_data.FieldMetaData("hashtags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(suggestions_args.class, metaDataMap);
    }

    public suggestions_args() {
    }

    public suggestions_args(
      String item_type,
      String item_id,
      String content,
      String cat,
      String hashtags,
      int count,
      int prev_cnt)
    {
      this();
      this.item_type = item_type;
      this.item_id = item_id;
      this.content = content;
      this.cat = cat;
      this.hashtags = hashtags;
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public suggestions_args(suggestions_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetCat()) {
        this.cat = other.cat;
      }
      if (other.isSetHashtags()) {
        this.hashtags = other.hashtags;
      }
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
    }

    public suggestions_args deepCopy() {
      return new suggestions_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.item_id = null;
      this.content = null;
      this.cat = null;
      this.hashtags = null;
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public suggestions_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public suggestions_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public suggestions_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public String getCat() {
      return this.cat;
    }

    public suggestions_args setCat(String cat) {
      this.cat = cat;
      return this;
    }

    public void unsetCat() {
      this.cat = null;
    }

    /** Returns true if field cat is set (has been assigned a value) and false otherwise */
    public boolean isSetCat() {
      return this.cat != null;
    }

    public void setCatIsSet(boolean value) {
      if (!value) {
        this.cat = null;
      }
    }

    public String getHashtags() {
      return this.hashtags;
    }

    public suggestions_args setHashtags(String hashtags) {
      this.hashtags = hashtags;
      return this;
    }

    public void unsetHashtags() {
      this.hashtags = null;
    }

    /** Returns true if field hashtags is set (has been assigned a value) and false otherwise */
    public boolean isSetHashtags() {
      return this.hashtags != null;
    }

    public void setHashtagsIsSet(boolean value) {
      if (!value) {
        this.hashtags = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public suggestions_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public suggestions_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case CAT:
        if (value == null) {
          unsetCat();
        } else {
          setCat((String)value);
        }
        break;

      case HASHTAGS:
        if (value == null) {
          unsetHashtags();
        } else {
          setHashtags((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      case CONTENT:
        return getContent();

      case CAT:
        return getCat();

      case HASHTAGS:
        return getHashtags();

      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      case CONTENT:
        return isSetContent();
      case CAT:
        return isSetCat();
      case HASHTAGS:
        return isSetHashtags();
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof suggestions_args)
        return this.equals((suggestions_args)that);
      return false;
    }

    public boolean equals(suggestions_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_cat = true && this.isSetCat();
      boolean that_present_cat = true && that.isSetCat();
      if (this_present_cat || that_present_cat) {
        if (!(this_present_cat && that_present_cat))
          return false;
        if (!this.cat.equals(that.cat))
          return false;
      }

      boolean this_present_hashtags = true && this.isSetHashtags();
      boolean that_present_hashtags = true && that.isSetHashtags();
      if (this_present_hashtags || that_present_hashtags) {
        if (!(this_present_hashtags && that_present_hashtags))
          return false;
        if (!this.hashtags.equals(that.hashtags))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(suggestions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      suggestions_args typedOther = (suggestions_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCat()).compareTo(typedOther.isSetCat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cat, typedOther.cat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHashtags()).compareTo(typedOther.isSetHashtags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHashtags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashtags, typedOther.hashtags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("suggestions_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cat:");
      if (this.cat == null) {
        sb.append("null");
      } else {
        sb.append(this.cat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hashtags:");
      if (this.hashtags == null) {
        sb.append("null");
      } else {
        sb.append(this.hashtags);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class suggestions_argsStandardSchemeFactory implements SchemeFactory {
      public suggestions_argsStandardScheme getScheme() {
        return new suggestions_argsStandardScheme();
      }
    }

    private static class suggestions_argsStandardScheme extends StandardScheme<suggestions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, suggestions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cat = iprot.readString();
                struct.setCatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // HASHTAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hashtags = iprot.readString();
                struct.setHashtagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, suggestions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.cat != null) {
          oprot.writeFieldBegin(CAT_FIELD_DESC);
          oprot.writeString(struct.cat);
          oprot.writeFieldEnd();
        }
        if (struct.hashtags != null) {
          oprot.writeFieldBegin(HASHTAGS_FIELD_DESC);
          oprot.writeString(struct.hashtags);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class suggestions_argsTupleSchemeFactory implements SchemeFactory {
      public suggestions_argsTupleScheme getScheme() {
        return new suggestions_argsTupleScheme();
      }
    }

    private static class suggestions_argsTupleScheme extends TupleScheme<suggestions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, suggestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetItem_id()) {
          optionals.set(1);
        }
        if (struct.isSetContent()) {
          optionals.set(2);
        }
        if (struct.isSetCat()) {
          optionals.set(3);
        }
        if (struct.isSetHashtags()) {
          optionals.set(4);
        }
        if (struct.isSetCount()) {
          optionals.set(5);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetCat()) {
          oprot.writeString(struct.cat);
        }
        if (struct.isSetHashtags()) {
          oprot.writeString(struct.hashtags);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, suggestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.cat = iprot.readString();
          struct.setCatIsSet(true);
        }
        if (incoming.get(4)) {
          struct.hashtags = iprot.readString();
          struct.setHashtagsIsSet(true);
        }
        if (incoming.get(5)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(6)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
      }
    }

  }

  public static class suggestions_result implements org.apache.thrift.TBase<suggestions_result, suggestions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("suggestions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new suggestions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new suggestions_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(suggestions_result.class, metaDataMap);
    }

    public suggestions_result() {
    }

    public suggestions_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public suggestions_result(suggestions_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public suggestions_result deepCopy() {
      return new suggestions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public suggestions_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof suggestions_result)
        return this.equals((suggestions_result)that);
      return false;
    }

    public boolean equals(suggestions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(suggestions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      suggestions_result typedOther = (suggestions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("suggestions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class suggestions_resultStandardSchemeFactory implements SchemeFactory {
      public suggestions_resultStandardScheme getScheme() {
        return new suggestions_resultStandardScheme();
      }
    }

    private static class suggestions_resultStandardScheme extends StandardScheme<suggestions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, suggestions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, suggestions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class suggestions_resultTupleSchemeFactory implements SchemeFactory {
      public suggestions_resultTupleScheme getScheme() {
        return new suggestions_resultTupleScheme();
      }
    }

    private static class suggestions_resultTupleScheme extends TupleScheme<suggestions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, suggestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, suggestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class suggestions_morenames_args implements org.apache.thrift.TBase<suggestions_morenames_args, suggestions_morenames_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("suggestions_morenames_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new suggestions_morenames_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new suggestions_morenames_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String item_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ITEM_ID((short)2, "item_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(suggestions_morenames_args.class, metaDataMap);
    }

    public suggestions_morenames_args() {
    }

    public suggestions_morenames_args(
      String item_type,
      String item_id)
    {
      this();
      this.item_type = item_type;
      this.item_id = item_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public suggestions_morenames_args(suggestions_morenames_args other) {
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
    }

    public suggestions_morenames_args deepCopy() {
      return new suggestions_morenames_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.item_id = null;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public suggestions_morenames_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public suggestions_morenames_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof suggestions_morenames_args)
        return this.equals((suggestions_morenames_args)that);
      return false;
    }

    public boolean equals(suggestions_morenames_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(suggestions_morenames_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      suggestions_morenames_args typedOther = (suggestions_morenames_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("suggestions_morenames_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class suggestions_morenames_argsStandardSchemeFactory implements SchemeFactory {
      public suggestions_morenames_argsStandardScheme getScheme() {
        return new suggestions_morenames_argsStandardScheme();
      }
    }

    private static class suggestions_morenames_argsStandardScheme extends StandardScheme<suggestions_morenames_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, suggestions_morenames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, suggestions_morenames_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class suggestions_morenames_argsTupleSchemeFactory implements SchemeFactory {
      public suggestions_morenames_argsTupleScheme getScheme() {
        return new suggestions_morenames_argsTupleScheme();
      }
    }

    private static class suggestions_morenames_argsTupleScheme extends TupleScheme<suggestions_morenames_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, suggestions_morenames_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetItem_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, suggestions_morenames_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
      }
    }

  }

  public static class suggestions_morenames_result implements org.apache.thrift.TBase<suggestions_morenames_result, suggestions_morenames_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("suggestions_morenames_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new suggestions_morenames_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new suggestions_morenames_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(suggestions_morenames_result.class, metaDataMap);
    }

    public suggestions_morenames_result() {
    }

    public suggestions_morenames_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public suggestions_morenames_result(suggestions_morenames_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public suggestions_morenames_result deepCopy() {
      return new suggestions_morenames_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public suggestions_morenames_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof suggestions_morenames_result)
        return this.equals((suggestions_morenames_result)that);
      return false;
    }

    public boolean equals(suggestions_morenames_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(suggestions_morenames_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      suggestions_morenames_result typedOther = (suggestions_morenames_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("suggestions_morenames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class suggestions_morenames_resultStandardSchemeFactory implements SchemeFactory {
      public suggestions_morenames_resultStandardScheme getScheme() {
        return new suggestions_morenames_resultStandardScheme();
      }
    }

    private static class suggestions_morenames_resultStandardScheme extends StandardScheme<suggestions_morenames_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, suggestions_morenames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, suggestions_morenames_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class suggestions_morenames_resultTupleSchemeFactory implements SchemeFactory {
      public suggestions_morenames_resultTupleScheme getScheme() {
        return new suggestions_morenames_resultTupleScheme();
      }
    }

    private static class suggestions_morenames_resultTupleScheme extends TupleScheme<suggestions_morenames_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, suggestions_morenames_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, suggestions_morenames_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class view_suggestions_args implements org.apache.thrift.TBase<view_suggestions_args, view_suggestions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("view_suggestions_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField A_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("a_ids", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField HASHTAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("hashtags", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new view_suggestions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new view_suggestions_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String item_id; // required
    public String a_ids; // required
    public int count; // required
    public String user_name; // required
    public String hashtags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ITEM_ID((short)2, "item_id"),
      A_IDS((short)3, "a_ids"),
      COUNT((short)4, "count"),
      USER_NAME((short)5, "user_name"),
      HASHTAGS((short)6, "hashtags");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          case 3: // A_IDS
            return A_IDS;
          case 4: // COUNT
            return COUNT;
          case 5: // USER_NAME
            return USER_NAME;
          case 6: // HASHTAGS
            return HASHTAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.A_IDS, new org.apache.thrift.meta_data.FieldMetaData("a_ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HASHTAGS, new org.apache.thrift.meta_data.FieldMetaData("hashtags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(view_suggestions_args.class, metaDataMap);
    }

    public view_suggestions_args() {
    }

    public view_suggestions_args(
      String item_type,
      String item_id,
      String a_ids,
      int count,
      String user_name,
      String hashtags)
    {
      this();
      this.item_type = item_type;
      this.item_id = item_id;
      this.a_ids = a_ids;
      this.count = count;
      setCountIsSet(true);
      this.user_name = user_name;
      this.hashtags = hashtags;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public view_suggestions_args(view_suggestions_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
      if (other.isSetA_ids()) {
        this.a_ids = other.a_ids;
      }
      this.count = other.count;
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetHashtags()) {
        this.hashtags = other.hashtags;
      }
    }

    public view_suggestions_args deepCopy() {
      return new view_suggestions_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.item_id = null;
      this.a_ids = null;
      setCountIsSet(false);
      this.count = 0;
      this.user_name = null;
      this.hashtags = null;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public view_suggestions_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public view_suggestions_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public String getA_ids() {
      return this.a_ids;
    }

    public view_suggestions_args setA_ids(String a_ids) {
      this.a_ids = a_ids;
      return this;
    }

    public void unsetA_ids() {
      this.a_ids = null;
    }

    /** Returns true if field a_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetA_ids() {
      return this.a_ids != null;
    }

    public void setA_idsIsSet(boolean value) {
      if (!value) {
        this.a_ids = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public view_suggestions_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public String getUser_name() {
      return this.user_name;
    }

    public view_suggestions_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getHashtags() {
      return this.hashtags;
    }

    public view_suggestions_args setHashtags(String hashtags) {
      this.hashtags = hashtags;
      return this;
    }

    public void unsetHashtags() {
      this.hashtags = null;
    }

    /** Returns true if field hashtags is set (has been assigned a value) and false otherwise */
    public boolean isSetHashtags() {
      return this.hashtags != null;
    }

    public void setHashtagsIsSet(boolean value) {
      if (!value) {
        this.hashtags = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      case A_IDS:
        if (value == null) {
          unsetA_ids();
        } else {
          setA_ids((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case HASHTAGS:
        if (value == null) {
          unsetHashtags();
        } else {
          setHashtags((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      case A_IDS:
        return getA_ids();

      case COUNT:
        return Integer.valueOf(getCount());

      case USER_NAME:
        return getUser_name();

      case HASHTAGS:
        return getHashtags();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      case A_IDS:
        return isSetA_ids();
      case COUNT:
        return isSetCount();
      case USER_NAME:
        return isSetUser_name();
      case HASHTAGS:
        return isSetHashtags();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof view_suggestions_args)
        return this.equals((view_suggestions_args)that);
      return false;
    }

    public boolean equals(view_suggestions_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      boolean this_present_a_ids = true && this.isSetA_ids();
      boolean that_present_a_ids = true && that.isSetA_ids();
      if (this_present_a_ids || that_present_a_ids) {
        if (!(this_present_a_ids && that_present_a_ids))
          return false;
        if (!this.a_ids.equals(that.a_ids))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_hashtags = true && this.isSetHashtags();
      boolean that_present_hashtags = true && that.isSetHashtags();
      if (this_present_hashtags || that_present_hashtags) {
        if (!(this_present_hashtags && that_present_hashtags))
          return false;
        if (!this.hashtags.equals(that.hashtags))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(view_suggestions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      view_suggestions_args typedOther = (view_suggestions_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetA_ids()).compareTo(typedOther.isSetA_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_ids, typedOther.a_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHashtags()).compareTo(typedOther.isSetHashtags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHashtags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashtags, typedOther.hashtags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("view_suggestions_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("a_ids:");
      if (this.a_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.a_ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hashtags:");
      if (this.hashtags == null) {
        sb.append("null");
      } else {
        sb.append(this.hashtags);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class view_suggestions_argsStandardSchemeFactory implements SchemeFactory {
      public view_suggestions_argsStandardScheme getScheme() {
        return new view_suggestions_argsStandardScheme();
      }
    }

    private static class view_suggestions_argsStandardScheme extends StandardScheme<view_suggestions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, view_suggestions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // A_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_ids = iprot.readString();
                struct.setA_idsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // HASHTAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hashtags = iprot.readString();
                struct.setHashtagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, view_suggestions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        if (struct.a_ids != null) {
          oprot.writeFieldBegin(A_IDS_FIELD_DESC);
          oprot.writeString(struct.a_ids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.hashtags != null) {
          oprot.writeFieldBegin(HASHTAGS_FIELD_DESC);
          oprot.writeString(struct.hashtags);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class view_suggestions_argsTupleSchemeFactory implements SchemeFactory {
      public view_suggestions_argsTupleScheme getScheme() {
        return new view_suggestions_argsTupleScheme();
      }
    }

    private static class view_suggestions_argsTupleScheme extends TupleScheme<view_suggestions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, view_suggestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetItem_id()) {
          optionals.set(1);
        }
        if (struct.isSetA_ids()) {
          optionals.set(2);
        }
        if (struct.isSetCount()) {
          optionals.set(3);
        }
        if (struct.isSetUser_name()) {
          optionals.set(4);
        }
        if (struct.isSetHashtags()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
        if (struct.isSetA_ids()) {
          oprot.writeString(struct.a_ids);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetHashtags()) {
          oprot.writeString(struct.hashtags);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, view_suggestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.a_ids = iprot.readString();
          struct.setA_idsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(4)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.hashtags = iprot.readString();
          struct.setHashtagsIsSet(true);
        }
      }
    }

  }

  public static class view_suggestions_result implements org.apache.thrift.TBase<view_suggestions_result, view_suggestions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("view_suggestions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new view_suggestions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new view_suggestions_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(view_suggestions_result.class, metaDataMap);
    }

    public view_suggestions_result() {
    }

    public view_suggestions_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public view_suggestions_result(view_suggestions_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public view_suggestions_result deepCopy() {
      return new view_suggestions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public view_suggestions_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof view_suggestions_result)
        return this.equals((view_suggestions_result)that);
      return false;
    }

    public boolean equals(view_suggestions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(view_suggestions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      view_suggestions_result typedOther = (view_suggestions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("view_suggestions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class view_suggestions_resultStandardSchemeFactory implements SchemeFactory {
      public view_suggestions_resultStandardScheme getScheme() {
        return new view_suggestions_resultStandardScheme();
      }
    }

    private static class view_suggestions_resultStandardScheme extends StandardScheme<view_suggestions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, view_suggestions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, view_suggestions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class view_suggestions_resultTupleSchemeFactory implements SchemeFactory {
      public view_suggestions_resultTupleScheme getScheme() {
        return new view_suggestions_resultTupleScheme();
      }
    }

    private static class view_suggestions_resultTupleScheme extends TupleScheme<view_suggestions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, view_suggestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, view_suggestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cf_suggestions_args implements org.apache.thrift.TBase<cf_suggestions_args, cf_suggestions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cf_suggestions_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cf_suggestions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cf_suggestions_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String item_id; // required
    public String user_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ITEM_ID((short)2, "item_id"),
      USER_NAME((short)3, "user_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          case 3: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cf_suggestions_args.class, metaDataMap);
    }

    public cf_suggestions_args() {
    }

    public cf_suggestions_args(
      String item_type,
      String item_id,
      String user_name)
    {
      this();
      this.item_type = item_type;
      this.item_id = item_id;
      this.user_name = user_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cf_suggestions_args(cf_suggestions_args other) {
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
    }

    public cf_suggestions_args deepCopy() {
      return new cf_suggestions_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.item_id = null;
      this.user_name = null;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public cf_suggestions_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public cf_suggestions_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public cf_suggestions_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      case USER_NAME:
        return getUser_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      case USER_NAME:
        return isSetUser_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cf_suggestions_args)
        return this.equals((cf_suggestions_args)that);
      return false;
    }

    public boolean equals(cf_suggestions_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cf_suggestions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cf_suggestions_args typedOther = (cf_suggestions_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cf_suggestions_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cf_suggestions_argsStandardSchemeFactory implements SchemeFactory {
      public cf_suggestions_argsStandardScheme getScheme() {
        return new cf_suggestions_argsStandardScheme();
      }
    }

    private static class cf_suggestions_argsStandardScheme extends StandardScheme<cf_suggestions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cf_suggestions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cf_suggestions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cf_suggestions_argsTupleSchemeFactory implements SchemeFactory {
      public cf_suggestions_argsTupleScheme getScheme() {
        return new cf_suggestions_argsTupleScheme();
      }
    }

    private static class cf_suggestions_argsTupleScheme extends TupleScheme<cf_suggestions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cf_suggestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetItem_id()) {
          optionals.set(1);
        }
        if (struct.isSetUser_name()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cf_suggestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
      }
    }

  }

  public static class cf_suggestions_result implements org.apache.thrift.TBase<cf_suggestions_result, cf_suggestions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cf_suggestions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cf_suggestions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cf_suggestions_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cf_suggestions_result.class, metaDataMap);
    }

    public cf_suggestions_result() {
    }

    public cf_suggestions_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cf_suggestions_result(cf_suggestions_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public cf_suggestions_result deepCopy() {
      return new cf_suggestions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public cf_suggestions_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cf_suggestions_result)
        return this.equals((cf_suggestions_result)that);
      return false;
    }

    public boolean equals(cf_suggestions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cf_suggestions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cf_suggestions_result typedOther = (cf_suggestions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cf_suggestions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cf_suggestions_resultStandardSchemeFactory implements SchemeFactory {
      public cf_suggestions_resultStandardScheme getScheme() {
        return new cf_suggestions_resultStandardScheme();
      }
    }

    private static class cf_suggestions_resultStandardScheme extends StandardScheme<cf_suggestions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cf_suggestions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cf_suggestions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cf_suggestions_resultTupleSchemeFactory implements SchemeFactory {
      public cf_suggestions_resultTupleScheme getScheme() {
        return new cf_suggestions_resultTupleScheme();
      }
    }

    private static class cf_suggestions_resultTupleScheme extends TupleScheme<cf_suggestions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cf_suggestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cf_suggestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class hashtag_suggestions_args implements org.apache.thrift.TBase<hashtag_suggestions_args, hashtag_suggestions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hashtag_suggestions_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CAT_FIELD_DESC = new org.apache.thrift.protocol.TField("cat", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hashtag_suggestions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hashtag_suggestions_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String item_id; // required
    public String content; // required
    public String cat; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ITEM_ID((short)2, "item_id"),
      CONTENT((short)3, "content"),
      CAT((short)4, "cat");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          case 3: // CONTENT
            return CONTENT;
          case 4: // CAT
            return CAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CAT, new org.apache.thrift.meta_data.FieldMetaData("cat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hashtag_suggestions_args.class, metaDataMap);
    }

    public hashtag_suggestions_args() {
    }

    public hashtag_suggestions_args(
      String item_type,
      String item_id,
      String content,
      String cat)
    {
      this();
      this.item_type = item_type;
      this.item_id = item_id;
      this.content = content;
      this.cat = cat;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hashtag_suggestions_args(hashtag_suggestions_args other) {
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetCat()) {
        this.cat = other.cat;
      }
    }

    public hashtag_suggestions_args deepCopy() {
      return new hashtag_suggestions_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.item_id = null;
      this.content = null;
      this.cat = null;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public hashtag_suggestions_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public hashtag_suggestions_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public hashtag_suggestions_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public String getCat() {
      return this.cat;
    }

    public hashtag_suggestions_args setCat(String cat) {
      this.cat = cat;
      return this;
    }

    public void unsetCat() {
      this.cat = null;
    }

    /** Returns true if field cat is set (has been assigned a value) and false otherwise */
    public boolean isSetCat() {
      return this.cat != null;
    }

    public void setCatIsSet(boolean value) {
      if (!value) {
        this.cat = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case CAT:
        if (value == null) {
          unsetCat();
        } else {
          setCat((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      case CONTENT:
        return getContent();

      case CAT:
        return getCat();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      case CONTENT:
        return isSetContent();
      case CAT:
        return isSetCat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hashtag_suggestions_args)
        return this.equals((hashtag_suggestions_args)that);
      return false;
    }

    public boolean equals(hashtag_suggestions_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_cat = true && this.isSetCat();
      boolean that_present_cat = true && that.isSetCat();
      if (this_present_cat || that_present_cat) {
        if (!(this_present_cat && that_present_cat))
          return false;
        if (!this.cat.equals(that.cat))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(hashtag_suggestions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      hashtag_suggestions_args typedOther = (hashtag_suggestions_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCat()).compareTo(typedOther.isSetCat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cat, typedOther.cat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hashtag_suggestions_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cat:");
      if (this.cat == null) {
        sb.append("null");
      } else {
        sb.append(this.cat);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hashtag_suggestions_argsStandardSchemeFactory implements SchemeFactory {
      public hashtag_suggestions_argsStandardScheme getScheme() {
        return new hashtag_suggestions_argsStandardScheme();
      }
    }

    private static class hashtag_suggestions_argsStandardScheme extends StandardScheme<hashtag_suggestions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hashtag_suggestions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cat = iprot.readString();
                struct.setCatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hashtag_suggestions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.cat != null) {
          oprot.writeFieldBegin(CAT_FIELD_DESC);
          oprot.writeString(struct.cat);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hashtag_suggestions_argsTupleSchemeFactory implements SchemeFactory {
      public hashtag_suggestions_argsTupleScheme getScheme() {
        return new hashtag_suggestions_argsTupleScheme();
      }
    }

    private static class hashtag_suggestions_argsTupleScheme extends TupleScheme<hashtag_suggestions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hashtag_suggestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetItem_id()) {
          optionals.set(1);
        }
        if (struct.isSetContent()) {
          optionals.set(2);
        }
        if (struct.isSetCat()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetCat()) {
          oprot.writeString(struct.cat);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hashtag_suggestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.cat = iprot.readString();
          struct.setCatIsSet(true);
        }
      }
    }

  }

  public static class hashtag_suggestions_result implements org.apache.thrift.TBase<hashtag_suggestions_result, hashtag_suggestions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hashtag_suggestions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hashtag_suggestions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hashtag_suggestions_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hashtag_suggestions_result.class, metaDataMap);
    }

    public hashtag_suggestions_result() {
    }

    public hashtag_suggestions_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hashtag_suggestions_result(hashtag_suggestions_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public hashtag_suggestions_result deepCopy() {
      return new hashtag_suggestions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public hashtag_suggestions_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hashtag_suggestions_result)
        return this.equals((hashtag_suggestions_result)that);
      return false;
    }

    public boolean equals(hashtag_suggestions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(hashtag_suggestions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      hashtag_suggestions_result typedOther = (hashtag_suggestions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hashtag_suggestions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hashtag_suggestions_resultStandardSchemeFactory implements SchemeFactory {
      public hashtag_suggestions_resultStandardScheme getScheme() {
        return new hashtag_suggestions_resultStandardScheme();
      }
    }

    private static class hashtag_suggestions_resultStandardScheme extends StandardScheme<hashtag_suggestions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hashtag_suggestions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hashtag_suggestions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hashtag_suggestions_resultTupleSchemeFactory implements SchemeFactory {
      public hashtag_suggestions_resultTupleScheme getScheme() {
        return new hashtag_suggestions_resultTupleScheme();
      }
    }

    private static class hashtag_suggestions_resultTupleScheme extends TupleScheme<hashtag_suggestions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hashtag_suggestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hashtag_suggestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class search_args implements org.apache.thrift.TBase<search_args, search_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("search_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cnt", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new search_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new search_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String content; // required
    public int cnt; // required
    public int prev_cnt; // required
    public String item_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      CONTENT((short)2, "content"),
      CNT((short)3, "cnt"),
      PREV_CNT((short)4, "prev_cnt"),
      ITEM_TYPE((short)5, "item_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // CONTENT
            return CONTENT;
          case 3: // CNT
            return CNT;
          case 4: // PREV_CNT
            return PREV_CNT;
          case 5: // ITEM_TYPE
            return ITEM_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CNT, new org.apache.thrift.meta_data.FieldMetaData("cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(search_args.class, metaDataMap);
    }

    public search_args() {
    }

    public search_args(
      String user_name,
      String content,
      int cnt,
      int prev_cnt,
      String item_type)
    {
      this();
      this.user_name = user_name;
      this.content = content;
      this.cnt = cnt;
      setCntIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      this.item_type = item_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public search_args(search_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      this.cnt = other.cnt;
      this.prev_cnt = other.prev_cnt;
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
    }

    public search_args deepCopy() {
      return new search_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.content = null;
      setCntIsSet(false);
      this.cnt = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
      this.item_type = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public search_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public search_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public int getCnt() {
      return this.cnt;
    }

    public search_args setCnt(int cnt) {
      this.cnt = cnt;
      setCntIsSet(true);
      return this;
    }

    public void unsetCnt() {
      __isset_bit_vector.clear(__CNT_ISSET_ID);
    }

    /** Returns true if field cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetCnt() {
      return __isset_bit_vector.get(__CNT_ISSET_ID);
    }

    public void setCntIsSet(boolean value) {
      __isset_bit_vector.set(__CNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public search_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public String getItem_type() {
      return this.item_type;
    }

    public search_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case CNT:
        if (value == null) {
          unsetCnt();
        } else {
          setCnt((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case CONTENT:
        return getContent();

      case CNT:
        return Integer.valueOf(getCnt());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      case ITEM_TYPE:
        return getItem_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case CONTENT:
        return isSetContent();
      case CNT:
        return isSetCnt();
      case PREV_CNT:
        return isSetPrev_cnt();
      case ITEM_TYPE:
        return isSetItem_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof search_args)
        return this.equals((search_args)that);
      return false;
    }

    public boolean equals(search_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_cnt = true;
      boolean that_present_cnt = true;
      if (this_present_cnt || that_present_cnt) {
        if (!(this_present_cnt && that_present_cnt))
          return false;
        if (this.cnt != that.cnt)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(search_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      search_args typedOther = (search_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCnt()).compareTo(typedOther.isSetCnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnt, typedOther.cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("search_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cnt:");
      sb.append(this.cnt);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class search_argsStandardSchemeFactory implements SchemeFactory {
      public search_argsStandardScheme getScheme() {
        return new search_argsStandardScheme();
      }
    }

    private static class search_argsStandardScheme extends StandardScheme<search_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, search_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cnt = iprot.readI32();
                struct.setCntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, search_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CNT_FIELD_DESC);
        oprot.writeI32(struct.cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class search_argsTupleSchemeFactory implements SchemeFactory {
      public search_argsTupleScheme getScheme() {
        return new search_argsTupleScheme();
      }
    }

    private static class search_argsTupleScheme extends TupleScheme<search_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, search_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetContent()) {
          optionals.set(1);
        }
        if (struct.isSetCnt()) {
          optionals.set(2);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(3);
        }
        if (struct.isSetItem_type()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetCnt()) {
          oprot.writeI32(struct.cnt);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, search_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cnt = iprot.readI32();
          struct.setCntIsSet(true);
        }
        if (incoming.get(3)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
        if (incoming.get(4)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
      }
    }

  }

  public static class search_result implements org.apache.thrift.TBase<search_result, search_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("search_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new search_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new search_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(search_result.class, metaDataMap);
    }

    public search_result() {
    }

    public search_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public search_result(search_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public search_result deepCopy() {
      return new search_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public search_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof search_result)
        return this.equals((search_result)that);
      return false;
    }

    public boolean equals(search_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(search_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      search_result typedOther = (search_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("search_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class search_resultStandardSchemeFactory implements SchemeFactory {
      public search_resultStandardScheme getScheme() {
        return new search_resultStandardScheme();
      }
    }

    private static class search_resultStandardScheme extends StandardScheme<search_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, search_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, search_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class search_resultTupleSchemeFactory implements SchemeFactory {
      public search_resultTupleScheme getScheme() {
        return new search_resultTupleScheme();
      }
    }

    private static class search_resultTupleScheme extends TupleScheme<search_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, search_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, search_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class add_feed_args implements org.apache.thrift.TBase<add_feed_args, add_feed_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_feed_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_feed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_feed_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String item_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ITEM_ID((short)2, "item_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_feed_args.class, metaDataMap);
    }

    public add_feed_args() {
    }

    public add_feed_args(
      String item_type,
      String item_id)
    {
      this();
      this.item_type = item_type;
      this.item_id = item_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_feed_args(add_feed_args other) {
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
    }

    public add_feed_args deepCopy() {
      return new add_feed_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.item_id = null;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public add_feed_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public add_feed_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_feed_args)
        return this.equals((add_feed_args)that);
      return false;
    }

    public boolean equals(add_feed_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(add_feed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      add_feed_args typedOther = (add_feed_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_feed_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_feed_argsStandardSchemeFactory implements SchemeFactory {
      public add_feed_argsStandardScheme getScheme() {
        return new add_feed_argsStandardScheme();
      }
    }

    private static class add_feed_argsStandardScheme extends StandardScheme<add_feed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_feed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_feed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_feed_argsTupleSchemeFactory implements SchemeFactory {
      public add_feed_argsTupleScheme getScheme() {
        return new add_feed_argsTupleScheme();
      }
    }

    private static class add_feed_argsTupleScheme extends TupleScheme<add_feed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_feed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetItem_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_feed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
      }
    }

  }

  public static class add_feed_result implements org.apache.thrift.TBase<add_feed_result, add_feed_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_feed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_feed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_feed_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_feed_result.class, metaDataMap);
    }

    public add_feed_result() {
    }

    public add_feed_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_feed_result(add_feed_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public add_feed_result deepCopy() {
      return new add_feed_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public add_feed_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_feed_result)
        return this.equals((add_feed_result)that);
      return false;
    }

    public boolean equals(add_feed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(add_feed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      add_feed_result typedOther = (add_feed_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_feed_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_feed_resultStandardSchemeFactory implements SchemeFactory {
      public add_feed_resultStandardScheme getScheme() {
        return new add_feed_resultStandardScheme();
      }
    }

    private static class add_feed_resultStandardScheme extends StandardScheme<add_feed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_feed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_feed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_feed_resultTupleSchemeFactory implements SchemeFactory {
      public add_feed_resultTupleScheme getScheme() {
        return new add_feed_resultTupleScheme();
      }
    }

    private static class add_feed_resultTupleScheme extends TupleScheme<add_feed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_feed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_feed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pin_item_args implements org.apache.thrift.TBase<pin_item_args, pin_item_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pin_item_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CAT_FIELD_DESC = new org.apache.thrift.protocol.TField("cat", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SPACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("space_id", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pin_item_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pin_item_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String item_id; // required
    public String cat; // required
    public String space_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ITEM_ID((short)2, "item_id"),
      CAT((short)3, "cat"),
      SPACE_ID((short)4, "space_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          case 3: // CAT
            return CAT;
          case 4: // SPACE_ID
            return SPACE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CAT, new org.apache.thrift.meta_data.FieldMetaData("cat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPACE_ID, new org.apache.thrift.meta_data.FieldMetaData("space_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pin_item_args.class, metaDataMap);
    }

    public pin_item_args() {
    }

    public pin_item_args(
      String item_type,
      String item_id,
      String cat,
      String space_id)
    {
      this();
      this.item_type = item_type;
      this.item_id = item_id;
      this.cat = cat;
      this.space_id = space_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pin_item_args(pin_item_args other) {
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
      if (other.isSetCat()) {
        this.cat = other.cat;
      }
      if (other.isSetSpace_id()) {
        this.space_id = other.space_id;
      }
    }

    public pin_item_args deepCopy() {
      return new pin_item_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.item_id = null;
      this.cat = null;
      this.space_id = null;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public pin_item_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public pin_item_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public String getCat() {
      return this.cat;
    }

    public pin_item_args setCat(String cat) {
      this.cat = cat;
      return this;
    }

    public void unsetCat() {
      this.cat = null;
    }

    /** Returns true if field cat is set (has been assigned a value) and false otherwise */
    public boolean isSetCat() {
      return this.cat != null;
    }

    public void setCatIsSet(boolean value) {
      if (!value) {
        this.cat = null;
      }
    }

    public String getSpace_id() {
      return this.space_id;
    }

    public pin_item_args setSpace_id(String space_id) {
      this.space_id = space_id;
      return this;
    }

    public void unsetSpace_id() {
      this.space_id = null;
    }

    /** Returns true if field space_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSpace_id() {
      return this.space_id != null;
    }

    public void setSpace_idIsSet(boolean value) {
      if (!value) {
        this.space_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      case CAT:
        if (value == null) {
          unsetCat();
        } else {
          setCat((String)value);
        }
        break;

      case SPACE_ID:
        if (value == null) {
          unsetSpace_id();
        } else {
          setSpace_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      case CAT:
        return getCat();

      case SPACE_ID:
        return getSpace_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      case CAT:
        return isSetCat();
      case SPACE_ID:
        return isSetSpace_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pin_item_args)
        return this.equals((pin_item_args)that);
      return false;
    }

    public boolean equals(pin_item_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      boolean this_present_cat = true && this.isSetCat();
      boolean that_present_cat = true && that.isSetCat();
      if (this_present_cat || that_present_cat) {
        if (!(this_present_cat && that_present_cat))
          return false;
        if (!this.cat.equals(that.cat))
          return false;
      }

      boolean this_present_space_id = true && this.isSetSpace_id();
      boolean that_present_space_id = true && that.isSetSpace_id();
      if (this_present_space_id || that_present_space_id) {
        if (!(this_present_space_id && that_present_space_id))
          return false;
        if (!this.space_id.equals(that.space_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pin_item_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pin_item_args typedOther = (pin_item_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCat()).compareTo(typedOther.isSetCat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cat, typedOther.cat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpace_id()).compareTo(typedOther.isSetSpace_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpace_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.space_id, typedOther.space_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pin_item_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cat:");
      if (this.cat == null) {
        sb.append("null");
      } else {
        sb.append(this.cat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("space_id:");
      if (this.space_id == null) {
        sb.append("null");
      } else {
        sb.append(this.space_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pin_item_argsStandardSchemeFactory implements SchemeFactory {
      public pin_item_argsStandardScheme getScheme() {
        return new pin_item_argsStandardScheme();
      }
    }

    private static class pin_item_argsStandardScheme extends StandardScheme<pin_item_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pin_item_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cat = iprot.readString();
                struct.setCatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SPACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.space_id = iprot.readString();
                struct.setSpace_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pin_item_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        if (struct.cat != null) {
          oprot.writeFieldBegin(CAT_FIELD_DESC);
          oprot.writeString(struct.cat);
          oprot.writeFieldEnd();
        }
        if (struct.space_id != null) {
          oprot.writeFieldBegin(SPACE_ID_FIELD_DESC);
          oprot.writeString(struct.space_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pin_item_argsTupleSchemeFactory implements SchemeFactory {
      public pin_item_argsTupleScheme getScheme() {
        return new pin_item_argsTupleScheme();
      }
    }

    private static class pin_item_argsTupleScheme extends TupleScheme<pin_item_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pin_item_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetItem_id()) {
          optionals.set(1);
        }
        if (struct.isSetCat()) {
          optionals.set(2);
        }
        if (struct.isSetSpace_id()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
        if (struct.isSetCat()) {
          oprot.writeString(struct.cat);
        }
        if (struct.isSetSpace_id()) {
          oprot.writeString(struct.space_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pin_item_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cat = iprot.readString();
          struct.setCatIsSet(true);
        }
        if (incoming.get(3)) {
          struct.space_id = iprot.readString();
          struct.setSpace_idIsSet(true);
        }
      }
    }

  }

  public static class pin_item_result implements org.apache.thrift.TBase<pin_item_result, pin_item_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pin_item_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pin_item_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pin_item_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pin_item_result.class, metaDataMap);
    }

    public pin_item_result() {
    }

    public pin_item_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pin_item_result(pin_item_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public pin_item_result deepCopy() {
      return new pin_item_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public pin_item_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pin_item_result)
        return this.equals((pin_item_result)that);
      return false;
    }

    public boolean equals(pin_item_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pin_item_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pin_item_result typedOther = (pin_item_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pin_item_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pin_item_resultStandardSchemeFactory implements SchemeFactory {
      public pin_item_resultStandardScheme getScheme() {
        return new pin_item_resultStandardScheme();
      }
    }

    private static class pin_item_resultStandardScheme extends StandardScheme<pin_item_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pin_item_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pin_item_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pin_item_resultTupleSchemeFactory implements SchemeFactory {
      public pin_item_resultTupleScheme getScheme() {
        return new pin_item_resultTupleScheme();
      }
    }

    private static class pin_item_resultTupleScheme extends TupleScheme<pin_item_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pin_item_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pin_item_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exclusive_article_args implements org.apache.thrift.TBase<exclusive_article_args, exclusive_article_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exclusive_article_args");

    private static final org.apache.thrift.protocol.TField A_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("a_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CAT_FIELD_DESC = new org.apache.thrift.protocol.TField("cat", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exclusive_article_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exclusive_article_argsTupleSchemeFactory());
    }

    public String a_id; // required
    public String cat; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A_ID((short)1, "a_id"),
      CAT((short)2, "cat");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_ID
            return A_ID;
          case 2: // CAT
            return CAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_ID, new org.apache.thrift.meta_data.FieldMetaData("a_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CAT, new org.apache.thrift.meta_data.FieldMetaData("cat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exclusive_article_args.class, metaDataMap);
    }

    public exclusive_article_args() {
    }

    public exclusive_article_args(
      String a_id,
      String cat)
    {
      this();
      this.a_id = a_id;
      this.cat = cat;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exclusive_article_args(exclusive_article_args other) {
      if (other.isSetA_id()) {
        this.a_id = other.a_id;
      }
      if (other.isSetCat()) {
        this.cat = other.cat;
      }
    }

    public exclusive_article_args deepCopy() {
      return new exclusive_article_args(this);
    }

    @Override
    public void clear() {
      this.a_id = null;
      this.cat = null;
    }

    public String getA_id() {
      return this.a_id;
    }

    public exclusive_article_args setA_id(String a_id) {
      this.a_id = a_id;
      return this;
    }

    public void unsetA_id() {
      this.a_id = null;
    }

    /** Returns true if field a_id is set (has been assigned a value) and false otherwise */
    public boolean isSetA_id() {
      return this.a_id != null;
    }

    public void setA_idIsSet(boolean value) {
      if (!value) {
        this.a_id = null;
      }
    }

    public String getCat() {
      return this.cat;
    }

    public exclusive_article_args setCat(String cat) {
      this.cat = cat;
      return this;
    }

    public void unsetCat() {
      this.cat = null;
    }

    /** Returns true if field cat is set (has been assigned a value) and false otherwise */
    public boolean isSetCat() {
      return this.cat != null;
    }

    public void setCatIsSet(boolean value) {
      if (!value) {
        this.cat = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A_ID:
        if (value == null) {
          unsetA_id();
        } else {
          setA_id((String)value);
        }
        break;

      case CAT:
        if (value == null) {
          unsetCat();
        } else {
          setCat((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A_ID:
        return getA_id();

      case CAT:
        return getCat();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A_ID:
        return isSetA_id();
      case CAT:
        return isSetCat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exclusive_article_args)
        return this.equals((exclusive_article_args)that);
      return false;
    }

    public boolean equals(exclusive_article_args that) {
      if (that == null)
        return false;

      boolean this_present_a_id = true && this.isSetA_id();
      boolean that_present_a_id = true && that.isSetA_id();
      if (this_present_a_id || that_present_a_id) {
        if (!(this_present_a_id && that_present_a_id))
          return false;
        if (!this.a_id.equals(that.a_id))
          return false;
      }

      boolean this_present_cat = true && this.isSetCat();
      boolean that_present_cat = true && that.isSetCat();
      if (this_present_cat || that_present_cat) {
        if (!(this_present_cat && that_present_cat))
          return false;
        if (!this.cat.equals(that.cat))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exclusive_article_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exclusive_article_args typedOther = (exclusive_article_args)other;

      lastComparison = Boolean.valueOf(isSetA_id()).compareTo(typedOther.isSetA_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_id, typedOther.a_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCat()).compareTo(typedOther.isSetCat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cat, typedOther.cat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exclusive_article_args(");
      boolean first = true;

      sb.append("a_id:");
      if (this.a_id == null) {
        sb.append("null");
      } else {
        sb.append(this.a_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cat:");
      if (this.cat == null) {
        sb.append("null");
      } else {
        sb.append(this.cat);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exclusive_article_argsStandardSchemeFactory implements SchemeFactory {
      public exclusive_article_argsStandardScheme getScheme() {
        return new exclusive_article_argsStandardScheme();
      }
    }

    private static class exclusive_article_argsStandardScheme extends StandardScheme<exclusive_article_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exclusive_article_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_id = iprot.readString();
                struct.setA_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cat = iprot.readString();
                struct.setCatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exclusive_article_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.a_id != null) {
          oprot.writeFieldBegin(A_ID_FIELD_DESC);
          oprot.writeString(struct.a_id);
          oprot.writeFieldEnd();
        }
        if (struct.cat != null) {
          oprot.writeFieldBegin(CAT_FIELD_DESC);
          oprot.writeString(struct.cat);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exclusive_article_argsTupleSchemeFactory implements SchemeFactory {
      public exclusive_article_argsTupleScheme getScheme() {
        return new exclusive_article_argsTupleScheme();
      }
    }

    private static class exclusive_article_argsTupleScheme extends TupleScheme<exclusive_article_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exclusive_article_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetA_id()) {
          optionals.set(0);
        }
        if (struct.isSetCat()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetA_id()) {
          oprot.writeString(struct.a_id);
        }
        if (struct.isSetCat()) {
          oprot.writeString(struct.cat);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exclusive_article_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.a_id = iprot.readString();
          struct.setA_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cat = iprot.readString();
          struct.setCatIsSet(true);
        }
      }
    }

  }

  public static class exclusive_article_result implements org.apache.thrift.TBase<exclusive_article_result, exclusive_article_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exclusive_article_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exclusive_article_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exclusive_article_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exclusive_article_result.class, metaDataMap);
    }

    public exclusive_article_result() {
    }

    public exclusive_article_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exclusive_article_result(exclusive_article_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public exclusive_article_result deepCopy() {
      return new exclusive_article_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public exclusive_article_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exclusive_article_result)
        return this.equals((exclusive_article_result)that);
      return false;
    }

    public boolean equals(exclusive_article_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exclusive_article_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exclusive_article_result typedOther = (exclusive_article_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exclusive_article_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exclusive_article_resultStandardSchemeFactory implements SchemeFactory {
      public exclusive_article_resultStandardScheme getScheme() {
        return new exclusive_article_resultStandardScheme();
      }
    }

    private static class exclusive_article_resultStandardScheme extends StandardScheme<exclusive_article_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exclusive_article_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exclusive_article_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exclusive_article_resultTupleSchemeFactory implements SchemeFactory {
      public exclusive_article_resultTupleScheme getScheme() {
        return new exclusive_article_resultTupleScheme();
      }
    }

    private static class exclusive_article_resultTupleScheme extends TupleScheme<exclusive_article_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exclusive_article_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exclusive_article_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pin_article_category_args implements org.apache.thrift.TBase<pin_article_category_args, pin_article_category_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pin_article_category_args");

    private static final org.apache.thrift.protocol.TField A_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("a_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pin_article_category_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pin_article_category_argsTupleSchemeFactory());
    }

    public String a_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A_ID((short)1, "a_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_ID
            return A_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_ID, new org.apache.thrift.meta_data.FieldMetaData("a_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pin_article_category_args.class, metaDataMap);
    }

    public pin_article_category_args() {
    }

    public pin_article_category_args(
      String a_id)
    {
      this();
      this.a_id = a_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pin_article_category_args(pin_article_category_args other) {
      if (other.isSetA_id()) {
        this.a_id = other.a_id;
      }
    }

    public pin_article_category_args deepCopy() {
      return new pin_article_category_args(this);
    }

    @Override
    public void clear() {
      this.a_id = null;
    }

    public String getA_id() {
      return this.a_id;
    }

    public pin_article_category_args setA_id(String a_id) {
      this.a_id = a_id;
      return this;
    }

    public void unsetA_id() {
      this.a_id = null;
    }

    /** Returns true if field a_id is set (has been assigned a value) and false otherwise */
    public boolean isSetA_id() {
      return this.a_id != null;
    }

    public void setA_idIsSet(boolean value) {
      if (!value) {
        this.a_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A_ID:
        if (value == null) {
          unsetA_id();
        } else {
          setA_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A_ID:
        return getA_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A_ID:
        return isSetA_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pin_article_category_args)
        return this.equals((pin_article_category_args)that);
      return false;
    }

    public boolean equals(pin_article_category_args that) {
      if (that == null)
        return false;

      boolean this_present_a_id = true && this.isSetA_id();
      boolean that_present_a_id = true && that.isSetA_id();
      if (this_present_a_id || that_present_a_id) {
        if (!(this_present_a_id && that_present_a_id))
          return false;
        if (!this.a_id.equals(that.a_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pin_article_category_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pin_article_category_args typedOther = (pin_article_category_args)other;

      lastComparison = Boolean.valueOf(isSetA_id()).compareTo(typedOther.isSetA_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_id, typedOther.a_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pin_article_category_args(");
      boolean first = true;

      sb.append("a_id:");
      if (this.a_id == null) {
        sb.append("null");
      } else {
        sb.append(this.a_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pin_article_category_argsStandardSchemeFactory implements SchemeFactory {
      public pin_article_category_argsStandardScheme getScheme() {
        return new pin_article_category_argsStandardScheme();
      }
    }

    private static class pin_article_category_argsStandardScheme extends StandardScheme<pin_article_category_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pin_article_category_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_id = iprot.readString();
                struct.setA_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pin_article_category_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.a_id != null) {
          oprot.writeFieldBegin(A_ID_FIELD_DESC);
          oprot.writeString(struct.a_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pin_article_category_argsTupleSchemeFactory implements SchemeFactory {
      public pin_article_category_argsTupleScheme getScheme() {
        return new pin_article_category_argsTupleScheme();
      }
    }

    private static class pin_article_category_argsTupleScheme extends TupleScheme<pin_article_category_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pin_article_category_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetA_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetA_id()) {
          oprot.writeString(struct.a_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pin_article_category_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.a_id = iprot.readString();
          struct.setA_idIsSet(true);
        }
      }
    }

  }

  public static class pin_article_category_result implements org.apache.thrift.TBase<pin_article_category_result, pin_article_category_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pin_article_category_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pin_article_category_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pin_article_category_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pin_article_category_result.class, metaDataMap);
    }

    public pin_article_category_result() {
    }

    public pin_article_category_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pin_article_category_result(pin_article_category_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public pin_article_category_result deepCopy() {
      return new pin_article_category_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public pin_article_category_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pin_article_category_result)
        return this.equals((pin_article_category_result)that);
      return false;
    }

    public boolean equals(pin_article_category_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pin_article_category_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pin_article_category_result typedOther = (pin_article_category_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pin_article_category_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pin_article_category_resultStandardSchemeFactory implements SchemeFactory {
      public pin_article_category_resultStandardScheme getScheme() {
        return new pin_article_category_resultStandardScheme();
      }
    }

    private static class pin_article_category_resultStandardScheme extends StandardScheme<pin_article_category_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pin_article_category_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pin_article_category_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pin_article_category_resultTupleSchemeFactory implements SchemeFactory {
      public pin_article_category_resultTupleScheme getScheme() {
        return new pin_article_category_resultTupleScheme();
      }
    }

    private static class pin_article_category_resultTupleScheme extends TupleScheme<pin_article_category_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pin_article_category_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pin_article_category_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exclusive_article_category_args implements org.apache.thrift.TBase<exclusive_article_category_args, exclusive_article_category_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exclusive_article_category_args");

    private static final org.apache.thrift.protocol.TField A_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("a_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exclusive_article_category_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exclusive_article_category_argsTupleSchemeFactory());
    }

    public String a_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A_ID((short)1, "a_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_ID
            return A_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_ID, new org.apache.thrift.meta_data.FieldMetaData("a_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exclusive_article_category_args.class, metaDataMap);
    }

    public exclusive_article_category_args() {
    }

    public exclusive_article_category_args(
      String a_id)
    {
      this();
      this.a_id = a_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exclusive_article_category_args(exclusive_article_category_args other) {
      if (other.isSetA_id()) {
        this.a_id = other.a_id;
      }
    }

    public exclusive_article_category_args deepCopy() {
      return new exclusive_article_category_args(this);
    }

    @Override
    public void clear() {
      this.a_id = null;
    }

    public String getA_id() {
      return this.a_id;
    }

    public exclusive_article_category_args setA_id(String a_id) {
      this.a_id = a_id;
      return this;
    }

    public void unsetA_id() {
      this.a_id = null;
    }

    /** Returns true if field a_id is set (has been assigned a value) and false otherwise */
    public boolean isSetA_id() {
      return this.a_id != null;
    }

    public void setA_idIsSet(boolean value) {
      if (!value) {
        this.a_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A_ID:
        if (value == null) {
          unsetA_id();
        } else {
          setA_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A_ID:
        return getA_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A_ID:
        return isSetA_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exclusive_article_category_args)
        return this.equals((exclusive_article_category_args)that);
      return false;
    }

    public boolean equals(exclusive_article_category_args that) {
      if (that == null)
        return false;

      boolean this_present_a_id = true && this.isSetA_id();
      boolean that_present_a_id = true && that.isSetA_id();
      if (this_present_a_id || that_present_a_id) {
        if (!(this_present_a_id && that_present_a_id))
          return false;
        if (!this.a_id.equals(that.a_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exclusive_article_category_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exclusive_article_category_args typedOther = (exclusive_article_category_args)other;

      lastComparison = Boolean.valueOf(isSetA_id()).compareTo(typedOther.isSetA_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_id, typedOther.a_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exclusive_article_category_args(");
      boolean first = true;

      sb.append("a_id:");
      if (this.a_id == null) {
        sb.append("null");
      } else {
        sb.append(this.a_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exclusive_article_category_argsStandardSchemeFactory implements SchemeFactory {
      public exclusive_article_category_argsStandardScheme getScheme() {
        return new exclusive_article_category_argsStandardScheme();
      }
    }

    private static class exclusive_article_category_argsStandardScheme extends StandardScheme<exclusive_article_category_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exclusive_article_category_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_id = iprot.readString();
                struct.setA_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exclusive_article_category_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.a_id != null) {
          oprot.writeFieldBegin(A_ID_FIELD_DESC);
          oprot.writeString(struct.a_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exclusive_article_category_argsTupleSchemeFactory implements SchemeFactory {
      public exclusive_article_category_argsTupleScheme getScheme() {
        return new exclusive_article_category_argsTupleScheme();
      }
    }

    private static class exclusive_article_category_argsTupleScheme extends TupleScheme<exclusive_article_category_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exclusive_article_category_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetA_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetA_id()) {
          oprot.writeString(struct.a_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exclusive_article_category_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.a_id = iprot.readString();
          struct.setA_idIsSet(true);
        }
      }
    }

  }

  public static class exclusive_article_category_result implements org.apache.thrift.TBase<exclusive_article_category_result, exclusive_article_category_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exclusive_article_category_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exclusive_article_category_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exclusive_article_category_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exclusive_article_category_result.class, metaDataMap);
    }

    public exclusive_article_category_result() {
    }

    public exclusive_article_category_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exclusive_article_category_result(exclusive_article_category_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public exclusive_article_category_result deepCopy() {
      return new exclusive_article_category_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public exclusive_article_category_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exclusive_article_category_result)
        return this.equals((exclusive_article_category_result)that);
      return false;
    }

    public boolean equals(exclusive_article_category_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exclusive_article_category_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exclusive_article_category_result typedOther = (exclusive_article_category_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exclusive_article_category_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exclusive_article_category_resultStandardSchemeFactory implements SchemeFactory {
      public exclusive_article_category_resultStandardScheme getScheme() {
        return new exclusive_article_category_resultStandardScheme();
      }
    }

    private static class exclusive_article_category_resultStandardScheme extends StandardScheme<exclusive_article_category_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exclusive_article_category_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exclusive_article_category_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exclusive_article_category_resultTupleSchemeFactory implements SchemeFactory {
      public exclusive_article_category_resultTupleScheme getScheme() {
        return new exclusive_article_category_resultTupleScheme();
      }
    }

    private static class exclusive_article_category_resultTupleScheme extends TupleScheme<exclusive_article_category_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exclusive_article_category_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exclusive_article_category_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_user_tiles_args implements org.apache.thrift.TBase<get_user_tiles_args, get_user_tiles_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_user_tiles_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_user_tiles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_user_tiles_argsTupleSchemeFactory());
    }

    public String user_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_user_tiles_args.class, metaDataMap);
    }

    public get_user_tiles_args() {
    }

    public get_user_tiles_args(
      String user_name)
    {
      this();
      this.user_name = user_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_user_tiles_args(get_user_tiles_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
    }

    public get_user_tiles_args deepCopy() {
      return new get_user_tiles_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_user_tiles_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_user_tiles_args)
        return this.equals((get_user_tiles_args)that);
      return false;
    }

    public boolean equals(get_user_tiles_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_user_tiles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_user_tiles_args typedOther = (get_user_tiles_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_user_tiles_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_user_tiles_argsStandardSchemeFactory implements SchemeFactory {
      public get_user_tiles_argsStandardScheme getScheme() {
        return new get_user_tiles_argsStandardScheme();
      }
    }

    private static class get_user_tiles_argsStandardScheme extends StandardScheme<get_user_tiles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_user_tiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_user_tiles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_user_tiles_argsTupleSchemeFactory implements SchemeFactory {
      public get_user_tiles_argsTupleScheme getScheme() {
        return new get_user_tiles_argsTupleScheme();
      }
    }

    private static class get_user_tiles_argsTupleScheme extends TupleScheme<get_user_tiles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_user_tiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_user_tiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
      }
    }

  }

  public static class get_user_tiles_result implements org.apache.thrift.TBase<get_user_tiles_result, get_user_tiles_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_user_tiles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_user_tiles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_user_tiles_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_user_tiles_result.class, metaDataMap);
    }

    public get_user_tiles_result() {
    }

    public get_user_tiles_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_user_tiles_result(get_user_tiles_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_user_tiles_result deepCopy() {
      return new get_user_tiles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_user_tiles_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_user_tiles_result)
        return this.equals((get_user_tiles_result)that);
      return false;
    }

    public boolean equals(get_user_tiles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_user_tiles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_user_tiles_result typedOther = (get_user_tiles_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_user_tiles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_user_tiles_resultStandardSchemeFactory implements SchemeFactory {
      public get_user_tiles_resultStandardScheme getScheme() {
        return new get_user_tiles_resultStandardScheme();
      }
    }

    private static class get_user_tiles_resultStandardScheme extends StandardScheme<get_user_tiles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_user_tiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_user_tiles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_user_tiles_resultTupleSchemeFactory implements SchemeFactory {
      public get_user_tiles_resultTupleScheme getScheme() {
        return new get_user_tiles_resultTupleScheme();
      }
    }

    private static class get_user_tiles_resultTupleScheme extends TupleScheme<get_user_tiles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_user_tiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_user_tiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_event_args implements org.apache.thrift.TBase<create_event_args, create_event_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_event_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField E_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("e_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField E_TITLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("e_title_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField E_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("e_title", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField E_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("e_content", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField E_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("e_date_time", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField E_DATE_TIME_CLOSING_FIELD_DESC = new org.apache.thrift.protocol.TField("e_date_time_closing", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField E_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("e_limit", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField E_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("e_location", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField E_CAT_FIELD_DESC = new org.apache.thrift.protocol.TField("e_cat", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField E_SUBCAT_FIELD_DESC = new org.apache.thrift.protocol.TField("e_subcat", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField E_HASHTAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("e_hashtags", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField E_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("e_users", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField E_TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("e_time_created", org.apache.thrift.protocol.TType.I32, (short)14);
    private static final org.apache.thrift.protocol.TField A_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("a_id", org.apache.thrift.protocol.TType.STRING, (short)15);
    private static final org.apache.thrift.protocol.TField E_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("e_summary", org.apache.thrift.protocol.TType.STRING, (short)16);
    private static final org.apache.thrift.protocol.TField IS_EDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_edit", org.apache.thrift.protocol.TType.I32, (short)17);
    private static final org.apache.thrift.protocol.TField E_FUT_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("e_fut_image", org.apache.thrift.protocol.TType.STRING, (short)18);
    private static final org.apache.thrift.protocol.TField IS_CLOSED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_closed", org.apache.thrift.protocol.TType.I32, (short)19);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_event_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_event_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String e_id; // required
    public String e_title_id; // required
    public String e_title; // required
    public String e_content; // required
    public int e_date_time; // required
    public int e_date_time_closing; // required
    public int e_limit; // required
    public String e_location; // required
    public String e_cat; // required
    public String e_subcat; // required
    public String e_hashtags; // required
    public String e_users; // required
    public int e_time_created; // required
    public String a_id; // required
    public String e_summary; // required
    public int is_edit; // required
    public String e_fut_image; // required
    public int is_closed; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      E_ID((short)2, "e_id"),
      E_TITLE_ID((short)3, "e_title_id"),
      E_TITLE((short)4, "e_title"),
      E_CONTENT((short)5, "e_content"),
      E_DATE_TIME((short)6, "e_date_time"),
      E_DATE_TIME_CLOSING((short)7, "e_date_time_closing"),
      E_LIMIT((short)8, "e_limit"),
      E_LOCATION((short)9, "e_location"),
      E_CAT((short)10, "e_cat"),
      E_SUBCAT((short)11, "e_subcat"),
      E_HASHTAGS((short)12, "e_hashtags"),
      E_USERS((short)13, "e_users"),
      E_TIME_CREATED((short)14, "e_time_created"),
      A_ID((short)15, "a_id"),
      E_SUMMARY((short)16, "e_summary"),
      IS_EDIT((short)17, "is_edit"),
      E_FUT_IMAGE((short)18, "e_fut_image"),
      IS_CLOSED((short)19, "is_closed");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // E_ID
            return E_ID;
          case 3: // E_TITLE_ID
            return E_TITLE_ID;
          case 4: // E_TITLE
            return E_TITLE;
          case 5: // E_CONTENT
            return E_CONTENT;
          case 6: // E_DATE_TIME
            return E_DATE_TIME;
          case 7: // E_DATE_TIME_CLOSING
            return E_DATE_TIME_CLOSING;
          case 8: // E_LIMIT
            return E_LIMIT;
          case 9: // E_LOCATION
            return E_LOCATION;
          case 10: // E_CAT
            return E_CAT;
          case 11: // E_SUBCAT
            return E_SUBCAT;
          case 12: // E_HASHTAGS
            return E_HASHTAGS;
          case 13: // E_USERS
            return E_USERS;
          case 14: // E_TIME_CREATED
            return E_TIME_CREATED;
          case 15: // A_ID
            return A_ID;
          case 16: // E_SUMMARY
            return E_SUMMARY;
          case 17: // IS_EDIT
            return IS_EDIT;
          case 18: // E_FUT_IMAGE
            return E_FUT_IMAGE;
          case 19: // IS_CLOSED
            return IS_CLOSED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __E_DATE_TIME_ISSET_ID = 0;
    private static final int __E_DATE_TIME_CLOSING_ISSET_ID = 1;
    private static final int __E_LIMIT_ISSET_ID = 2;
    private static final int __E_TIME_CREATED_ISSET_ID = 3;
    private static final int __IS_EDIT_ISSET_ID = 4;
    private static final int __IS_CLOSED_ISSET_ID = 5;
    private BitSet __isset_bit_vector = new BitSet(6);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E_ID, new org.apache.thrift.meta_data.FieldMetaData("e_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E_TITLE_ID, new org.apache.thrift.meta_data.FieldMetaData("e_title_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E_TITLE, new org.apache.thrift.meta_data.FieldMetaData("e_title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("e_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("e_date_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E_DATE_TIME_CLOSING, new org.apache.thrift.meta_data.FieldMetaData("e_date_time_closing", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("e_limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("e_location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E_CAT, new org.apache.thrift.meta_data.FieldMetaData("e_cat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E_SUBCAT, new org.apache.thrift.meta_data.FieldMetaData("e_subcat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E_HASHTAGS, new org.apache.thrift.meta_data.FieldMetaData("e_hashtags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E_USERS, new org.apache.thrift.meta_data.FieldMetaData("e_users", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E_TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("e_time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.A_ID, new org.apache.thrift.meta_data.FieldMetaData("a_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("e_summary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_EDIT, new org.apache.thrift.meta_data.FieldMetaData("is_edit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E_FUT_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("e_fut_image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_CLOSED, new org.apache.thrift.meta_data.FieldMetaData("is_closed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_event_args.class, metaDataMap);
    }

    public create_event_args() {
    }

    public create_event_args(
      String user_name,
      String e_id,
      String e_title_id,
      String e_title,
      String e_content,
      int e_date_time,
      int e_date_time_closing,
      int e_limit,
      String e_location,
      String e_cat,
      String e_subcat,
      String e_hashtags,
      String e_users,
      int e_time_created,
      String a_id,
      String e_summary,
      int is_edit,
      String e_fut_image,
      int is_closed)
    {
      this();
      this.user_name = user_name;
      this.e_id = e_id;
      this.e_title_id = e_title_id;
      this.e_title = e_title;
      this.e_content = e_content;
      this.e_date_time = e_date_time;
      setE_date_timeIsSet(true);
      this.e_date_time_closing = e_date_time_closing;
      setE_date_time_closingIsSet(true);
      this.e_limit = e_limit;
      setE_limitIsSet(true);
      this.e_location = e_location;
      this.e_cat = e_cat;
      this.e_subcat = e_subcat;
      this.e_hashtags = e_hashtags;
      this.e_users = e_users;
      this.e_time_created = e_time_created;
      setE_time_createdIsSet(true);
      this.a_id = a_id;
      this.e_summary = e_summary;
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      this.e_fut_image = e_fut_image;
      this.is_closed = is_closed;
      setIs_closedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_event_args(create_event_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetE_id()) {
        this.e_id = other.e_id;
      }
      if (other.isSetE_title_id()) {
        this.e_title_id = other.e_title_id;
      }
      if (other.isSetE_title()) {
        this.e_title = other.e_title;
      }
      if (other.isSetE_content()) {
        this.e_content = other.e_content;
      }
      this.e_date_time = other.e_date_time;
      this.e_date_time_closing = other.e_date_time_closing;
      this.e_limit = other.e_limit;
      if (other.isSetE_location()) {
        this.e_location = other.e_location;
      }
      if (other.isSetE_cat()) {
        this.e_cat = other.e_cat;
      }
      if (other.isSetE_subcat()) {
        this.e_subcat = other.e_subcat;
      }
      if (other.isSetE_hashtags()) {
        this.e_hashtags = other.e_hashtags;
      }
      if (other.isSetE_users()) {
        this.e_users = other.e_users;
      }
      this.e_time_created = other.e_time_created;
      if (other.isSetA_id()) {
        this.a_id = other.a_id;
      }
      if (other.isSetE_summary()) {
        this.e_summary = other.e_summary;
      }
      this.is_edit = other.is_edit;
      if (other.isSetE_fut_image()) {
        this.e_fut_image = other.e_fut_image;
      }
      this.is_closed = other.is_closed;
    }

    public create_event_args deepCopy() {
      return new create_event_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.e_id = null;
      this.e_title_id = null;
      this.e_title = null;
      this.e_content = null;
      setE_date_timeIsSet(false);
      this.e_date_time = 0;
      setE_date_time_closingIsSet(false);
      this.e_date_time_closing = 0;
      setE_limitIsSet(false);
      this.e_limit = 0;
      this.e_location = null;
      this.e_cat = null;
      this.e_subcat = null;
      this.e_hashtags = null;
      this.e_users = null;
      setE_time_createdIsSet(false);
      this.e_time_created = 0;
      this.a_id = null;
      this.e_summary = null;
      setIs_editIsSet(false);
      this.is_edit = 0;
      this.e_fut_image = null;
      setIs_closedIsSet(false);
      this.is_closed = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public create_event_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getE_id() {
      return this.e_id;
    }

    public create_event_args setE_id(String e_id) {
      this.e_id = e_id;
      return this;
    }

    public void unsetE_id() {
      this.e_id = null;
    }

    /** Returns true if field e_id is set (has been assigned a value) and false otherwise */
    public boolean isSetE_id() {
      return this.e_id != null;
    }

    public void setE_idIsSet(boolean value) {
      if (!value) {
        this.e_id = null;
      }
    }

    public String getE_title_id() {
      return this.e_title_id;
    }

    public create_event_args setE_title_id(String e_title_id) {
      this.e_title_id = e_title_id;
      return this;
    }

    public void unsetE_title_id() {
      this.e_title_id = null;
    }

    /** Returns true if field e_title_id is set (has been assigned a value) and false otherwise */
    public boolean isSetE_title_id() {
      return this.e_title_id != null;
    }

    public void setE_title_idIsSet(boolean value) {
      if (!value) {
        this.e_title_id = null;
      }
    }

    public String getE_title() {
      return this.e_title;
    }

    public create_event_args setE_title(String e_title) {
      this.e_title = e_title;
      return this;
    }

    public void unsetE_title() {
      this.e_title = null;
    }

    /** Returns true if field e_title is set (has been assigned a value) and false otherwise */
    public boolean isSetE_title() {
      return this.e_title != null;
    }

    public void setE_titleIsSet(boolean value) {
      if (!value) {
        this.e_title = null;
      }
    }

    public String getE_content() {
      return this.e_content;
    }

    public create_event_args setE_content(String e_content) {
      this.e_content = e_content;
      return this;
    }

    public void unsetE_content() {
      this.e_content = null;
    }

    /** Returns true if field e_content is set (has been assigned a value) and false otherwise */
    public boolean isSetE_content() {
      return this.e_content != null;
    }

    public void setE_contentIsSet(boolean value) {
      if (!value) {
        this.e_content = null;
      }
    }

    public int getE_date_time() {
      return this.e_date_time;
    }

    public create_event_args setE_date_time(int e_date_time) {
      this.e_date_time = e_date_time;
      setE_date_timeIsSet(true);
      return this;
    }

    public void unsetE_date_time() {
      __isset_bit_vector.clear(__E_DATE_TIME_ISSET_ID);
    }

    /** Returns true if field e_date_time is set (has been assigned a value) and false otherwise */
    public boolean isSetE_date_time() {
      return __isset_bit_vector.get(__E_DATE_TIME_ISSET_ID);
    }

    public void setE_date_timeIsSet(boolean value) {
      __isset_bit_vector.set(__E_DATE_TIME_ISSET_ID, value);
    }

    public int getE_date_time_closing() {
      return this.e_date_time_closing;
    }

    public create_event_args setE_date_time_closing(int e_date_time_closing) {
      this.e_date_time_closing = e_date_time_closing;
      setE_date_time_closingIsSet(true);
      return this;
    }

    public void unsetE_date_time_closing() {
      __isset_bit_vector.clear(__E_DATE_TIME_CLOSING_ISSET_ID);
    }

    /** Returns true if field e_date_time_closing is set (has been assigned a value) and false otherwise */
    public boolean isSetE_date_time_closing() {
      return __isset_bit_vector.get(__E_DATE_TIME_CLOSING_ISSET_ID);
    }

    public void setE_date_time_closingIsSet(boolean value) {
      __isset_bit_vector.set(__E_DATE_TIME_CLOSING_ISSET_ID, value);
    }

    public int getE_limit() {
      return this.e_limit;
    }

    public create_event_args setE_limit(int e_limit) {
      this.e_limit = e_limit;
      setE_limitIsSet(true);
      return this;
    }

    public void unsetE_limit() {
      __isset_bit_vector.clear(__E_LIMIT_ISSET_ID);
    }

    /** Returns true if field e_limit is set (has been assigned a value) and false otherwise */
    public boolean isSetE_limit() {
      return __isset_bit_vector.get(__E_LIMIT_ISSET_ID);
    }

    public void setE_limitIsSet(boolean value) {
      __isset_bit_vector.set(__E_LIMIT_ISSET_ID, value);
    }

    public String getE_location() {
      return this.e_location;
    }

    public create_event_args setE_location(String e_location) {
      this.e_location = e_location;
      return this;
    }

    public void unsetE_location() {
      this.e_location = null;
    }

    /** Returns true if field e_location is set (has been assigned a value) and false otherwise */
    public boolean isSetE_location() {
      return this.e_location != null;
    }

    public void setE_locationIsSet(boolean value) {
      if (!value) {
        this.e_location = null;
      }
    }

    public String getE_cat() {
      return this.e_cat;
    }

    public create_event_args setE_cat(String e_cat) {
      this.e_cat = e_cat;
      return this;
    }

    public void unsetE_cat() {
      this.e_cat = null;
    }

    /** Returns true if field e_cat is set (has been assigned a value) and false otherwise */
    public boolean isSetE_cat() {
      return this.e_cat != null;
    }

    public void setE_catIsSet(boolean value) {
      if (!value) {
        this.e_cat = null;
      }
    }

    public String getE_subcat() {
      return this.e_subcat;
    }

    public create_event_args setE_subcat(String e_subcat) {
      this.e_subcat = e_subcat;
      return this;
    }

    public void unsetE_subcat() {
      this.e_subcat = null;
    }

    /** Returns true if field e_subcat is set (has been assigned a value) and false otherwise */
    public boolean isSetE_subcat() {
      return this.e_subcat != null;
    }

    public void setE_subcatIsSet(boolean value) {
      if (!value) {
        this.e_subcat = null;
      }
    }

    public String getE_hashtags() {
      return this.e_hashtags;
    }

    public create_event_args setE_hashtags(String e_hashtags) {
      this.e_hashtags = e_hashtags;
      return this;
    }

    public void unsetE_hashtags() {
      this.e_hashtags = null;
    }

    /** Returns true if field e_hashtags is set (has been assigned a value) and false otherwise */
    public boolean isSetE_hashtags() {
      return this.e_hashtags != null;
    }

    public void setE_hashtagsIsSet(boolean value) {
      if (!value) {
        this.e_hashtags = null;
      }
    }

    public String getE_users() {
      return this.e_users;
    }

    public create_event_args setE_users(String e_users) {
      this.e_users = e_users;
      return this;
    }

    public void unsetE_users() {
      this.e_users = null;
    }

    /** Returns true if field e_users is set (has been assigned a value) and false otherwise */
    public boolean isSetE_users() {
      return this.e_users != null;
    }

    public void setE_usersIsSet(boolean value) {
      if (!value) {
        this.e_users = null;
      }
    }

    public int getE_time_created() {
      return this.e_time_created;
    }

    public create_event_args setE_time_created(int e_time_created) {
      this.e_time_created = e_time_created;
      setE_time_createdIsSet(true);
      return this;
    }

    public void unsetE_time_created() {
      __isset_bit_vector.clear(__E_TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field e_time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetE_time_created() {
      return __isset_bit_vector.get(__E_TIME_CREATED_ISSET_ID);
    }

    public void setE_time_createdIsSet(boolean value) {
      __isset_bit_vector.set(__E_TIME_CREATED_ISSET_ID, value);
    }

    public String getA_id() {
      return this.a_id;
    }

    public create_event_args setA_id(String a_id) {
      this.a_id = a_id;
      return this;
    }

    public void unsetA_id() {
      this.a_id = null;
    }

    /** Returns true if field a_id is set (has been assigned a value) and false otherwise */
    public boolean isSetA_id() {
      return this.a_id != null;
    }

    public void setA_idIsSet(boolean value) {
      if (!value) {
        this.a_id = null;
      }
    }

    public String getE_summary() {
      return this.e_summary;
    }

    public create_event_args setE_summary(String e_summary) {
      this.e_summary = e_summary;
      return this;
    }

    public void unsetE_summary() {
      this.e_summary = null;
    }

    /** Returns true if field e_summary is set (has been assigned a value) and false otherwise */
    public boolean isSetE_summary() {
      return this.e_summary != null;
    }

    public void setE_summaryIsSet(boolean value) {
      if (!value) {
        this.e_summary = null;
      }
    }

    public int getIs_edit() {
      return this.is_edit;
    }

    public create_event_args setIs_edit(int is_edit) {
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      return this;
    }

    public void unsetIs_edit() {
      __isset_bit_vector.clear(__IS_EDIT_ISSET_ID);
    }

    /** Returns true if field is_edit is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_edit() {
      return __isset_bit_vector.get(__IS_EDIT_ISSET_ID);
    }

    public void setIs_editIsSet(boolean value) {
      __isset_bit_vector.set(__IS_EDIT_ISSET_ID, value);
    }

    public String getE_fut_image() {
      return this.e_fut_image;
    }

    public create_event_args setE_fut_image(String e_fut_image) {
      this.e_fut_image = e_fut_image;
      return this;
    }

    public void unsetE_fut_image() {
      this.e_fut_image = null;
    }

    /** Returns true if field e_fut_image is set (has been assigned a value) and false otherwise */
    public boolean isSetE_fut_image() {
      return this.e_fut_image != null;
    }

    public void setE_fut_imageIsSet(boolean value) {
      if (!value) {
        this.e_fut_image = null;
      }
    }

    public int getIs_closed() {
      return this.is_closed;
    }

    public create_event_args setIs_closed(int is_closed) {
      this.is_closed = is_closed;
      setIs_closedIsSet(true);
      return this;
    }

    public void unsetIs_closed() {
      __isset_bit_vector.clear(__IS_CLOSED_ISSET_ID);
    }

    /** Returns true if field is_closed is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_closed() {
      return __isset_bit_vector.get(__IS_CLOSED_ISSET_ID);
    }

    public void setIs_closedIsSet(boolean value) {
      __isset_bit_vector.set(__IS_CLOSED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case E_ID:
        if (value == null) {
          unsetE_id();
        } else {
          setE_id((String)value);
        }
        break;

      case E_TITLE_ID:
        if (value == null) {
          unsetE_title_id();
        } else {
          setE_title_id((String)value);
        }
        break;

      case E_TITLE:
        if (value == null) {
          unsetE_title();
        } else {
          setE_title((String)value);
        }
        break;

      case E_CONTENT:
        if (value == null) {
          unsetE_content();
        } else {
          setE_content((String)value);
        }
        break;

      case E_DATE_TIME:
        if (value == null) {
          unsetE_date_time();
        } else {
          setE_date_time((Integer)value);
        }
        break;

      case E_DATE_TIME_CLOSING:
        if (value == null) {
          unsetE_date_time_closing();
        } else {
          setE_date_time_closing((Integer)value);
        }
        break;

      case E_LIMIT:
        if (value == null) {
          unsetE_limit();
        } else {
          setE_limit((Integer)value);
        }
        break;

      case E_LOCATION:
        if (value == null) {
          unsetE_location();
        } else {
          setE_location((String)value);
        }
        break;

      case E_CAT:
        if (value == null) {
          unsetE_cat();
        } else {
          setE_cat((String)value);
        }
        break;

      case E_SUBCAT:
        if (value == null) {
          unsetE_subcat();
        } else {
          setE_subcat((String)value);
        }
        break;

      case E_HASHTAGS:
        if (value == null) {
          unsetE_hashtags();
        } else {
          setE_hashtags((String)value);
        }
        break;

      case E_USERS:
        if (value == null) {
          unsetE_users();
        } else {
          setE_users((String)value);
        }
        break;

      case E_TIME_CREATED:
        if (value == null) {
          unsetE_time_created();
        } else {
          setE_time_created((Integer)value);
        }
        break;

      case A_ID:
        if (value == null) {
          unsetA_id();
        } else {
          setA_id((String)value);
        }
        break;

      case E_SUMMARY:
        if (value == null) {
          unsetE_summary();
        } else {
          setE_summary((String)value);
        }
        break;

      case IS_EDIT:
        if (value == null) {
          unsetIs_edit();
        } else {
          setIs_edit((Integer)value);
        }
        break;

      case E_FUT_IMAGE:
        if (value == null) {
          unsetE_fut_image();
        } else {
          setE_fut_image((String)value);
        }
        break;

      case IS_CLOSED:
        if (value == null) {
          unsetIs_closed();
        } else {
          setIs_closed((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case E_ID:
        return getE_id();

      case E_TITLE_ID:
        return getE_title_id();

      case E_TITLE:
        return getE_title();

      case E_CONTENT:
        return getE_content();

      case E_DATE_TIME:
        return Integer.valueOf(getE_date_time());

      case E_DATE_TIME_CLOSING:
        return Integer.valueOf(getE_date_time_closing());

      case E_LIMIT:
        return Integer.valueOf(getE_limit());

      case E_LOCATION:
        return getE_location();

      case E_CAT:
        return getE_cat();

      case E_SUBCAT:
        return getE_subcat();

      case E_HASHTAGS:
        return getE_hashtags();

      case E_USERS:
        return getE_users();

      case E_TIME_CREATED:
        return Integer.valueOf(getE_time_created());

      case A_ID:
        return getA_id();

      case E_SUMMARY:
        return getE_summary();

      case IS_EDIT:
        return Integer.valueOf(getIs_edit());

      case E_FUT_IMAGE:
        return getE_fut_image();

      case IS_CLOSED:
        return Integer.valueOf(getIs_closed());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case E_ID:
        return isSetE_id();
      case E_TITLE_ID:
        return isSetE_title_id();
      case E_TITLE:
        return isSetE_title();
      case E_CONTENT:
        return isSetE_content();
      case E_DATE_TIME:
        return isSetE_date_time();
      case E_DATE_TIME_CLOSING:
        return isSetE_date_time_closing();
      case E_LIMIT:
        return isSetE_limit();
      case E_LOCATION:
        return isSetE_location();
      case E_CAT:
        return isSetE_cat();
      case E_SUBCAT:
        return isSetE_subcat();
      case E_HASHTAGS:
        return isSetE_hashtags();
      case E_USERS:
        return isSetE_users();
      case E_TIME_CREATED:
        return isSetE_time_created();
      case A_ID:
        return isSetA_id();
      case E_SUMMARY:
        return isSetE_summary();
      case IS_EDIT:
        return isSetIs_edit();
      case E_FUT_IMAGE:
        return isSetE_fut_image();
      case IS_CLOSED:
        return isSetIs_closed();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_event_args)
        return this.equals((create_event_args)that);
      return false;
    }

    public boolean equals(create_event_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_e_id = true && this.isSetE_id();
      boolean that_present_e_id = true && that.isSetE_id();
      if (this_present_e_id || that_present_e_id) {
        if (!(this_present_e_id && that_present_e_id))
          return false;
        if (!this.e_id.equals(that.e_id))
          return false;
      }

      boolean this_present_e_title_id = true && this.isSetE_title_id();
      boolean that_present_e_title_id = true && that.isSetE_title_id();
      if (this_present_e_title_id || that_present_e_title_id) {
        if (!(this_present_e_title_id && that_present_e_title_id))
          return false;
        if (!this.e_title_id.equals(that.e_title_id))
          return false;
      }

      boolean this_present_e_title = true && this.isSetE_title();
      boolean that_present_e_title = true && that.isSetE_title();
      if (this_present_e_title || that_present_e_title) {
        if (!(this_present_e_title && that_present_e_title))
          return false;
        if (!this.e_title.equals(that.e_title))
          return false;
      }

      boolean this_present_e_content = true && this.isSetE_content();
      boolean that_present_e_content = true && that.isSetE_content();
      if (this_present_e_content || that_present_e_content) {
        if (!(this_present_e_content && that_present_e_content))
          return false;
        if (!this.e_content.equals(that.e_content))
          return false;
      }

      boolean this_present_e_date_time = true;
      boolean that_present_e_date_time = true;
      if (this_present_e_date_time || that_present_e_date_time) {
        if (!(this_present_e_date_time && that_present_e_date_time))
          return false;
        if (this.e_date_time != that.e_date_time)
          return false;
      }

      boolean this_present_e_date_time_closing = true;
      boolean that_present_e_date_time_closing = true;
      if (this_present_e_date_time_closing || that_present_e_date_time_closing) {
        if (!(this_present_e_date_time_closing && that_present_e_date_time_closing))
          return false;
        if (this.e_date_time_closing != that.e_date_time_closing)
          return false;
      }

      boolean this_present_e_limit = true;
      boolean that_present_e_limit = true;
      if (this_present_e_limit || that_present_e_limit) {
        if (!(this_present_e_limit && that_present_e_limit))
          return false;
        if (this.e_limit != that.e_limit)
          return false;
      }

      boolean this_present_e_location = true && this.isSetE_location();
      boolean that_present_e_location = true && that.isSetE_location();
      if (this_present_e_location || that_present_e_location) {
        if (!(this_present_e_location && that_present_e_location))
          return false;
        if (!this.e_location.equals(that.e_location))
          return false;
      }

      boolean this_present_e_cat = true && this.isSetE_cat();
      boolean that_present_e_cat = true && that.isSetE_cat();
      if (this_present_e_cat || that_present_e_cat) {
        if (!(this_present_e_cat && that_present_e_cat))
          return false;
        if (!this.e_cat.equals(that.e_cat))
          return false;
      }

      boolean this_present_e_subcat = true && this.isSetE_subcat();
      boolean that_present_e_subcat = true && that.isSetE_subcat();
      if (this_present_e_subcat || that_present_e_subcat) {
        if (!(this_present_e_subcat && that_present_e_subcat))
          return false;
        if (!this.e_subcat.equals(that.e_subcat))
          return false;
      }

      boolean this_present_e_hashtags = true && this.isSetE_hashtags();
      boolean that_present_e_hashtags = true && that.isSetE_hashtags();
      if (this_present_e_hashtags || that_present_e_hashtags) {
        if (!(this_present_e_hashtags && that_present_e_hashtags))
          return false;
        if (!this.e_hashtags.equals(that.e_hashtags))
          return false;
      }

      boolean this_present_e_users = true && this.isSetE_users();
      boolean that_present_e_users = true && that.isSetE_users();
      if (this_present_e_users || that_present_e_users) {
        if (!(this_present_e_users && that_present_e_users))
          return false;
        if (!this.e_users.equals(that.e_users))
          return false;
      }

      boolean this_present_e_time_created = true;
      boolean that_present_e_time_created = true;
      if (this_present_e_time_created || that_present_e_time_created) {
        if (!(this_present_e_time_created && that_present_e_time_created))
          return false;
        if (this.e_time_created != that.e_time_created)
          return false;
      }

      boolean this_present_a_id = true && this.isSetA_id();
      boolean that_present_a_id = true && that.isSetA_id();
      if (this_present_a_id || that_present_a_id) {
        if (!(this_present_a_id && that_present_a_id))
          return false;
        if (!this.a_id.equals(that.a_id))
          return false;
      }

      boolean this_present_e_summary = true && this.isSetE_summary();
      boolean that_present_e_summary = true && that.isSetE_summary();
      if (this_present_e_summary || that_present_e_summary) {
        if (!(this_present_e_summary && that_present_e_summary))
          return false;
        if (!this.e_summary.equals(that.e_summary))
          return false;
      }

      boolean this_present_is_edit = true;
      boolean that_present_is_edit = true;
      if (this_present_is_edit || that_present_is_edit) {
        if (!(this_present_is_edit && that_present_is_edit))
          return false;
        if (this.is_edit != that.is_edit)
          return false;
      }

      boolean this_present_e_fut_image = true && this.isSetE_fut_image();
      boolean that_present_e_fut_image = true && that.isSetE_fut_image();
      if (this_present_e_fut_image || that_present_e_fut_image) {
        if (!(this_present_e_fut_image && that_present_e_fut_image))
          return false;
        if (!this.e_fut_image.equals(that.e_fut_image))
          return false;
      }

      boolean this_present_is_closed = true;
      boolean that_present_is_closed = true;
      if (this_present_is_closed || that_present_is_closed) {
        if (!(this_present_is_closed && that_present_is_closed))
          return false;
        if (this.is_closed != that.is_closed)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_event_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_event_args typedOther = (create_event_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_id()).compareTo(typedOther.isSetE_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_id, typedOther.e_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_title_id()).compareTo(typedOther.isSetE_title_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_title_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_title_id, typedOther.e_title_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_title()).compareTo(typedOther.isSetE_title());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_title()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_title, typedOther.e_title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_content()).compareTo(typedOther.isSetE_content());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_content()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_content, typedOther.e_content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_date_time()).compareTo(typedOther.isSetE_date_time());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_date_time()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_date_time, typedOther.e_date_time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_date_time_closing()).compareTo(typedOther.isSetE_date_time_closing());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_date_time_closing()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_date_time_closing, typedOther.e_date_time_closing);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_limit()).compareTo(typedOther.isSetE_limit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_limit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_limit, typedOther.e_limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_location()).compareTo(typedOther.isSetE_location());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_location()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_location, typedOther.e_location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_cat()).compareTo(typedOther.isSetE_cat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_cat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_cat, typedOther.e_cat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_subcat()).compareTo(typedOther.isSetE_subcat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_subcat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_subcat, typedOther.e_subcat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_hashtags()).compareTo(typedOther.isSetE_hashtags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_hashtags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_hashtags, typedOther.e_hashtags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_users()).compareTo(typedOther.isSetE_users());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_users()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_users, typedOther.e_users);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_time_created()).compareTo(typedOther.isSetE_time_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_time_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_time_created, typedOther.e_time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetA_id()).compareTo(typedOther.isSetA_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a_id, typedOther.a_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_summary()).compareTo(typedOther.isSetE_summary());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_summary()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_summary, typedOther.e_summary);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_edit()).compareTo(typedOther.isSetIs_edit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_edit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_edit, typedOther.is_edit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE_fut_image()).compareTo(typedOther.isSetE_fut_image());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE_fut_image()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e_fut_image, typedOther.e_fut_image);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_closed()).compareTo(typedOther.isSetIs_closed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_closed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_closed, typedOther.is_closed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_event_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_id:");
      if (this.e_id == null) {
        sb.append("null");
      } else {
        sb.append(this.e_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_title_id:");
      if (this.e_title_id == null) {
        sb.append("null");
      } else {
        sb.append(this.e_title_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_title:");
      if (this.e_title == null) {
        sb.append("null");
      } else {
        sb.append(this.e_title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_content:");
      if (this.e_content == null) {
        sb.append("null");
      } else {
        sb.append(this.e_content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_date_time:");
      sb.append(this.e_date_time);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_date_time_closing:");
      sb.append(this.e_date_time_closing);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_limit:");
      sb.append(this.e_limit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_location:");
      if (this.e_location == null) {
        sb.append("null");
      } else {
        sb.append(this.e_location);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_cat:");
      if (this.e_cat == null) {
        sb.append("null");
      } else {
        sb.append(this.e_cat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_subcat:");
      if (this.e_subcat == null) {
        sb.append("null");
      } else {
        sb.append(this.e_subcat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_hashtags:");
      if (this.e_hashtags == null) {
        sb.append("null");
      } else {
        sb.append(this.e_hashtags);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_users:");
      if (this.e_users == null) {
        sb.append("null");
      } else {
        sb.append(this.e_users);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_time_created:");
      sb.append(this.e_time_created);
      first = false;
      if (!first) sb.append(", ");
      sb.append("a_id:");
      if (this.a_id == null) {
        sb.append("null");
      } else {
        sb.append(this.a_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_summary:");
      if (this.e_summary == null) {
        sb.append("null");
      } else {
        sb.append(this.e_summary);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_edit:");
      sb.append(this.is_edit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e_fut_image:");
      if (this.e_fut_image == null) {
        sb.append("null");
      } else {
        sb.append(this.e_fut_image);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_closed:");
      sb.append(this.is_closed);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_event_argsStandardSchemeFactory implements SchemeFactory {
      public create_event_argsStandardScheme getScheme() {
        return new create_event_argsStandardScheme();
      }
    }

    private static class create_event_argsStandardScheme extends StandardScheme<create_event_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_event_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e_id = iprot.readString();
                struct.setE_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E_TITLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e_title_id = iprot.readString();
                struct.setE_title_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // E_TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e_title = iprot.readString();
                struct.setE_titleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // E_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e_content = iprot.readString();
                struct.setE_contentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // E_DATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.e_date_time = iprot.readI32();
                struct.setE_date_timeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // E_DATE_TIME_CLOSING
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.e_date_time_closing = iprot.readI32();
                struct.setE_date_time_closingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // E_LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.e_limit = iprot.readI32();
                struct.setE_limitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // E_LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e_location = iprot.readString();
                struct.setE_locationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // E_CAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e_cat = iprot.readString();
                struct.setE_catIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // E_SUBCAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e_subcat = iprot.readString();
                struct.setE_subcatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // E_HASHTAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e_hashtags = iprot.readString();
                struct.setE_hashtagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // E_USERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e_users = iprot.readString();
                struct.setE_usersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // E_TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.e_time_created = iprot.readI32();
                struct.setE_time_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // A_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a_id = iprot.readString();
                struct.setA_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 16: // E_SUMMARY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e_summary = iprot.readString();
                struct.setE_summaryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 17: // IS_EDIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_edit = iprot.readI32();
                struct.setIs_editIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 18: // E_FUT_IMAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e_fut_image = iprot.readString();
                struct.setE_fut_imageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 19: // IS_CLOSED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_closed = iprot.readI32();
                struct.setIs_closedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_event_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.e_id != null) {
          oprot.writeFieldBegin(E_ID_FIELD_DESC);
          oprot.writeString(struct.e_id);
          oprot.writeFieldEnd();
        }
        if (struct.e_title_id != null) {
          oprot.writeFieldBegin(E_TITLE_ID_FIELD_DESC);
          oprot.writeString(struct.e_title_id);
          oprot.writeFieldEnd();
        }
        if (struct.e_title != null) {
          oprot.writeFieldBegin(E_TITLE_FIELD_DESC);
          oprot.writeString(struct.e_title);
          oprot.writeFieldEnd();
        }
        if (struct.e_content != null) {
          oprot.writeFieldBegin(E_CONTENT_FIELD_DESC);
          oprot.writeString(struct.e_content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(E_DATE_TIME_FIELD_DESC);
        oprot.writeI32(struct.e_date_time);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(E_DATE_TIME_CLOSING_FIELD_DESC);
        oprot.writeI32(struct.e_date_time_closing);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(E_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.e_limit);
        oprot.writeFieldEnd();
        if (struct.e_location != null) {
          oprot.writeFieldBegin(E_LOCATION_FIELD_DESC);
          oprot.writeString(struct.e_location);
          oprot.writeFieldEnd();
        }
        if (struct.e_cat != null) {
          oprot.writeFieldBegin(E_CAT_FIELD_DESC);
          oprot.writeString(struct.e_cat);
          oprot.writeFieldEnd();
        }
        if (struct.e_subcat != null) {
          oprot.writeFieldBegin(E_SUBCAT_FIELD_DESC);
          oprot.writeString(struct.e_subcat);
          oprot.writeFieldEnd();
        }
        if (struct.e_hashtags != null) {
          oprot.writeFieldBegin(E_HASHTAGS_FIELD_DESC);
          oprot.writeString(struct.e_hashtags);
          oprot.writeFieldEnd();
        }
        if (struct.e_users != null) {
          oprot.writeFieldBegin(E_USERS_FIELD_DESC);
          oprot.writeString(struct.e_users);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(E_TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.e_time_created);
        oprot.writeFieldEnd();
        if (struct.a_id != null) {
          oprot.writeFieldBegin(A_ID_FIELD_DESC);
          oprot.writeString(struct.a_id);
          oprot.writeFieldEnd();
        }
        if (struct.e_summary != null) {
          oprot.writeFieldBegin(E_SUMMARY_FIELD_DESC);
          oprot.writeString(struct.e_summary);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_EDIT_FIELD_DESC);
        oprot.writeI32(struct.is_edit);
        oprot.writeFieldEnd();
        if (struct.e_fut_image != null) {
          oprot.writeFieldBegin(E_FUT_IMAGE_FIELD_DESC);
          oprot.writeString(struct.e_fut_image);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_CLOSED_FIELD_DESC);
        oprot.writeI32(struct.is_closed);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_event_argsTupleSchemeFactory implements SchemeFactory {
      public create_event_argsTupleScheme getScheme() {
        return new create_event_argsTupleScheme();
      }
    }

    private static class create_event_argsTupleScheme extends TupleScheme<create_event_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_event_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetE_id()) {
          optionals.set(1);
        }
        if (struct.isSetE_title_id()) {
          optionals.set(2);
        }
        if (struct.isSetE_title()) {
          optionals.set(3);
        }
        if (struct.isSetE_content()) {
          optionals.set(4);
        }
        if (struct.isSetE_date_time()) {
          optionals.set(5);
        }
        if (struct.isSetE_date_time_closing()) {
          optionals.set(6);
        }
        if (struct.isSetE_limit()) {
          optionals.set(7);
        }
        if (struct.isSetE_location()) {
          optionals.set(8);
        }
        if (struct.isSetE_cat()) {
          optionals.set(9);
        }
        if (struct.isSetE_subcat()) {
          optionals.set(10);
        }
        if (struct.isSetE_hashtags()) {
          optionals.set(11);
        }
        if (struct.isSetE_users()) {
          optionals.set(12);
        }
        if (struct.isSetE_time_created()) {
          optionals.set(13);
        }
        if (struct.isSetA_id()) {
          optionals.set(14);
        }
        if (struct.isSetE_summary()) {
          optionals.set(15);
        }
        if (struct.isSetIs_edit()) {
          optionals.set(16);
        }
        if (struct.isSetE_fut_image()) {
          optionals.set(17);
        }
        if (struct.isSetIs_closed()) {
          optionals.set(18);
        }
        oprot.writeBitSet(optionals, 19);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetE_id()) {
          oprot.writeString(struct.e_id);
        }
        if (struct.isSetE_title_id()) {
          oprot.writeString(struct.e_title_id);
        }
        if (struct.isSetE_title()) {
          oprot.writeString(struct.e_title);
        }
        if (struct.isSetE_content()) {
          oprot.writeString(struct.e_content);
        }
        if (struct.isSetE_date_time()) {
          oprot.writeI32(struct.e_date_time);
        }
        if (struct.isSetE_date_time_closing()) {
          oprot.writeI32(struct.e_date_time_closing);
        }
        if (struct.isSetE_limit()) {
          oprot.writeI32(struct.e_limit);
        }
        if (struct.isSetE_location()) {
          oprot.writeString(struct.e_location);
        }
        if (struct.isSetE_cat()) {
          oprot.writeString(struct.e_cat);
        }
        if (struct.isSetE_subcat()) {
          oprot.writeString(struct.e_subcat);
        }
        if (struct.isSetE_hashtags()) {
          oprot.writeString(struct.e_hashtags);
        }
        if (struct.isSetE_users()) {
          oprot.writeString(struct.e_users);
        }
        if (struct.isSetE_time_created()) {
          oprot.writeI32(struct.e_time_created);
        }
        if (struct.isSetA_id()) {
          oprot.writeString(struct.a_id);
        }
        if (struct.isSetE_summary()) {
          oprot.writeString(struct.e_summary);
        }
        if (struct.isSetIs_edit()) {
          oprot.writeI32(struct.is_edit);
        }
        if (struct.isSetE_fut_image()) {
          oprot.writeString(struct.e_fut_image);
        }
        if (struct.isSetIs_closed()) {
          oprot.writeI32(struct.is_closed);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_event_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(19);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e_id = iprot.readString();
          struct.setE_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.e_title_id = iprot.readString();
          struct.setE_title_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.e_title = iprot.readString();
          struct.setE_titleIsSet(true);
        }
        if (incoming.get(4)) {
          struct.e_content = iprot.readString();
          struct.setE_contentIsSet(true);
        }
        if (incoming.get(5)) {
          struct.e_date_time = iprot.readI32();
          struct.setE_date_timeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.e_date_time_closing = iprot.readI32();
          struct.setE_date_time_closingIsSet(true);
        }
        if (incoming.get(7)) {
          struct.e_limit = iprot.readI32();
          struct.setE_limitIsSet(true);
        }
        if (incoming.get(8)) {
          struct.e_location = iprot.readString();
          struct.setE_locationIsSet(true);
        }
        if (incoming.get(9)) {
          struct.e_cat = iprot.readString();
          struct.setE_catIsSet(true);
        }
        if (incoming.get(10)) {
          struct.e_subcat = iprot.readString();
          struct.setE_subcatIsSet(true);
        }
        if (incoming.get(11)) {
          struct.e_hashtags = iprot.readString();
          struct.setE_hashtagsIsSet(true);
        }
        if (incoming.get(12)) {
          struct.e_users = iprot.readString();
          struct.setE_usersIsSet(true);
        }
        if (incoming.get(13)) {
          struct.e_time_created = iprot.readI32();
          struct.setE_time_createdIsSet(true);
        }
        if (incoming.get(14)) {
          struct.a_id = iprot.readString();
          struct.setA_idIsSet(true);
        }
        if (incoming.get(15)) {
          struct.e_summary = iprot.readString();
          struct.setE_summaryIsSet(true);
        }
        if (incoming.get(16)) {
          struct.is_edit = iprot.readI32();
          struct.setIs_editIsSet(true);
        }
        if (incoming.get(17)) {
          struct.e_fut_image = iprot.readString();
          struct.setE_fut_imageIsSet(true);
        }
        if (incoming.get(18)) {
          struct.is_closed = iprot.readI32();
          struct.setIs_closedIsSet(true);
        }
      }
    }

  }

  public static class create_event_result implements org.apache.thrift.TBase<create_event_result, create_event_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_event_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_event_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_event_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_event_result.class, metaDataMap);
    }

    public create_event_result() {
    }

    public create_event_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_event_result(create_event_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public create_event_result deepCopy() {
      return new create_event_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public create_event_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_event_result)
        return this.equals((create_event_result)that);
      return false;
    }

    public boolean equals(create_event_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_event_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_event_result typedOther = (create_event_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_event_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_event_resultStandardSchemeFactory implements SchemeFactory {
      public create_event_resultStandardScheme getScheme() {
        return new create_event_resultStandardScheme();
      }
    }

    private static class create_event_resultStandardScheme extends StandardScheme<create_event_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_event_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_event_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_event_resultTupleSchemeFactory implements SchemeFactory {
      public create_event_resultTupleScheme getScheme() {
        return new create_event_resultTupleScheme();
      }
    }

    private static class create_event_resultTupleScheme extends TupleScheme<create_event_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_event_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_event_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class report_spam_args implements org.apache.thrift.TBase<report_spam_args, report_spam_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("report_spam_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new report_spam_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new report_spam_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String item_id; // required
    public String user_name; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ITEM_ID((short)2, "item_id"),
      USER_NAME((short)3, "user_name"),
      TIME((short)4, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          case 3: // USER_NAME
            return USER_NAME;
          case 4: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(report_spam_args.class, metaDataMap);
    }

    public report_spam_args() {
    }

    public report_spam_args(
      String item_type,
      String item_id,
      String user_name,
      int time)
    {
      this();
      this.item_type = item_type;
      this.item_id = item_id;
      this.user_name = user_name;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public report_spam_args(report_spam_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      this.time = other.time;
    }

    public report_spam_args deepCopy() {
      return new report_spam_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.item_id = null;
      this.user_name = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public report_spam_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public report_spam_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public report_spam_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public report_spam_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ITEM_ID:
        return getItem_id();

      case USER_NAME:
        return getUser_name();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_ID:
        return isSetItem_id();
      case USER_NAME:
        return isSetUser_name();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof report_spam_args)
        return this.equals((report_spam_args)that);
      return false;
    }

    public boolean equals(report_spam_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(report_spam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      report_spam_args typedOther = (report_spam_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("report_spam_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class report_spam_argsStandardSchemeFactory implements SchemeFactory {
      public report_spam_argsStandardScheme getScheme() {
        return new report_spam_argsStandardScheme();
      }
    }

    private static class report_spam_argsStandardScheme extends StandardScheme<report_spam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, report_spam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, report_spam_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class report_spam_argsTupleSchemeFactory implements SchemeFactory {
      public report_spam_argsTupleScheme getScheme() {
        return new report_spam_argsTupleScheme();
      }
    }

    private static class report_spam_argsTupleScheme extends TupleScheme<report_spam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, report_spam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetItem_id()) {
          optionals.set(1);
        }
        if (struct.isSetUser_name()) {
          optionals.set(2);
        }
        if (struct.isSetTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, report_spam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class report_spam_result implements org.apache.thrift.TBase<report_spam_result, report_spam_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("report_spam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new report_spam_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new report_spam_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(report_spam_result.class, metaDataMap);
    }

    public report_spam_result() {
    }

    public report_spam_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public report_spam_result(report_spam_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public report_spam_result deepCopy() {
      return new report_spam_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public report_spam_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof report_spam_result)
        return this.equals((report_spam_result)that);
      return false;
    }

    public boolean equals(report_spam_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(report_spam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      report_spam_result typedOther = (report_spam_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("report_spam_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class report_spam_resultStandardSchemeFactory implements SchemeFactory {
      public report_spam_resultStandardScheme getScheme() {
        return new report_spam_resultStandardScheme();
      }
    }

    private static class report_spam_resultStandardScheme extends StandardScheme<report_spam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, report_spam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, report_spam_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class report_spam_resultTupleSchemeFactory implements SchemeFactory {
      public report_spam_resultTupleScheme getScheme() {
        return new report_spam_resultTupleScheme();
      }
    }

    private static class report_spam_resultTupleScheme extends TupleScheme<report_spam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, report_spam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, report_spam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_event_args implements org.apache.thrift.TBase<delete_event_args, delete_event_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_event_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_event_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_event_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_event_args.class, metaDataMap);
    }

    public delete_event_args() {
    }

    public delete_event_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_event_args(delete_event_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public delete_event_args deepCopy() {
      return new delete_event_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public delete_event_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_event_args)
        return this.equals((delete_event_args)that);
      return false;
    }

    public boolean equals(delete_event_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_event_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_event_args typedOther = (delete_event_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_event_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_event_argsStandardSchemeFactory implements SchemeFactory {
      public delete_event_argsStandardScheme getScheme() {
        return new delete_event_argsStandardScheme();
      }
    }

    private static class delete_event_argsStandardScheme extends StandardScheme<delete_event_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_event_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_event_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_event_argsTupleSchemeFactory implements SchemeFactory {
      public delete_event_argsTupleScheme getScheme() {
        return new delete_event_argsTupleScheme();
      }
    }

    private static class delete_event_argsTupleScheme extends TupleScheme<delete_event_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_event_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_event_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class delete_event_result implements org.apache.thrift.TBase<delete_event_result, delete_event_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_event_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_event_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_event_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_event_result.class, metaDataMap);
    }

    public delete_event_result() {
    }

    public delete_event_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_event_result(delete_event_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public delete_event_result deepCopy() {
      return new delete_event_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delete_event_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_event_result)
        return this.equals((delete_event_result)that);
      return false;
    }

    public boolean equals(delete_event_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_event_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_event_result typedOther = (delete_event_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_event_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_event_resultStandardSchemeFactory implements SchemeFactory {
      public delete_event_resultStandardScheme getScheme() {
        return new delete_event_resultStandardScheme();
      }
    }

    private static class delete_event_resultStandardScheme extends StandardScheme<delete_event_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_event_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_event_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_event_resultTupleSchemeFactory implements SchemeFactory {
      public delete_event_resultTupleScheme getScheme() {
        return new delete_event_resultTupleScheme();
      }
    }

    private static class delete_event_resultTupleScheme extends TupleScheme<delete_event_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_event_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_event_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class event_response_args implements org.apache.thrift.TBase<event_response_args, event_response_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("event_response_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new event_response_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new event_response_argsTupleSchemeFactory());
    }

    public String id; // required
    public String user_name; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      USER_NAME((short)2, "user_name"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(event_response_args.class, metaDataMap);
    }

    public event_response_args() {
    }

    public event_response_args(
      String id,
      String user_name,
      int time)
    {
      this();
      this.id = id;
      this.user_name = user_name;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public event_response_args(event_response_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      this.time = other.time;
    }

    public event_response_args deepCopy() {
      return new event_response_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.user_name = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getId() {
      return this.id;
    }

    public event_response_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public event_response_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public event_response_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case USER_NAME:
        return getUser_name();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case USER_NAME:
        return isSetUser_name();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof event_response_args)
        return this.equals((event_response_args)that);
      return false;
    }

    public boolean equals(event_response_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(event_response_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      event_response_args typedOther = (event_response_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("event_response_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class event_response_argsStandardSchemeFactory implements SchemeFactory {
      public event_response_argsStandardScheme getScheme() {
        return new event_response_argsStandardScheme();
      }
    }

    private static class event_response_argsStandardScheme extends StandardScheme<event_response_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, event_response_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, event_response_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class event_response_argsTupleSchemeFactory implements SchemeFactory {
      public event_response_argsTupleScheme getScheme() {
        return new event_response_argsTupleScheme();
      }
    }

    private static class event_response_argsTupleScheme extends TupleScheme<event_response_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, event_response_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, event_response_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class event_response_result implements org.apache.thrift.TBase<event_response_result, event_response_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("event_response_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new event_response_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new event_response_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(event_response_result.class, metaDataMap);
    }

    public event_response_result() {
    }

    public event_response_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public event_response_result(event_response_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public event_response_result deepCopy() {
      return new event_response_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public event_response_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof event_response_result)
        return this.equals((event_response_result)that);
      return false;
    }

    public boolean equals(event_response_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(event_response_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      event_response_result typedOther = (event_response_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("event_response_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class event_response_resultStandardSchemeFactory implements SchemeFactory {
      public event_response_resultStandardScheme getScheme() {
        return new event_response_resultStandardScheme();
      }
    }

    private static class event_response_resultStandardScheme extends StandardScheme<event_response_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, event_response_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, event_response_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class event_response_resultTupleSchemeFactory implements SchemeFactory {
      public event_response_resultTupleScheme getScheme() {
        return new event_response_resultTupleScheme();
      }
    }

    private static class event_response_resultTupleScheme extends TupleScheme<event_response_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, event_response_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, event_response_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class event_invite_args implements org.apache.thrift.TBase<event_invite_args, event_invite_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("event_invite_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("users", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new event_invite_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new event_invite_argsTupleSchemeFactory());
    }

    public String id; // required
    public String user_name; // required
    public String users; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      USER_NAME((short)2, "user_name"),
      USERS((short)3, "users"),
      TIME((short)4, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // USERS
            return USERS;
          case 4: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERS, new org.apache.thrift.meta_data.FieldMetaData("users", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(event_invite_args.class, metaDataMap);
    }

    public event_invite_args() {
    }

    public event_invite_args(
      String id,
      String user_name,
      String users,
      int time)
    {
      this();
      this.id = id;
      this.user_name = user_name;
      this.users = users;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public event_invite_args(event_invite_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetUsers()) {
        this.users = other.users;
      }
      this.time = other.time;
    }

    public event_invite_args deepCopy() {
      return new event_invite_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.user_name = null;
      this.users = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getId() {
      return this.id;
    }

    public event_invite_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public event_invite_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getUsers() {
      return this.users;
    }

    public event_invite_args setUsers(String users) {
      this.users = users;
      return this;
    }

    public void unsetUsers() {
      this.users = null;
    }

    /** Returns true if field users is set (has been assigned a value) and false otherwise */
    public boolean isSetUsers() {
      return this.users != null;
    }

    public void setUsersIsSet(boolean value) {
      if (!value) {
        this.users = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public event_invite_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case USERS:
        if (value == null) {
          unsetUsers();
        } else {
          setUsers((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case USER_NAME:
        return getUser_name();

      case USERS:
        return getUsers();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case USER_NAME:
        return isSetUser_name();
      case USERS:
        return isSetUsers();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof event_invite_args)
        return this.equals((event_invite_args)that);
      return false;
    }

    public boolean equals(event_invite_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_users = true && this.isSetUsers();
      boolean that_present_users = true && that.isSetUsers();
      if (this_present_users || that_present_users) {
        if (!(this_present_users && that_present_users))
          return false;
        if (!this.users.equals(that.users))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(event_invite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      event_invite_args typedOther = (event_invite_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsers()).compareTo(typedOther.isSetUsers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.users, typedOther.users);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("event_invite_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("users:");
      if (this.users == null) {
        sb.append("null");
      } else {
        sb.append(this.users);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class event_invite_argsStandardSchemeFactory implements SchemeFactory {
      public event_invite_argsStandardScheme getScheme() {
        return new event_invite_argsStandardScheme();
      }
    }

    private static class event_invite_argsStandardScheme extends StandardScheme<event_invite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, event_invite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.users = iprot.readString();
                struct.setUsersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, event_invite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.users != null) {
          oprot.writeFieldBegin(USERS_FIELD_DESC);
          oprot.writeString(struct.users);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class event_invite_argsTupleSchemeFactory implements SchemeFactory {
      public event_invite_argsTupleScheme getScheme() {
        return new event_invite_argsTupleScheme();
      }
    }

    private static class event_invite_argsTupleScheme extends TupleScheme<event_invite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, event_invite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name()) {
          optionals.set(1);
        }
        if (struct.isSetUsers()) {
          optionals.set(2);
        }
        if (struct.isSetTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetUsers()) {
          oprot.writeString(struct.users);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, event_invite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.users = iprot.readString();
          struct.setUsersIsSet(true);
        }
        if (incoming.get(3)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class event_invite_result implements org.apache.thrift.TBase<event_invite_result, event_invite_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("event_invite_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new event_invite_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new event_invite_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(event_invite_result.class, metaDataMap);
    }

    public event_invite_result() {
    }

    public event_invite_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public event_invite_result(event_invite_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public event_invite_result deepCopy() {
      return new event_invite_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public event_invite_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof event_invite_result)
        return this.equals((event_invite_result)that);
      return false;
    }

    public boolean equals(event_invite_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(event_invite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      event_invite_result typedOther = (event_invite_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("event_invite_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class event_invite_resultStandardSchemeFactory implements SchemeFactory {
      public event_invite_resultStandardScheme getScheme() {
        return new event_invite_resultStandardScheme();
      }
    }

    private static class event_invite_resultStandardScheme extends StandardScheme<event_invite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, event_invite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, event_invite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class event_invite_resultTupleSchemeFactory implements SchemeFactory {
      public event_invite_resultTupleScheme getScheme() {
        return new event_invite_resultTupleScheme();
      }
    }

    private static class event_invite_resultTupleScheme extends TupleScheme<event_invite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, event_invite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, event_invite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class event_notify_args implements org.apache.thrift.TBase<event_notify_args, event_notify_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("event_notify_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new event_notify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new event_notify_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String id; // required
    public String content; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      ID((short)2, "id"),
      CONTENT((short)3, "content"),
      TIME((short)4, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // ID
            return ID;
          case 3: // CONTENT
            return CONTENT;
          case 4: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(event_notify_args.class, metaDataMap);
    }

    public event_notify_args() {
    }

    public event_notify_args(
      String user_name,
      String id,
      String content,
      int time)
    {
      this();
      this.user_name = user_name;
      this.id = id;
      this.content = content;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public event_notify_args(event_notify_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      this.time = other.time;
    }

    public event_notify_args deepCopy() {
      return new event_notify_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.id = null;
      this.content = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public event_notify_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public event_notify_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public event_notify_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public event_notify_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case ID:
        return getId();

      case CONTENT:
        return getContent();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case ID:
        return isSetId();
      case CONTENT:
        return isSetContent();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof event_notify_args)
        return this.equals((event_notify_args)that);
      return false;
    }

    public boolean equals(event_notify_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(event_notify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      event_notify_args typedOther = (event_notify_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("event_notify_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class event_notify_argsStandardSchemeFactory implements SchemeFactory {
      public event_notify_argsStandardScheme getScheme() {
        return new event_notify_argsStandardScheme();
      }
    }

    private static class event_notify_argsStandardScheme extends StandardScheme<event_notify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, event_notify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, event_notify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class event_notify_argsTupleSchemeFactory implements SchemeFactory {
      public event_notify_argsTupleScheme getScheme() {
        return new event_notify_argsTupleScheme();
      }
    }

    private static class event_notify_argsTupleScheme extends TupleScheme<event_notify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, event_notify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        if (struct.isSetContent()) {
          optionals.set(2);
        }
        if (struct.isSetTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, event_notify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class event_notify_result implements org.apache.thrift.TBase<event_notify_result, event_notify_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("event_notify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new event_notify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new event_notify_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(event_notify_result.class, metaDataMap);
    }

    public event_notify_result() {
    }

    public event_notify_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public event_notify_result(event_notify_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public event_notify_result deepCopy() {
      return new event_notify_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public event_notify_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof event_notify_result)
        return this.equals((event_notify_result)that);
      return false;
    }

    public boolean equals(event_notify_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(event_notify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      event_notify_result typedOther = (event_notify_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("event_notify_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class event_notify_resultStandardSchemeFactory implements SchemeFactory {
      public event_notify_resultStandardScheme getScheme() {
        return new event_notify_resultStandardScheme();
      }
    }

    private static class event_notify_resultStandardScheme extends StandardScheme<event_notify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, event_notify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, event_notify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class event_notify_resultTupleSchemeFactory implements SchemeFactory {
      public event_notify_resultTupleScheme getScheme() {
        return new event_notify_resultTupleScheme();
      }
    }

    private static class event_notify_resultTupleScheme extends TupleScheme<event_notify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, event_notify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, event_notify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class event_changeresponse_args implements org.apache.thrift.TBase<event_changeresponse_args, event_changeresponse_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("event_changeresponse_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new event_changeresponse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new event_changeresponse_argsTupleSchemeFactory());
    }

    public String id; // required
    public String user_name; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      USER_NAME((short)2, "user_name"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(event_changeresponse_args.class, metaDataMap);
    }

    public event_changeresponse_args() {
    }

    public event_changeresponse_args(
      String id,
      String user_name,
      int time)
    {
      this();
      this.id = id;
      this.user_name = user_name;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public event_changeresponse_args(event_changeresponse_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      this.time = other.time;
    }

    public event_changeresponse_args deepCopy() {
      return new event_changeresponse_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.user_name = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getId() {
      return this.id;
    }

    public event_changeresponse_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public event_changeresponse_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public event_changeresponse_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case USER_NAME:
        return getUser_name();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case USER_NAME:
        return isSetUser_name();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof event_changeresponse_args)
        return this.equals((event_changeresponse_args)that);
      return false;
    }

    public boolean equals(event_changeresponse_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(event_changeresponse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      event_changeresponse_args typedOther = (event_changeresponse_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("event_changeresponse_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class event_changeresponse_argsStandardSchemeFactory implements SchemeFactory {
      public event_changeresponse_argsStandardScheme getScheme() {
        return new event_changeresponse_argsStandardScheme();
      }
    }

    private static class event_changeresponse_argsStandardScheme extends StandardScheme<event_changeresponse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, event_changeresponse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, event_changeresponse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class event_changeresponse_argsTupleSchemeFactory implements SchemeFactory {
      public event_changeresponse_argsTupleScheme getScheme() {
        return new event_changeresponse_argsTupleScheme();
      }
    }

    private static class event_changeresponse_argsTupleScheme extends TupleScheme<event_changeresponse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, event_changeresponse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, event_changeresponse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class event_changeresponse_result implements org.apache.thrift.TBase<event_changeresponse_result, event_changeresponse_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("event_changeresponse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new event_changeresponse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new event_changeresponse_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(event_changeresponse_result.class, metaDataMap);
    }

    public event_changeresponse_result() {
    }

    public event_changeresponse_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public event_changeresponse_result(event_changeresponse_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public event_changeresponse_result deepCopy() {
      return new event_changeresponse_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public event_changeresponse_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof event_changeresponse_result)
        return this.equals((event_changeresponse_result)that);
      return false;
    }

    public boolean equals(event_changeresponse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(event_changeresponse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      event_changeresponse_result typedOther = (event_changeresponse_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("event_changeresponse_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class event_changeresponse_resultStandardSchemeFactory implements SchemeFactory {
      public event_changeresponse_resultStandardScheme getScheme() {
        return new event_changeresponse_resultStandardScheme();
      }
    }

    private static class event_changeresponse_resultStandardScheme extends StandardScheme<event_changeresponse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, event_changeresponse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, event_changeresponse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class event_changeresponse_resultTupleSchemeFactory implements SchemeFactory {
      public event_changeresponse_resultTupleScheme getScheme() {
        return new event_changeresponse_resultTupleScheme();
      }
    }

    private static class event_changeresponse_resultTupleScheme extends TupleScheme<event_changeresponse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, event_changeresponse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, event_changeresponse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_events_category_args implements org.apache.thrift.TBase<get_events_category_args, get_events_category_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_events_category_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_events_category_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_events_category_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String category; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      CATEGORY((short)2, "category");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // CATEGORY
            return CATEGORY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_events_category_args.class, metaDataMap);
    }

    public get_events_category_args() {
    }

    public get_events_category_args(
      String user_name,
      String category)
    {
      this();
      this.user_name = user_name;
      this.category = category;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_events_category_args(get_events_category_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetCategory()) {
        this.category = other.category;
      }
    }

    public get_events_category_args deepCopy() {
      return new get_events_category_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.category = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_events_category_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getCategory() {
      return this.category;
    }

    public get_events_category_args setCategory(String category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case CATEGORY:
        return getCategory();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case CATEGORY:
        return isSetCategory();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_events_category_args)
        return this.equals((get_events_category_args)that);
      return false;
    }

    public boolean equals(get_events_category_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_events_category_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_events_category_args typedOther = (get_events_category_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, typedOther.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_events_category_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_events_category_argsStandardSchemeFactory implements SchemeFactory {
      public get_events_category_argsStandardScheme getScheme() {
        return new get_events_category_argsStandardScheme();
      }
    }

    private static class get_events_category_argsStandardScheme extends StandardScheme<get_events_category_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_events_category_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_events_category_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.category != null) {
          oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
          oprot.writeString(struct.category);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_events_category_argsTupleSchemeFactory implements SchemeFactory {
      public get_events_category_argsTupleScheme getScheme() {
        return new get_events_category_argsTupleScheme();
      }
    }

    private static class get_events_category_argsTupleScheme extends TupleScheme<get_events_category_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_events_category_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetCategory()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetCategory()) {
          oprot.writeString(struct.category);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_events_category_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.category = iprot.readString();
          struct.setCategoryIsSet(true);
        }
      }
    }

  }

  public static class get_events_category_result implements org.apache.thrift.TBase<get_events_category_result, get_events_category_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_events_category_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_events_category_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_events_category_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_events_category_result.class, metaDataMap);
    }

    public get_events_category_result() {
    }

    public get_events_category_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_events_category_result(get_events_category_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_events_category_result deepCopy() {
      return new get_events_category_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_events_category_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_events_category_result)
        return this.equals((get_events_category_result)that);
      return false;
    }

    public boolean equals(get_events_category_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_events_category_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_events_category_result typedOther = (get_events_category_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_events_category_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_events_category_resultStandardSchemeFactory implements SchemeFactory {
      public get_events_category_resultStandardScheme getScheme() {
        return new get_events_category_resultStandardScheme();
      }
    }

    private static class get_events_category_resultStandardScheme extends StandardScheme<get_events_category_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_events_category_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_events_category_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_events_category_resultTupleSchemeFactory implements SchemeFactory {
      public get_events_category_resultTupleScheme getScheme() {
        return new get_events_category_resultTupleScheme();
      }
    }

    private static class get_events_category_resultTupleScheme extends TupleScheme<get_events_category_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_events_category_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_events_category_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_leftpane_args implements org.apache.thrift.TBase<get_leftpane_args, get_leftpane_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_leftpane_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_leftpane_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_leftpane_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String item_type; // required
    public String content; // required
    public String category; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      ITEM_TYPE((short)2, "item_type"),
      CONTENT((short)3, "content"),
      CATEGORY((short)4, "category");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // ITEM_TYPE
            return ITEM_TYPE;
          case 3: // CONTENT
            return CONTENT;
          case 4: // CATEGORY
            return CATEGORY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_leftpane_args.class, metaDataMap);
    }

    public get_leftpane_args() {
    }

    public get_leftpane_args(
      String user_name,
      String item_type,
      String content,
      String category)
    {
      this();
      this.user_name = user_name;
      this.item_type = item_type;
      this.content = content;
      this.category = category;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_leftpane_args(get_leftpane_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetCategory()) {
        this.category = other.category;
      }
    }

    public get_leftpane_args deepCopy() {
      return new get_leftpane_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.item_type = null;
      this.content = null;
      this.category = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_leftpane_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getItem_type() {
      return this.item_type;
    }

    public get_leftpane_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public get_leftpane_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public String getCategory() {
      return this.category;
    }

    public get_leftpane_args setCategory(String category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case ITEM_TYPE:
        return getItem_type();

      case CONTENT:
        return getContent();

      case CATEGORY:
        return getCategory();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case ITEM_TYPE:
        return isSetItem_type();
      case CONTENT:
        return isSetContent();
      case CATEGORY:
        return isSetCategory();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_leftpane_args)
        return this.equals((get_leftpane_args)that);
      return false;
    }

    public boolean equals(get_leftpane_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_leftpane_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_leftpane_args typedOther = (get_leftpane_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, typedOther.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_leftpane_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_leftpane_argsStandardSchemeFactory implements SchemeFactory {
      public get_leftpane_argsStandardScheme getScheme() {
        return new get_leftpane_argsStandardScheme();
      }
    }

    private static class get_leftpane_argsStandardScheme extends StandardScheme<get_leftpane_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_leftpane_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CATEGORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_leftpane_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.category != null) {
          oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
          oprot.writeString(struct.category);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_leftpane_argsTupleSchemeFactory implements SchemeFactory {
      public get_leftpane_argsTupleScheme getScheme() {
        return new get_leftpane_argsTupleScheme();
      }
    }

    private static class get_leftpane_argsTupleScheme extends TupleScheme<get_leftpane_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_leftpane_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetItem_type()) {
          optionals.set(1);
        }
        if (struct.isSetContent()) {
          optionals.set(2);
        }
        if (struct.isSetCategory()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetCategory()) {
          oprot.writeString(struct.category);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_leftpane_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.category = iprot.readString();
          struct.setCategoryIsSet(true);
        }
      }
    }

  }

  public static class get_leftpane_result implements org.apache.thrift.TBase<get_leftpane_result, get_leftpane_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_leftpane_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_leftpane_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_leftpane_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_leftpane_result.class, metaDataMap);
    }

    public get_leftpane_result() {
    }

    public get_leftpane_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_leftpane_result(get_leftpane_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_leftpane_result deepCopy() {
      return new get_leftpane_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_leftpane_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_leftpane_result)
        return this.equals((get_leftpane_result)that);
      return false;
    }

    public boolean equals(get_leftpane_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_leftpane_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_leftpane_result typedOther = (get_leftpane_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_leftpane_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_leftpane_resultStandardSchemeFactory implements SchemeFactory {
      public get_leftpane_resultStandardScheme getScheme() {
        return new get_leftpane_resultStandardScheme();
      }
    }

    private static class get_leftpane_resultStandardScheme extends StandardScheme<get_leftpane_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_leftpane_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_leftpane_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_leftpane_resultTupleSchemeFactory implements SchemeFactory {
      public get_leftpane_resultTupleScheme getScheme() {
        return new get_leftpane_resultTupleScheme();
      }
    }

    private static class get_leftpane_resultTupleScheme extends TupleScheme<get_leftpane_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_leftpane_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_leftpane_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_leftpane_more_args implements org.apache.thrift.TBase<get_leftpane_more_args, get_leftpane_more_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_leftpane_more_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("item_name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_leftpane_more_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_leftpane_more_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String item_type; // required
    public String item_name; // required
    public String content; // required
    public String category; // required
    public int count; // required
    public int prev_cnt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      ITEM_TYPE((short)2, "item_type"),
      ITEM_NAME((short)3, "item_name"),
      CONTENT((short)4, "content"),
      CATEGORY((short)5, "category"),
      COUNT((short)6, "count"),
      PREV_CNT((short)7, "prev_cnt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // ITEM_TYPE
            return ITEM_TYPE;
          case 3: // ITEM_NAME
            return ITEM_NAME;
          case 4: // CONTENT
            return CONTENT;
          case 5: // CATEGORY
            return CATEGORY;
          case 6: // COUNT
            return COUNT;
          case 7: // PREV_CNT
            return PREV_CNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("item_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_leftpane_more_args.class, metaDataMap);
    }

    public get_leftpane_more_args() {
    }

    public get_leftpane_more_args(
      String user_name,
      String item_type,
      String item_name,
      String content,
      String category,
      int count,
      int prev_cnt)
    {
      this();
      this.user_name = user_name;
      this.item_type = item_type;
      this.item_name = item_name;
      this.content = content;
      this.category = category;
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_leftpane_more_args(get_leftpane_more_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetItem_name()) {
        this.item_name = other.item_name;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetCategory()) {
        this.category = other.category;
      }
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
    }

    public get_leftpane_more_args deepCopy() {
      return new get_leftpane_more_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.item_type = null;
      this.item_name = null;
      this.content = null;
      this.category = null;
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_leftpane_more_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getItem_type() {
      return this.item_type;
    }

    public get_leftpane_more_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getItem_name() {
      return this.item_name;
    }

    public get_leftpane_more_args setItem_name(String item_name) {
      this.item_name = item_name;
      return this;
    }

    public void unsetItem_name() {
      this.item_name = null;
    }

    /** Returns true if field item_name is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_name() {
      return this.item_name != null;
    }

    public void setItem_nameIsSet(boolean value) {
      if (!value) {
        this.item_name = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public get_leftpane_more_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public String getCategory() {
      return this.category;
    }

    public get_leftpane_more_args setCategory(String category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public get_leftpane_more_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_leftpane_more_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ITEM_NAME:
        if (value == null) {
          unsetItem_name();
        } else {
          setItem_name((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case ITEM_TYPE:
        return getItem_type();

      case ITEM_NAME:
        return getItem_name();

      case CONTENT:
        return getContent();

      case CATEGORY:
        return getCategory();

      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case ITEM_TYPE:
        return isSetItem_type();
      case ITEM_NAME:
        return isSetItem_name();
      case CONTENT:
        return isSetContent();
      case CATEGORY:
        return isSetCategory();
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_leftpane_more_args)
        return this.equals((get_leftpane_more_args)that);
      return false;
    }

    public boolean equals(get_leftpane_more_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_item_name = true && this.isSetItem_name();
      boolean that_present_item_name = true && that.isSetItem_name();
      if (this_present_item_name || that_present_item_name) {
        if (!(this_present_item_name && that_present_item_name))
          return false;
        if (!this.item_name.equals(that.item_name))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_leftpane_more_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_leftpane_more_args typedOther = (get_leftpane_more_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_name()).compareTo(typedOther.isSetItem_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_name, typedOther.item_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, typedOther.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_leftpane_more_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_name:");
      if (this.item_name == null) {
        sb.append("null");
      } else {
        sb.append(this.item_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_leftpane_more_argsStandardSchemeFactory implements SchemeFactory {
      public get_leftpane_more_argsStandardScheme getScheme() {
        return new get_leftpane_more_argsStandardScheme();
      }
    }

    private static class get_leftpane_more_argsStandardScheme extends StandardScheme<get_leftpane_more_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_leftpane_more_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITEM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_name = iprot.readString();
                struct.setItem_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CATEGORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_leftpane_more_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.item_name != null) {
          oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
          oprot.writeString(struct.item_name);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.category != null) {
          oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
          oprot.writeString(struct.category);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_leftpane_more_argsTupleSchemeFactory implements SchemeFactory {
      public get_leftpane_more_argsTupleScheme getScheme() {
        return new get_leftpane_more_argsTupleScheme();
      }
    }

    private static class get_leftpane_more_argsTupleScheme extends TupleScheme<get_leftpane_more_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_leftpane_more_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetItem_type()) {
          optionals.set(1);
        }
        if (struct.isSetItem_name()) {
          optionals.set(2);
        }
        if (struct.isSetContent()) {
          optionals.set(3);
        }
        if (struct.isSetCategory()) {
          optionals.set(4);
        }
        if (struct.isSetCount()) {
          optionals.set(5);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetItem_name()) {
          oprot.writeString(struct.item_name);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetCategory()) {
          oprot.writeString(struct.category);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_leftpane_more_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.item_name = iprot.readString();
          struct.setItem_nameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(4)) {
          struct.category = iprot.readString();
          struct.setCategoryIsSet(true);
        }
        if (incoming.get(5)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(6)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
      }
    }

  }

  public static class get_leftpane_more_result implements org.apache.thrift.TBase<get_leftpane_more_result, get_leftpane_more_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_leftpane_more_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_leftpane_more_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_leftpane_more_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_leftpane_more_result.class, metaDataMap);
    }

    public get_leftpane_more_result() {
    }

    public get_leftpane_more_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_leftpane_more_result(get_leftpane_more_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_leftpane_more_result deepCopy() {
      return new get_leftpane_more_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_leftpane_more_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_leftpane_more_result)
        return this.equals((get_leftpane_more_result)that);
      return false;
    }

    public boolean equals(get_leftpane_more_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_leftpane_more_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_leftpane_more_result typedOther = (get_leftpane_more_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_leftpane_more_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_leftpane_more_resultStandardSchemeFactory implements SchemeFactory {
      public get_leftpane_more_resultStandardScheme getScheme() {
        return new get_leftpane_more_resultStandardScheme();
      }
    }

    private static class get_leftpane_more_resultStandardScheme extends StandardScheme<get_leftpane_more_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_leftpane_more_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_leftpane_more_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_leftpane_more_resultTupleSchemeFactory implements SchemeFactory {
      public get_leftpane_more_resultTupleScheme getScheme() {
        return new get_leftpane_more_resultTupleScheme();
      }
    }

    private static class get_leftpane_more_resultTupleScheme extends TupleScheme<get_leftpane_more_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_leftpane_more_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_leftpane_more_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_more_events_category_args implements org.apache.thrift.TBase<get_more_events_category_args, get_more_events_category_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_more_events_category_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("event_type", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_more_events_category_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_more_events_category_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String category; // required
    public int event_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      CATEGORY((short)2, "category"),
      EVENT_TYPE((short)3, "event_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // CATEGORY
            return CATEGORY;
          case 3: // EVENT_TYPE
            return EVENT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EVENT_TYPE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("event_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_more_events_category_args.class, metaDataMap);
    }

    public get_more_events_category_args() {
    }

    public get_more_events_category_args(
      String user_name,
      String category,
      int event_type)
    {
      this();
      this.user_name = user_name;
      this.category = category;
      this.event_type = event_type;
      setEvent_typeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_more_events_category_args(get_more_events_category_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetCategory()) {
        this.category = other.category;
      }
      this.event_type = other.event_type;
    }

    public get_more_events_category_args deepCopy() {
      return new get_more_events_category_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.category = null;
      setEvent_typeIsSet(false);
      this.event_type = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_more_events_category_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getCategory() {
      return this.category;
    }

    public get_more_events_category_args setCategory(String category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public int getEvent_type() {
      return this.event_type;
    }

    public get_more_events_category_args setEvent_type(int event_type) {
      this.event_type = event_type;
      setEvent_typeIsSet(true);
      return this;
    }

    public void unsetEvent_type() {
      __isset_bit_vector.clear(__EVENT_TYPE_ISSET_ID);
    }

    /** Returns true if field event_type is set (has been assigned a value) and false otherwise */
    public boolean isSetEvent_type() {
      return __isset_bit_vector.get(__EVENT_TYPE_ISSET_ID);
    }

    public void setEvent_typeIsSet(boolean value) {
      __isset_bit_vector.set(__EVENT_TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((String)value);
        }
        break;

      case EVENT_TYPE:
        if (value == null) {
          unsetEvent_type();
        } else {
          setEvent_type((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case CATEGORY:
        return getCategory();

      case EVENT_TYPE:
        return Integer.valueOf(getEvent_type());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case CATEGORY:
        return isSetCategory();
      case EVENT_TYPE:
        return isSetEvent_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_more_events_category_args)
        return this.equals((get_more_events_category_args)that);
      return false;
    }

    public boolean equals(get_more_events_category_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      boolean this_present_event_type = true;
      boolean that_present_event_type = true;
      if (this_present_event_type || that_present_event_type) {
        if (!(this_present_event_type && that_present_event_type))
          return false;
        if (this.event_type != that.event_type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_more_events_category_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_more_events_category_args typedOther = (get_more_events_category_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, typedOther.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEvent_type()).compareTo(typedOther.isSetEvent_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvent_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_type, typedOther.event_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_more_events_category_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("event_type:");
      sb.append(this.event_type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_more_events_category_argsStandardSchemeFactory implements SchemeFactory {
      public get_more_events_category_argsStandardScheme getScheme() {
        return new get_more_events_category_argsStandardScheme();
      }
    }

    private static class get_more_events_category_argsStandardScheme extends StandardScheme<get_more_events_category_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_more_events_category_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EVENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.event_type = iprot.readI32();
                struct.setEvent_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_more_events_category_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.category != null) {
          oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
          oprot.writeString(struct.category);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.event_type);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_more_events_category_argsTupleSchemeFactory implements SchemeFactory {
      public get_more_events_category_argsTupleScheme getScheme() {
        return new get_more_events_category_argsTupleScheme();
      }
    }

    private static class get_more_events_category_argsTupleScheme extends TupleScheme<get_more_events_category_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_more_events_category_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetCategory()) {
          optionals.set(1);
        }
        if (struct.isSetEvent_type()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetCategory()) {
          oprot.writeString(struct.category);
        }
        if (struct.isSetEvent_type()) {
          oprot.writeI32(struct.event_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_more_events_category_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.category = iprot.readString();
          struct.setCategoryIsSet(true);
        }
        if (incoming.get(2)) {
          struct.event_type = iprot.readI32();
          struct.setEvent_typeIsSet(true);
        }
      }
    }

  }

  public static class get_more_events_category_result implements org.apache.thrift.TBase<get_more_events_category_result, get_more_events_category_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_more_events_category_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_more_events_category_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_more_events_category_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_more_events_category_result.class, metaDataMap);
    }

    public get_more_events_category_result() {
    }

    public get_more_events_category_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_more_events_category_result(get_more_events_category_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_more_events_category_result deepCopy() {
      return new get_more_events_category_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_more_events_category_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_more_events_category_result)
        return this.equals((get_more_events_category_result)that);
      return false;
    }

    public boolean equals(get_more_events_category_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_more_events_category_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_more_events_category_result typedOther = (get_more_events_category_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_more_events_category_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_more_events_category_resultStandardSchemeFactory implements SchemeFactory {
      public get_more_events_category_resultStandardScheme getScheme() {
        return new get_more_events_category_resultStandardScheme();
      }
    }

    private static class get_more_events_category_resultStandardScheme extends StandardScheme<get_more_events_category_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_more_events_category_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_more_events_category_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_more_events_category_resultTupleSchemeFactory implements SchemeFactory {
      public get_more_events_category_resultTupleScheme getScheme() {
        return new get_more_events_category_resultTupleScheme();
      }
    }

    private static class get_more_events_category_resultTupleScheme extends TupleScheme<get_more_events_category_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_more_events_category_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_more_events_category_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_more_events_args implements org.apache.thrift.TBase<get_more_events_args, get_more_events_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_more_events_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_more_events_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_more_events_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String category; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      CATEGORY((short)2, "category");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // CATEGORY
            return CATEGORY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_more_events_args.class, metaDataMap);
    }

    public get_more_events_args() {
    }

    public get_more_events_args(
      String user_name,
      String category)
    {
      this();
      this.user_name = user_name;
      this.category = category;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_more_events_args(get_more_events_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetCategory()) {
        this.category = other.category;
      }
    }

    public get_more_events_args deepCopy() {
      return new get_more_events_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.category = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_more_events_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getCategory() {
      return this.category;
    }

    public get_more_events_args setCategory(String category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case CATEGORY:
        return getCategory();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case CATEGORY:
        return isSetCategory();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_more_events_args)
        return this.equals((get_more_events_args)that);
      return false;
    }

    public boolean equals(get_more_events_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_more_events_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_more_events_args typedOther = (get_more_events_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, typedOther.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_more_events_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_more_events_argsStandardSchemeFactory implements SchemeFactory {
      public get_more_events_argsStandardScheme getScheme() {
        return new get_more_events_argsStandardScheme();
      }
    }

    private static class get_more_events_argsStandardScheme extends StandardScheme<get_more_events_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_more_events_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_more_events_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.category != null) {
          oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
          oprot.writeString(struct.category);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_more_events_argsTupleSchemeFactory implements SchemeFactory {
      public get_more_events_argsTupleScheme getScheme() {
        return new get_more_events_argsTupleScheme();
      }
    }

    private static class get_more_events_argsTupleScheme extends TupleScheme<get_more_events_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_more_events_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetCategory()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetCategory()) {
          oprot.writeString(struct.category);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_more_events_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.category = iprot.readString();
          struct.setCategoryIsSet(true);
        }
      }
    }

  }

  public static class get_more_events_result implements org.apache.thrift.TBase<get_more_events_result, get_more_events_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_more_events_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_more_events_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_more_events_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_more_events_result.class, metaDataMap);
    }

    public get_more_events_result() {
    }

    public get_more_events_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_more_events_result(get_more_events_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_more_events_result deepCopy() {
      return new get_more_events_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_more_events_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_more_events_result)
        return this.equals((get_more_events_result)that);
      return false;
    }

    public boolean equals(get_more_events_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_more_events_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_more_events_result typedOther = (get_more_events_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_more_events_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_more_events_resultStandardSchemeFactory implements SchemeFactory {
      public get_more_events_resultStandardScheme getScheme() {
        return new get_more_events_resultStandardScheme();
      }
    }

    private static class get_more_events_resultStandardScheme extends StandardScheme<get_more_events_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_more_events_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_more_events_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_more_events_resultTupleSchemeFactory implements SchemeFactory {
      public get_more_events_resultTupleScheme getScheme() {
        return new get_more_events_resultTupleScheme();
      }
    }

    private static class get_more_events_resultTupleScheme extends TupleScheme<get_more_events_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_more_events_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_more_events_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_more_petitions_args implements org.apache.thrift.TBase<get_more_petitions_args, get_more_petitions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_more_petitions_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_more_petitions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_more_petitions_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_more_petitions_args.class, metaDataMap);
    }

    public get_more_petitions_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_more_petitions_args(get_more_petitions_args other) {
    }

    public get_more_petitions_args deepCopy() {
      return new get_more_petitions_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_more_petitions_args)
        return this.equals((get_more_petitions_args)that);
      return false;
    }

    public boolean equals(get_more_petitions_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_more_petitions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_more_petitions_args typedOther = (get_more_petitions_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_more_petitions_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_more_petitions_argsStandardSchemeFactory implements SchemeFactory {
      public get_more_petitions_argsStandardScheme getScheme() {
        return new get_more_petitions_argsStandardScheme();
      }
    }

    private static class get_more_petitions_argsStandardScheme extends StandardScheme<get_more_petitions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_more_petitions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_more_petitions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_more_petitions_argsTupleSchemeFactory implements SchemeFactory {
      public get_more_petitions_argsTupleScheme getScheme() {
        return new get_more_petitions_argsTupleScheme();
      }
    }

    private static class get_more_petitions_argsTupleScheme extends TupleScheme<get_more_petitions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_more_petitions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_more_petitions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class get_more_petitions_result implements org.apache.thrift.TBase<get_more_petitions_result, get_more_petitions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_more_petitions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_more_petitions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_more_petitions_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_more_petitions_result.class, metaDataMap);
    }

    public get_more_petitions_result() {
    }

    public get_more_petitions_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_more_petitions_result(get_more_petitions_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_more_petitions_result deepCopy() {
      return new get_more_petitions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_more_petitions_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_more_petitions_result)
        return this.equals((get_more_petitions_result)that);
      return false;
    }

    public boolean equals(get_more_petitions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_more_petitions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_more_petitions_result typedOther = (get_more_petitions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_more_petitions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_more_petitions_resultStandardSchemeFactory implements SchemeFactory {
      public get_more_petitions_resultStandardScheme getScheme() {
        return new get_more_petitions_resultStandardScheme();
      }
    }

    private static class get_more_petitions_resultStandardScheme extends StandardScheme<get_more_petitions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_more_petitions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_more_petitions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_more_petitions_resultTupleSchemeFactory implements SchemeFactory {
      public get_more_petitions_resultTupleScheme getScheme() {
        return new get_more_petitions_resultTupleScheme();
      }
    }

    private static class get_more_petitions_resultTupleScheme extends TupleScheme<get_more_petitions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_more_petitions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_more_petitions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_more_debates_args implements org.apache.thrift.TBase<get_more_debates_args, get_more_debates_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_more_debates_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_more_debates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_more_debates_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_more_debates_args.class, metaDataMap);
    }

    public get_more_debates_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_more_debates_args(get_more_debates_args other) {
    }

    public get_more_debates_args deepCopy() {
      return new get_more_debates_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_more_debates_args)
        return this.equals((get_more_debates_args)that);
      return false;
    }

    public boolean equals(get_more_debates_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_more_debates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_more_debates_args typedOther = (get_more_debates_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_more_debates_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_more_debates_argsStandardSchemeFactory implements SchemeFactory {
      public get_more_debates_argsStandardScheme getScheme() {
        return new get_more_debates_argsStandardScheme();
      }
    }

    private static class get_more_debates_argsStandardScheme extends StandardScheme<get_more_debates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_more_debates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_more_debates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_more_debates_argsTupleSchemeFactory implements SchemeFactory {
      public get_more_debates_argsTupleScheme getScheme() {
        return new get_more_debates_argsTupleScheme();
      }
    }

    private static class get_more_debates_argsTupleScheme extends TupleScheme<get_more_debates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_more_debates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_more_debates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class get_more_debates_result implements org.apache.thrift.TBase<get_more_debates_result, get_more_debates_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_more_debates_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_more_debates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_more_debates_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_more_debates_result.class, metaDataMap);
    }

    public get_more_debates_result() {
    }

    public get_more_debates_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_more_debates_result(get_more_debates_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_more_debates_result deepCopy() {
      return new get_more_debates_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_more_debates_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_more_debates_result)
        return this.equals((get_more_debates_result)that);
      return false;
    }

    public boolean equals(get_more_debates_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_more_debates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_more_debates_result typedOther = (get_more_debates_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_more_debates_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_more_debates_resultStandardSchemeFactory implements SchemeFactory {
      public get_more_debates_resultStandardScheme getScheme() {
        return new get_more_debates_resultStandardScheme();
      }
    }

    private static class get_more_debates_resultStandardScheme extends StandardScheme<get_more_debates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_more_debates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_more_debates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_more_debates_resultTupleSchemeFactory implements SchemeFactory {
      public get_more_debates_resultTupleScheme getScheme() {
        return new get_more_debates_resultTupleScheme();
      }
    }

    private static class get_more_debates_resultTupleScheme extends TupleScheme<get_more_debates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_more_debates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_more_debates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_more_townhalls_args implements org.apache.thrift.TBase<get_more_townhalls_args, get_more_townhalls_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_more_townhalls_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_more_townhalls_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_more_townhalls_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_more_townhalls_args.class, metaDataMap);
    }

    public get_more_townhalls_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_more_townhalls_args(get_more_townhalls_args other) {
    }

    public get_more_townhalls_args deepCopy() {
      return new get_more_townhalls_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_more_townhalls_args)
        return this.equals((get_more_townhalls_args)that);
      return false;
    }

    public boolean equals(get_more_townhalls_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_more_townhalls_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_more_townhalls_args typedOther = (get_more_townhalls_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_more_townhalls_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_more_townhalls_argsStandardSchemeFactory implements SchemeFactory {
      public get_more_townhalls_argsStandardScheme getScheme() {
        return new get_more_townhalls_argsStandardScheme();
      }
    }

    private static class get_more_townhalls_argsStandardScheme extends StandardScheme<get_more_townhalls_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_more_townhalls_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_more_townhalls_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_more_townhalls_argsTupleSchemeFactory implements SchemeFactory {
      public get_more_townhalls_argsTupleScheme getScheme() {
        return new get_more_townhalls_argsTupleScheme();
      }
    }

    private static class get_more_townhalls_argsTupleScheme extends TupleScheme<get_more_townhalls_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_more_townhalls_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_more_townhalls_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class get_more_townhalls_result implements org.apache.thrift.TBase<get_more_townhalls_result, get_more_townhalls_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_more_townhalls_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_more_townhalls_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_more_townhalls_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_more_townhalls_result.class, metaDataMap);
    }

    public get_more_townhalls_result() {
    }

    public get_more_townhalls_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_more_townhalls_result(get_more_townhalls_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_more_townhalls_result deepCopy() {
      return new get_more_townhalls_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_more_townhalls_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_more_townhalls_result)
        return this.equals((get_more_townhalls_result)that);
      return false;
    }

    public boolean equals(get_more_townhalls_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_more_townhalls_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_more_townhalls_result typedOther = (get_more_townhalls_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_more_townhalls_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_more_townhalls_resultStandardSchemeFactory implements SchemeFactory {
      public get_more_townhalls_resultStandardScheme getScheme() {
        return new get_more_townhalls_resultStandardScheme();
      }
    }

    private static class get_more_townhalls_resultStandardScheme extends StandardScheme<get_more_townhalls_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_more_townhalls_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_more_townhalls_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_more_townhalls_resultTupleSchemeFactory implements SchemeFactory {
      public get_more_townhalls_resultTupleScheme getScheme() {
        return new get_more_townhalls_resultTupleScheme();
      }
    }

    private static class get_more_townhalls_resultTupleScheme extends TupleScheme<get_more_townhalls_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_more_townhalls_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_more_townhalls_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_all_events_args implements org.apache.thrift.TBase<get_all_events_args, get_all_events_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_events_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_all_events_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_all_events_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String category; // required
    public int count; // required
    public int prev_cnt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      CATEGORY((short)2, "category"),
      COUNT((short)3, "count"),
      PREV_CNT((short)4, "prev_cnt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // CATEGORY
            return CATEGORY;
          case 3: // COUNT
            return COUNT;
          case 4: // PREV_CNT
            return PREV_CNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_events_args.class, metaDataMap);
    }

    public get_all_events_args() {
    }

    public get_all_events_args(
      String user_name,
      String category,
      int count,
      int prev_cnt)
    {
      this();
      this.user_name = user_name;
      this.category = category;
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_events_args(get_all_events_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetCategory()) {
        this.category = other.category;
      }
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
    }

    public get_all_events_args deepCopy() {
      return new get_all_events_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.category = null;
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_all_events_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getCategory() {
      return this.category;
    }

    public get_all_events_args setCategory(String category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public get_all_events_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_all_events_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((String)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case CATEGORY:
        return getCategory();

      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case CATEGORY:
        return isSetCategory();
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_events_args)
        return this.equals((get_all_events_args)that);
      return false;
    }

    public boolean equals(get_all_events_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_all_events_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_all_events_args typedOther = (get_all_events_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, typedOther.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_events_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_all_events_argsStandardSchemeFactory implements SchemeFactory {
      public get_all_events_argsStandardScheme getScheme() {
        return new get_all_events_argsStandardScheme();
      }
    }

    private static class get_all_events_argsStandardScheme extends StandardScheme<get_all_events_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_events_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_events_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.category != null) {
          oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
          oprot.writeString(struct.category);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_all_events_argsTupleSchemeFactory implements SchemeFactory {
      public get_all_events_argsTupleScheme getScheme() {
        return new get_all_events_argsTupleScheme();
      }
    }

    private static class get_all_events_argsTupleScheme extends TupleScheme<get_all_events_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_events_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetCategory()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetCategory()) {
          oprot.writeString(struct.category);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_events_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.category = iprot.readString();
          struct.setCategoryIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
      }
    }

  }

  public static class get_all_events_result implements org.apache.thrift.TBase<get_all_events_result, get_all_events_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_events_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_all_events_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_all_events_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_events_result.class, metaDataMap);
    }

    public get_all_events_result() {
    }

    public get_all_events_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_events_result(get_all_events_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_all_events_result deepCopy() {
      return new get_all_events_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_all_events_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_events_result)
        return this.equals((get_all_events_result)that);
      return false;
    }

    public boolean equals(get_all_events_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_all_events_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_all_events_result typedOther = (get_all_events_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_events_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_all_events_resultStandardSchemeFactory implements SchemeFactory {
      public get_all_events_resultStandardScheme getScheme() {
        return new get_all_events_resultStandardScheme();
      }
    }

    private static class get_all_events_resultStandardScheme extends StandardScheme<get_all_events_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_events_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_events_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_all_events_resultTupleSchemeFactory implements SchemeFactory {
      public get_all_events_resultTupleScheme getScheme() {
        return new get_all_events_resultTupleScheme();
      }
    }

    private static class get_all_events_resultTupleScheme extends TupleScheme<get_all_events_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_events_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_events_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_all_petitions_args implements org.apache.thrift.TBase<get_all_petitions_args, get_all_petitions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_petitions_args");

    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_all_petitions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_all_petitions_argsTupleSchemeFactory());
    }

    public int count; // required
    public int prev_cnt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COUNT((short)1, "count"),
      PREV_CNT((short)2, "prev_cnt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COUNT
            return COUNT;
          case 2: // PREV_CNT
            return PREV_CNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_petitions_args.class, metaDataMap);
    }

    public get_all_petitions_args() {
    }

    public get_all_petitions_args(
      int count,
      int prev_cnt)
    {
      this();
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_petitions_args(get_all_petitions_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
    }

    public get_all_petitions_args deepCopy() {
      return new get_all_petitions_args(this);
    }

    @Override
    public void clear() {
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
    }

    public int getCount() {
      return this.count;
    }

    public get_all_petitions_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_all_petitions_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_petitions_args)
        return this.equals((get_all_petitions_args)that);
      return false;
    }

    public boolean equals(get_all_petitions_args that) {
      if (that == null)
        return false;

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_all_petitions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_all_petitions_args typedOther = (get_all_petitions_args)other;

      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_petitions_args(");
      boolean first = true;

      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_all_petitions_argsStandardSchemeFactory implements SchemeFactory {
      public get_all_petitions_argsStandardScheme getScheme() {
        return new get_all_petitions_argsStandardScheme();
      }
    }

    private static class get_all_petitions_argsStandardScheme extends StandardScheme<get_all_petitions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_petitions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_petitions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_all_petitions_argsTupleSchemeFactory implements SchemeFactory {
      public get_all_petitions_argsTupleScheme getScheme() {
        return new get_all_petitions_argsTupleScheme();
      }
    }

    private static class get_all_petitions_argsTupleScheme extends TupleScheme<get_all_petitions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_petitions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCount()) {
          optionals.set(0);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_petitions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(1)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
      }
    }

  }

  public static class get_all_petitions_result implements org.apache.thrift.TBase<get_all_petitions_result, get_all_petitions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_petitions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_all_petitions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_all_petitions_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_petitions_result.class, metaDataMap);
    }

    public get_all_petitions_result() {
    }

    public get_all_petitions_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_petitions_result(get_all_petitions_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_all_petitions_result deepCopy() {
      return new get_all_petitions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_all_petitions_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_petitions_result)
        return this.equals((get_all_petitions_result)that);
      return false;
    }

    public boolean equals(get_all_petitions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_all_petitions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_all_petitions_result typedOther = (get_all_petitions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_petitions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_all_petitions_resultStandardSchemeFactory implements SchemeFactory {
      public get_all_petitions_resultStandardScheme getScheme() {
        return new get_all_petitions_resultStandardScheme();
      }
    }

    private static class get_all_petitions_resultStandardScheme extends StandardScheme<get_all_petitions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_petitions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_petitions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_all_petitions_resultTupleSchemeFactory implements SchemeFactory {
      public get_all_petitions_resultTupleScheme getScheme() {
        return new get_all_petitions_resultTupleScheme();
      }
    }

    private static class get_all_petitions_resultTupleScheme extends TupleScheme<get_all_petitions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_petitions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_petitions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_all_debates_args implements org.apache.thrift.TBase<get_all_debates_args, get_all_debates_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_debates_args");

    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_all_debates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_all_debates_argsTupleSchemeFactory());
    }

    public int count; // required
    public int prev_cnt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COUNT((short)1, "count"),
      PREV_CNT((short)2, "prev_cnt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COUNT
            return COUNT;
          case 2: // PREV_CNT
            return PREV_CNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_debates_args.class, metaDataMap);
    }

    public get_all_debates_args() {
    }

    public get_all_debates_args(
      int count,
      int prev_cnt)
    {
      this();
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_debates_args(get_all_debates_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
    }

    public get_all_debates_args deepCopy() {
      return new get_all_debates_args(this);
    }

    @Override
    public void clear() {
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
    }

    public int getCount() {
      return this.count;
    }

    public get_all_debates_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_all_debates_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_debates_args)
        return this.equals((get_all_debates_args)that);
      return false;
    }

    public boolean equals(get_all_debates_args that) {
      if (that == null)
        return false;

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_all_debates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_all_debates_args typedOther = (get_all_debates_args)other;

      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_debates_args(");
      boolean first = true;

      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_all_debates_argsStandardSchemeFactory implements SchemeFactory {
      public get_all_debates_argsStandardScheme getScheme() {
        return new get_all_debates_argsStandardScheme();
      }
    }

    private static class get_all_debates_argsStandardScheme extends StandardScheme<get_all_debates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_debates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_debates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_all_debates_argsTupleSchemeFactory implements SchemeFactory {
      public get_all_debates_argsTupleScheme getScheme() {
        return new get_all_debates_argsTupleScheme();
      }
    }

    private static class get_all_debates_argsTupleScheme extends TupleScheme<get_all_debates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_debates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCount()) {
          optionals.set(0);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_debates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(1)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
      }
    }

  }

  public static class get_all_debates_result implements org.apache.thrift.TBase<get_all_debates_result, get_all_debates_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_debates_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_all_debates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_all_debates_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_debates_result.class, metaDataMap);
    }

    public get_all_debates_result() {
    }

    public get_all_debates_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_debates_result(get_all_debates_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_all_debates_result deepCopy() {
      return new get_all_debates_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_all_debates_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_debates_result)
        return this.equals((get_all_debates_result)that);
      return false;
    }

    public boolean equals(get_all_debates_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_all_debates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_all_debates_result typedOther = (get_all_debates_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_debates_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_all_debates_resultStandardSchemeFactory implements SchemeFactory {
      public get_all_debates_resultStandardScheme getScheme() {
        return new get_all_debates_resultStandardScheme();
      }
    }

    private static class get_all_debates_resultStandardScheme extends StandardScheme<get_all_debates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_debates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_debates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_all_debates_resultTupleSchemeFactory implements SchemeFactory {
      public get_all_debates_resultTupleScheme getScheme() {
        return new get_all_debates_resultTupleScheme();
      }
    }

    private static class get_all_debates_resultTupleScheme extends TupleScheme<get_all_debates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_debates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_debates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_all_townhalls_args implements org.apache.thrift.TBase<get_all_townhalls_args, get_all_townhalls_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_townhalls_args");

    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PREV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_cnt", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_all_townhalls_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_all_townhalls_argsTupleSchemeFactory());
    }

    public int count; // required
    public int prev_cnt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COUNT((short)1, "count"),
      PREV_CNT((short)2, "prev_cnt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COUNT
            return COUNT;
          case 2: // PREV_CNT
            return PREV_CNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __PREV_CNT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PREV_CNT, new org.apache.thrift.meta_data.FieldMetaData("prev_cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_townhalls_args.class, metaDataMap);
    }

    public get_all_townhalls_args() {
    }

    public get_all_townhalls_args(
      int count,
      int prev_cnt)
    {
      this();
      this.count = count;
      setCountIsSet(true);
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_townhalls_args(get_all_townhalls_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.count = other.count;
      this.prev_cnt = other.prev_cnt;
    }

    public get_all_townhalls_args deepCopy() {
      return new get_all_townhalls_args(this);
    }

    @Override
    public void clear() {
      setCountIsSet(false);
      this.count = 0;
      setPrev_cntIsSet(false);
      this.prev_cnt = 0;
    }

    public int getCount() {
      return this.count;
    }

    public get_all_townhalls_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public int getPrev_cnt() {
      return this.prev_cnt;
    }

    public get_all_townhalls_args setPrev_cnt(int prev_cnt) {
      this.prev_cnt = prev_cnt;
      setPrev_cntIsSet(true);
      return this;
    }

    public void unsetPrev_cnt() {
      __isset_bit_vector.clear(__PREV_CNT_ISSET_ID);
    }

    /** Returns true if field prev_cnt is set (has been assigned a value) and false otherwise */
    public boolean isSetPrev_cnt() {
      return __isset_bit_vector.get(__PREV_CNT_ISSET_ID);
    }

    public void setPrev_cntIsSet(boolean value) {
      __isset_bit_vector.set(__PREV_CNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case PREV_CNT:
        if (value == null) {
          unsetPrev_cnt();
        } else {
          setPrev_cnt((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNT:
        return Integer.valueOf(getCount());

      case PREV_CNT:
        return Integer.valueOf(getPrev_cnt());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COUNT:
        return isSetCount();
      case PREV_CNT:
        return isSetPrev_cnt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_townhalls_args)
        return this.equals((get_all_townhalls_args)that);
      return false;
    }

    public boolean equals(get_all_townhalls_args that) {
      if (that == null)
        return false;

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_prev_cnt = true;
      boolean that_present_prev_cnt = true;
      if (this_present_prev_cnt || that_present_prev_cnt) {
        if (!(this_present_prev_cnt && that_present_prev_cnt))
          return false;
        if (this.prev_cnt != that.prev_cnt)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_all_townhalls_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_all_townhalls_args typedOther = (get_all_townhalls_args)other;

      lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrev_cnt()).compareTo(typedOther.isSetPrev_cnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrev_cnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_cnt, typedOther.prev_cnt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_townhalls_args(");
      boolean first = true;

      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prev_cnt:");
      sb.append(this.prev_cnt);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_all_townhalls_argsStandardSchemeFactory implements SchemeFactory {
      public get_all_townhalls_argsStandardScheme getScheme() {
        return new get_all_townhalls_argsStandardScheme();
      }
    }

    private static class get_all_townhalls_argsStandardScheme extends StandardScheme<get_all_townhalls_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_townhalls_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PREV_CNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prev_cnt = iprot.readI32();
                struct.setPrev_cntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_townhalls_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_CNT_FIELD_DESC);
        oprot.writeI32(struct.prev_cnt);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_all_townhalls_argsTupleSchemeFactory implements SchemeFactory {
      public get_all_townhalls_argsTupleScheme getScheme() {
        return new get_all_townhalls_argsTupleScheme();
      }
    }

    private static class get_all_townhalls_argsTupleScheme extends TupleScheme<get_all_townhalls_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_townhalls_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCount()) {
          optionals.set(0);
        }
        if (struct.isSetPrev_cnt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetPrev_cnt()) {
          oprot.writeI32(struct.prev_cnt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_townhalls_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(1)) {
          struct.prev_cnt = iprot.readI32();
          struct.setPrev_cntIsSet(true);
        }
      }
    }

  }

  public static class get_all_townhalls_result implements org.apache.thrift.TBase<get_all_townhalls_result, get_all_townhalls_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_townhalls_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_all_townhalls_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_all_townhalls_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_townhalls_result.class, metaDataMap);
    }

    public get_all_townhalls_result() {
    }

    public get_all_townhalls_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_townhalls_result(get_all_townhalls_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_all_townhalls_result deepCopy() {
      return new get_all_townhalls_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_all_townhalls_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_townhalls_result)
        return this.equals((get_all_townhalls_result)that);
      return false;
    }

    public boolean equals(get_all_townhalls_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_all_townhalls_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_all_townhalls_result typedOther = (get_all_townhalls_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_townhalls_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_all_townhalls_resultStandardSchemeFactory implements SchemeFactory {
      public get_all_townhalls_resultStandardScheme getScheme() {
        return new get_all_townhalls_resultStandardScheme();
      }
    }

    private static class get_all_townhalls_resultStandardScheme extends StandardScheme<get_all_townhalls_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_townhalls_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_townhalls_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_all_townhalls_resultTupleSchemeFactory implements SchemeFactory {
      public get_all_townhalls_resultTupleScheme getScheme() {
        return new get_all_townhalls_resultTupleScheme();
      }
    }

    private static class get_all_townhalls_resultTupleScheme extends TupleScheme<get_all_townhalls_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_townhalls_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_townhalls_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_comment_args implements org.apache.thrift.TBase<create_comment_args, create_comment_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_comment_args");

    private static final org.apache.thrift.protocol.TField C_ITEMID_FIELD_DESC = new org.apache.thrift.protocol.TField("c_itemid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField C_ITEMGROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("c_itemgroup", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField C_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("c_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField C_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("c_content", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField C_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("c_users", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField C_TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("c_time_created", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_comment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_comment_argsTupleSchemeFactory());
    }

    public String c_itemid; // required
    public String c_itemgroup; // required
    public String c_id; // required
    public String c_content; // required
    public String c_users; // required
    public int c_time_created; // required
    public String user_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      C_ITEMID((short)1, "c_itemid"),
      C_ITEMGROUP((short)2, "c_itemgroup"),
      C_ID((short)3, "c_id"),
      C_CONTENT((short)4, "c_content"),
      C_USERS((short)5, "c_users"),
      C_TIME_CREATED((short)6, "c_time_created"),
      USER_NAME((short)7, "user_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // C_ITEMID
            return C_ITEMID;
          case 2: // C_ITEMGROUP
            return C_ITEMGROUP;
          case 3: // C_ID
            return C_ID;
          case 4: // C_CONTENT
            return C_CONTENT;
          case 5: // C_USERS
            return C_USERS;
          case 6: // C_TIME_CREATED
            return C_TIME_CREATED;
          case 7: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __C_TIME_CREATED_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.C_ITEMID, new org.apache.thrift.meta_data.FieldMetaData("c_itemid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_ITEMGROUP, new org.apache.thrift.meta_data.FieldMetaData("c_itemgroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_ID, new org.apache.thrift.meta_data.FieldMetaData("c_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("c_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_USERS, new org.apache.thrift.meta_data.FieldMetaData("c_users", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("c_time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_comment_args.class, metaDataMap);
    }

    public create_comment_args() {
    }

    public create_comment_args(
      String c_itemid,
      String c_itemgroup,
      String c_id,
      String c_content,
      String c_users,
      int c_time_created,
      String user_name)
    {
      this();
      this.c_itemid = c_itemid;
      this.c_itemgroup = c_itemgroup;
      this.c_id = c_id;
      this.c_content = c_content;
      this.c_users = c_users;
      this.c_time_created = c_time_created;
      setC_time_createdIsSet(true);
      this.user_name = user_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_comment_args(create_comment_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetC_itemid()) {
        this.c_itemid = other.c_itemid;
      }
      if (other.isSetC_itemgroup()) {
        this.c_itemgroup = other.c_itemgroup;
      }
      if (other.isSetC_id()) {
        this.c_id = other.c_id;
      }
      if (other.isSetC_content()) {
        this.c_content = other.c_content;
      }
      if (other.isSetC_users()) {
        this.c_users = other.c_users;
      }
      this.c_time_created = other.c_time_created;
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
    }

    public create_comment_args deepCopy() {
      return new create_comment_args(this);
    }

    @Override
    public void clear() {
      this.c_itemid = null;
      this.c_itemgroup = null;
      this.c_id = null;
      this.c_content = null;
      this.c_users = null;
      setC_time_createdIsSet(false);
      this.c_time_created = 0;
      this.user_name = null;
    }

    public String getC_itemid() {
      return this.c_itemid;
    }

    public create_comment_args setC_itemid(String c_itemid) {
      this.c_itemid = c_itemid;
      return this;
    }

    public void unsetC_itemid() {
      this.c_itemid = null;
    }

    /** Returns true if field c_itemid is set (has been assigned a value) and false otherwise */
    public boolean isSetC_itemid() {
      return this.c_itemid != null;
    }

    public void setC_itemidIsSet(boolean value) {
      if (!value) {
        this.c_itemid = null;
      }
    }

    public String getC_itemgroup() {
      return this.c_itemgroup;
    }

    public create_comment_args setC_itemgroup(String c_itemgroup) {
      this.c_itemgroup = c_itemgroup;
      return this;
    }

    public void unsetC_itemgroup() {
      this.c_itemgroup = null;
    }

    /** Returns true if field c_itemgroup is set (has been assigned a value) and false otherwise */
    public boolean isSetC_itemgroup() {
      return this.c_itemgroup != null;
    }

    public void setC_itemgroupIsSet(boolean value) {
      if (!value) {
        this.c_itemgroup = null;
      }
    }

    public String getC_id() {
      return this.c_id;
    }

    public create_comment_args setC_id(String c_id) {
      this.c_id = c_id;
      return this;
    }

    public void unsetC_id() {
      this.c_id = null;
    }

    /** Returns true if field c_id is set (has been assigned a value) and false otherwise */
    public boolean isSetC_id() {
      return this.c_id != null;
    }

    public void setC_idIsSet(boolean value) {
      if (!value) {
        this.c_id = null;
      }
    }

    public String getC_content() {
      return this.c_content;
    }

    public create_comment_args setC_content(String c_content) {
      this.c_content = c_content;
      return this;
    }

    public void unsetC_content() {
      this.c_content = null;
    }

    /** Returns true if field c_content is set (has been assigned a value) and false otherwise */
    public boolean isSetC_content() {
      return this.c_content != null;
    }

    public void setC_contentIsSet(boolean value) {
      if (!value) {
        this.c_content = null;
      }
    }

    public String getC_users() {
      return this.c_users;
    }

    public create_comment_args setC_users(String c_users) {
      this.c_users = c_users;
      return this;
    }

    public void unsetC_users() {
      this.c_users = null;
    }

    /** Returns true if field c_users is set (has been assigned a value) and false otherwise */
    public boolean isSetC_users() {
      return this.c_users != null;
    }

    public void setC_usersIsSet(boolean value) {
      if (!value) {
        this.c_users = null;
      }
    }

    public int getC_time_created() {
      return this.c_time_created;
    }

    public create_comment_args setC_time_created(int c_time_created) {
      this.c_time_created = c_time_created;
      setC_time_createdIsSet(true);
      return this;
    }

    public void unsetC_time_created() {
      __isset_bit_vector.clear(__C_TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field c_time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetC_time_created() {
      return __isset_bit_vector.get(__C_TIME_CREATED_ISSET_ID);
    }

    public void setC_time_createdIsSet(boolean value) {
      __isset_bit_vector.set(__C_TIME_CREATED_ISSET_ID, value);
    }

    public String getUser_name() {
      return this.user_name;
    }

    public create_comment_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case C_ITEMID:
        if (value == null) {
          unsetC_itemid();
        } else {
          setC_itemid((String)value);
        }
        break;

      case C_ITEMGROUP:
        if (value == null) {
          unsetC_itemgroup();
        } else {
          setC_itemgroup((String)value);
        }
        break;

      case C_ID:
        if (value == null) {
          unsetC_id();
        } else {
          setC_id((String)value);
        }
        break;

      case C_CONTENT:
        if (value == null) {
          unsetC_content();
        } else {
          setC_content((String)value);
        }
        break;

      case C_USERS:
        if (value == null) {
          unsetC_users();
        } else {
          setC_users((String)value);
        }
        break;

      case C_TIME_CREATED:
        if (value == null) {
          unsetC_time_created();
        } else {
          setC_time_created((Integer)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case C_ITEMID:
        return getC_itemid();

      case C_ITEMGROUP:
        return getC_itemgroup();

      case C_ID:
        return getC_id();

      case C_CONTENT:
        return getC_content();

      case C_USERS:
        return getC_users();

      case C_TIME_CREATED:
        return Integer.valueOf(getC_time_created());

      case USER_NAME:
        return getUser_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case C_ITEMID:
        return isSetC_itemid();
      case C_ITEMGROUP:
        return isSetC_itemgroup();
      case C_ID:
        return isSetC_id();
      case C_CONTENT:
        return isSetC_content();
      case C_USERS:
        return isSetC_users();
      case C_TIME_CREATED:
        return isSetC_time_created();
      case USER_NAME:
        return isSetUser_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_comment_args)
        return this.equals((create_comment_args)that);
      return false;
    }

    public boolean equals(create_comment_args that) {
      if (that == null)
        return false;

      boolean this_present_c_itemid = true && this.isSetC_itemid();
      boolean that_present_c_itemid = true && that.isSetC_itemid();
      if (this_present_c_itemid || that_present_c_itemid) {
        if (!(this_present_c_itemid && that_present_c_itemid))
          return false;
        if (!this.c_itemid.equals(that.c_itemid))
          return false;
      }

      boolean this_present_c_itemgroup = true && this.isSetC_itemgroup();
      boolean that_present_c_itemgroup = true && that.isSetC_itemgroup();
      if (this_present_c_itemgroup || that_present_c_itemgroup) {
        if (!(this_present_c_itemgroup && that_present_c_itemgroup))
          return false;
        if (!this.c_itemgroup.equals(that.c_itemgroup))
          return false;
      }

      boolean this_present_c_id = true && this.isSetC_id();
      boolean that_present_c_id = true && that.isSetC_id();
      if (this_present_c_id || that_present_c_id) {
        if (!(this_present_c_id && that_present_c_id))
          return false;
        if (!this.c_id.equals(that.c_id))
          return false;
      }

      boolean this_present_c_content = true && this.isSetC_content();
      boolean that_present_c_content = true && that.isSetC_content();
      if (this_present_c_content || that_present_c_content) {
        if (!(this_present_c_content && that_present_c_content))
          return false;
        if (!this.c_content.equals(that.c_content))
          return false;
      }

      boolean this_present_c_users = true && this.isSetC_users();
      boolean that_present_c_users = true && that.isSetC_users();
      if (this_present_c_users || that_present_c_users) {
        if (!(this_present_c_users && that_present_c_users))
          return false;
        if (!this.c_users.equals(that.c_users))
          return false;
      }

      boolean this_present_c_time_created = true;
      boolean that_present_c_time_created = true;
      if (this_present_c_time_created || that_present_c_time_created) {
        if (!(this_present_c_time_created && that_present_c_time_created))
          return false;
        if (this.c_time_created != that.c_time_created)
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_comment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_comment_args typedOther = (create_comment_args)other;

      lastComparison = Boolean.valueOf(isSetC_itemid()).compareTo(typedOther.isSetC_itemid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_itemid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_itemid, typedOther.c_itemid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_itemgroup()).compareTo(typedOther.isSetC_itemgroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_itemgroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_itemgroup, typedOther.c_itemgroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_id()).compareTo(typedOther.isSetC_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_id, typedOther.c_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_content()).compareTo(typedOther.isSetC_content());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_content()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_content, typedOther.c_content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_users()).compareTo(typedOther.isSetC_users());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_users()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_users, typedOther.c_users);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_time_created()).compareTo(typedOther.isSetC_time_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_time_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_time_created, typedOther.c_time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_comment_args(");
      boolean first = true;

      sb.append("c_itemid:");
      if (this.c_itemid == null) {
        sb.append("null");
      } else {
        sb.append(this.c_itemid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_itemgroup:");
      if (this.c_itemgroup == null) {
        sb.append("null");
      } else {
        sb.append(this.c_itemgroup);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_id:");
      if (this.c_id == null) {
        sb.append("null");
      } else {
        sb.append(this.c_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_content:");
      if (this.c_content == null) {
        sb.append("null");
      } else {
        sb.append(this.c_content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_users:");
      if (this.c_users == null) {
        sb.append("null");
      } else {
        sb.append(this.c_users);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_time_created:");
      sb.append(this.c_time_created);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_comment_argsStandardSchemeFactory implements SchemeFactory {
      public create_comment_argsStandardScheme getScheme() {
        return new create_comment_argsStandardScheme();
      }
    }

    private static class create_comment_argsStandardScheme extends StandardScheme<create_comment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_comment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // C_ITEMID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_itemid = iprot.readString();
                struct.setC_itemidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // C_ITEMGROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_itemgroup = iprot.readString();
                struct.setC_itemgroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // C_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_id = iprot.readString();
                struct.setC_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // C_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_content = iprot.readString();
                struct.setC_contentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // C_USERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_users = iprot.readString();
                struct.setC_usersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // C_TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.c_time_created = iprot.readI32();
                struct.setC_time_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_comment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.c_itemid != null) {
          oprot.writeFieldBegin(C_ITEMID_FIELD_DESC);
          oprot.writeString(struct.c_itemid);
          oprot.writeFieldEnd();
        }
        if (struct.c_itemgroup != null) {
          oprot.writeFieldBegin(C_ITEMGROUP_FIELD_DESC);
          oprot.writeString(struct.c_itemgroup);
          oprot.writeFieldEnd();
        }
        if (struct.c_id != null) {
          oprot.writeFieldBegin(C_ID_FIELD_DESC);
          oprot.writeString(struct.c_id);
          oprot.writeFieldEnd();
        }
        if (struct.c_content != null) {
          oprot.writeFieldBegin(C_CONTENT_FIELD_DESC);
          oprot.writeString(struct.c_content);
          oprot.writeFieldEnd();
        }
        if (struct.c_users != null) {
          oprot.writeFieldBegin(C_USERS_FIELD_DESC);
          oprot.writeString(struct.c_users);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(C_TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.c_time_created);
        oprot.writeFieldEnd();
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_comment_argsTupleSchemeFactory implements SchemeFactory {
      public create_comment_argsTupleScheme getScheme() {
        return new create_comment_argsTupleScheme();
      }
    }

    private static class create_comment_argsTupleScheme extends TupleScheme<create_comment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_comment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetC_itemid()) {
          optionals.set(0);
        }
        if (struct.isSetC_itemgroup()) {
          optionals.set(1);
        }
        if (struct.isSetC_id()) {
          optionals.set(2);
        }
        if (struct.isSetC_content()) {
          optionals.set(3);
        }
        if (struct.isSetC_users()) {
          optionals.set(4);
        }
        if (struct.isSetC_time_created()) {
          optionals.set(5);
        }
        if (struct.isSetUser_name()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetC_itemid()) {
          oprot.writeString(struct.c_itemid);
        }
        if (struct.isSetC_itemgroup()) {
          oprot.writeString(struct.c_itemgroup);
        }
        if (struct.isSetC_id()) {
          oprot.writeString(struct.c_id);
        }
        if (struct.isSetC_content()) {
          oprot.writeString(struct.c_content);
        }
        if (struct.isSetC_users()) {
          oprot.writeString(struct.c_users);
        }
        if (struct.isSetC_time_created()) {
          oprot.writeI32(struct.c_time_created);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_comment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.c_itemid = iprot.readString();
          struct.setC_itemidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.c_itemgroup = iprot.readString();
          struct.setC_itemgroupIsSet(true);
        }
        if (incoming.get(2)) {
          struct.c_id = iprot.readString();
          struct.setC_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.c_content = iprot.readString();
          struct.setC_contentIsSet(true);
        }
        if (incoming.get(4)) {
          struct.c_users = iprot.readString();
          struct.setC_usersIsSet(true);
        }
        if (incoming.get(5)) {
          struct.c_time_created = iprot.readI32();
          struct.setC_time_createdIsSet(true);
        }
        if (incoming.get(6)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
      }
    }

  }

  public static class create_comment_result implements org.apache.thrift.TBase<create_comment_result, create_comment_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_comment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_comment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_comment_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_comment_result.class, metaDataMap);
    }

    public create_comment_result() {
    }

    public create_comment_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_comment_result(create_comment_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public create_comment_result deepCopy() {
      return new create_comment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public create_comment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_comment_result)
        return this.equals((create_comment_result)that);
      return false;
    }

    public boolean equals(create_comment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_comment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_comment_result typedOther = (create_comment_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_comment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_comment_resultStandardSchemeFactory implements SchemeFactory {
      public create_comment_resultStandardScheme getScheme() {
        return new create_comment_resultStandardScheme();
      }
    }

    private static class create_comment_resultStandardScheme extends StandardScheme<create_comment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_comment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_comment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_comment_resultTupleSchemeFactory implements SchemeFactory {
      public create_comment_resultTupleScheme getScheme() {
        return new create_comment_resultTupleScheme();
      }
    }

    private static class create_comment_resultTupleScheme extends TupleScheme<create_comment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_comment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_comment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_comment_own_args implements org.apache.thrift.TBase<create_comment_own_args, create_comment_own_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_comment_own_args");

    private static final org.apache.thrift.protocol.TField C_ITEMID_FIELD_DESC = new org.apache.thrift.protocol.TField("c_itemid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField C_ITEMGROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("c_itemgroup", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField C_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("c_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField C_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("c_content", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField C_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("c_users", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField C_TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("c_time_created", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_comment_own_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_comment_own_argsTupleSchemeFactory());
    }

    public String c_itemid; // required
    public String c_itemgroup; // required
    public String c_id; // required
    public String c_content; // required
    public String c_users; // required
    public int c_time_created; // required
    public String user_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      C_ITEMID((short)1, "c_itemid"),
      C_ITEMGROUP((short)2, "c_itemgroup"),
      C_ID((short)3, "c_id"),
      C_CONTENT((short)4, "c_content"),
      C_USERS((short)5, "c_users"),
      C_TIME_CREATED((short)6, "c_time_created"),
      USER_NAME((short)7, "user_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // C_ITEMID
            return C_ITEMID;
          case 2: // C_ITEMGROUP
            return C_ITEMGROUP;
          case 3: // C_ID
            return C_ID;
          case 4: // C_CONTENT
            return C_CONTENT;
          case 5: // C_USERS
            return C_USERS;
          case 6: // C_TIME_CREATED
            return C_TIME_CREATED;
          case 7: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __C_TIME_CREATED_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.C_ITEMID, new org.apache.thrift.meta_data.FieldMetaData("c_itemid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_ITEMGROUP, new org.apache.thrift.meta_data.FieldMetaData("c_itemgroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_ID, new org.apache.thrift.meta_data.FieldMetaData("c_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("c_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_USERS, new org.apache.thrift.meta_data.FieldMetaData("c_users", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("c_time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_comment_own_args.class, metaDataMap);
    }

    public create_comment_own_args() {
    }

    public create_comment_own_args(
      String c_itemid,
      String c_itemgroup,
      String c_id,
      String c_content,
      String c_users,
      int c_time_created,
      String user_name)
    {
      this();
      this.c_itemid = c_itemid;
      this.c_itemgroup = c_itemgroup;
      this.c_id = c_id;
      this.c_content = c_content;
      this.c_users = c_users;
      this.c_time_created = c_time_created;
      setC_time_createdIsSet(true);
      this.user_name = user_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_comment_own_args(create_comment_own_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetC_itemid()) {
        this.c_itemid = other.c_itemid;
      }
      if (other.isSetC_itemgroup()) {
        this.c_itemgroup = other.c_itemgroup;
      }
      if (other.isSetC_id()) {
        this.c_id = other.c_id;
      }
      if (other.isSetC_content()) {
        this.c_content = other.c_content;
      }
      if (other.isSetC_users()) {
        this.c_users = other.c_users;
      }
      this.c_time_created = other.c_time_created;
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
    }

    public create_comment_own_args deepCopy() {
      return new create_comment_own_args(this);
    }

    @Override
    public void clear() {
      this.c_itemid = null;
      this.c_itemgroup = null;
      this.c_id = null;
      this.c_content = null;
      this.c_users = null;
      setC_time_createdIsSet(false);
      this.c_time_created = 0;
      this.user_name = null;
    }

    public String getC_itemid() {
      return this.c_itemid;
    }

    public create_comment_own_args setC_itemid(String c_itemid) {
      this.c_itemid = c_itemid;
      return this;
    }

    public void unsetC_itemid() {
      this.c_itemid = null;
    }

    /** Returns true if field c_itemid is set (has been assigned a value) and false otherwise */
    public boolean isSetC_itemid() {
      return this.c_itemid != null;
    }

    public void setC_itemidIsSet(boolean value) {
      if (!value) {
        this.c_itemid = null;
      }
    }

    public String getC_itemgroup() {
      return this.c_itemgroup;
    }

    public create_comment_own_args setC_itemgroup(String c_itemgroup) {
      this.c_itemgroup = c_itemgroup;
      return this;
    }

    public void unsetC_itemgroup() {
      this.c_itemgroup = null;
    }

    /** Returns true if field c_itemgroup is set (has been assigned a value) and false otherwise */
    public boolean isSetC_itemgroup() {
      return this.c_itemgroup != null;
    }

    public void setC_itemgroupIsSet(boolean value) {
      if (!value) {
        this.c_itemgroup = null;
      }
    }

    public String getC_id() {
      return this.c_id;
    }

    public create_comment_own_args setC_id(String c_id) {
      this.c_id = c_id;
      return this;
    }

    public void unsetC_id() {
      this.c_id = null;
    }

    /** Returns true if field c_id is set (has been assigned a value) and false otherwise */
    public boolean isSetC_id() {
      return this.c_id != null;
    }

    public void setC_idIsSet(boolean value) {
      if (!value) {
        this.c_id = null;
      }
    }

    public String getC_content() {
      return this.c_content;
    }

    public create_comment_own_args setC_content(String c_content) {
      this.c_content = c_content;
      return this;
    }

    public void unsetC_content() {
      this.c_content = null;
    }

    /** Returns true if field c_content is set (has been assigned a value) and false otherwise */
    public boolean isSetC_content() {
      return this.c_content != null;
    }

    public void setC_contentIsSet(boolean value) {
      if (!value) {
        this.c_content = null;
      }
    }

    public String getC_users() {
      return this.c_users;
    }

    public create_comment_own_args setC_users(String c_users) {
      this.c_users = c_users;
      return this;
    }

    public void unsetC_users() {
      this.c_users = null;
    }

    /** Returns true if field c_users is set (has been assigned a value) and false otherwise */
    public boolean isSetC_users() {
      return this.c_users != null;
    }

    public void setC_usersIsSet(boolean value) {
      if (!value) {
        this.c_users = null;
      }
    }

    public int getC_time_created() {
      return this.c_time_created;
    }

    public create_comment_own_args setC_time_created(int c_time_created) {
      this.c_time_created = c_time_created;
      setC_time_createdIsSet(true);
      return this;
    }

    public void unsetC_time_created() {
      __isset_bit_vector.clear(__C_TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field c_time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetC_time_created() {
      return __isset_bit_vector.get(__C_TIME_CREATED_ISSET_ID);
    }

    public void setC_time_createdIsSet(boolean value) {
      __isset_bit_vector.set(__C_TIME_CREATED_ISSET_ID, value);
    }

    public String getUser_name() {
      return this.user_name;
    }

    public create_comment_own_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case C_ITEMID:
        if (value == null) {
          unsetC_itemid();
        } else {
          setC_itemid((String)value);
        }
        break;

      case C_ITEMGROUP:
        if (value == null) {
          unsetC_itemgroup();
        } else {
          setC_itemgroup((String)value);
        }
        break;

      case C_ID:
        if (value == null) {
          unsetC_id();
        } else {
          setC_id((String)value);
        }
        break;

      case C_CONTENT:
        if (value == null) {
          unsetC_content();
        } else {
          setC_content((String)value);
        }
        break;

      case C_USERS:
        if (value == null) {
          unsetC_users();
        } else {
          setC_users((String)value);
        }
        break;

      case C_TIME_CREATED:
        if (value == null) {
          unsetC_time_created();
        } else {
          setC_time_created((Integer)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case C_ITEMID:
        return getC_itemid();

      case C_ITEMGROUP:
        return getC_itemgroup();

      case C_ID:
        return getC_id();

      case C_CONTENT:
        return getC_content();

      case C_USERS:
        return getC_users();

      case C_TIME_CREATED:
        return Integer.valueOf(getC_time_created());

      case USER_NAME:
        return getUser_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case C_ITEMID:
        return isSetC_itemid();
      case C_ITEMGROUP:
        return isSetC_itemgroup();
      case C_ID:
        return isSetC_id();
      case C_CONTENT:
        return isSetC_content();
      case C_USERS:
        return isSetC_users();
      case C_TIME_CREATED:
        return isSetC_time_created();
      case USER_NAME:
        return isSetUser_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_comment_own_args)
        return this.equals((create_comment_own_args)that);
      return false;
    }

    public boolean equals(create_comment_own_args that) {
      if (that == null)
        return false;

      boolean this_present_c_itemid = true && this.isSetC_itemid();
      boolean that_present_c_itemid = true && that.isSetC_itemid();
      if (this_present_c_itemid || that_present_c_itemid) {
        if (!(this_present_c_itemid && that_present_c_itemid))
          return false;
        if (!this.c_itemid.equals(that.c_itemid))
          return false;
      }

      boolean this_present_c_itemgroup = true && this.isSetC_itemgroup();
      boolean that_present_c_itemgroup = true && that.isSetC_itemgroup();
      if (this_present_c_itemgroup || that_present_c_itemgroup) {
        if (!(this_present_c_itemgroup && that_present_c_itemgroup))
          return false;
        if (!this.c_itemgroup.equals(that.c_itemgroup))
          return false;
      }

      boolean this_present_c_id = true && this.isSetC_id();
      boolean that_present_c_id = true && that.isSetC_id();
      if (this_present_c_id || that_present_c_id) {
        if (!(this_present_c_id && that_present_c_id))
          return false;
        if (!this.c_id.equals(that.c_id))
          return false;
      }

      boolean this_present_c_content = true && this.isSetC_content();
      boolean that_present_c_content = true && that.isSetC_content();
      if (this_present_c_content || that_present_c_content) {
        if (!(this_present_c_content && that_present_c_content))
          return false;
        if (!this.c_content.equals(that.c_content))
          return false;
      }

      boolean this_present_c_users = true && this.isSetC_users();
      boolean that_present_c_users = true && that.isSetC_users();
      if (this_present_c_users || that_present_c_users) {
        if (!(this_present_c_users && that_present_c_users))
          return false;
        if (!this.c_users.equals(that.c_users))
          return false;
      }

      boolean this_present_c_time_created = true;
      boolean that_present_c_time_created = true;
      if (this_present_c_time_created || that_present_c_time_created) {
        if (!(this_present_c_time_created && that_present_c_time_created))
          return false;
        if (this.c_time_created != that.c_time_created)
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_comment_own_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_comment_own_args typedOther = (create_comment_own_args)other;

      lastComparison = Boolean.valueOf(isSetC_itemid()).compareTo(typedOther.isSetC_itemid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_itemid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_itemid, typedOther.c_itemid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_itemgroup()).compareTo(typedOther.isSetC_itemgroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_itemgroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_itemgroup, typedOther.c_itemgroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_id()).compareTo(typedOther.isSetC_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_id, typedOther.c_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_content()).compareTo(typedOther.isSetC_content());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_content()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_content, typedOther.c_content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_users()).compareTo(typedOther.isSetC_users());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_users()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_users, typedOther.c_users);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_time_created()).compareTo(typedOther.isSetC_time_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_time_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_time_created, typedOther.c_time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_comment_own_args(");
      boolean first = true;

      sb.append("c_itemid:");
      if (this.c_itemid == null) {
        sb.append("null");
      } else {
        sb.append(this.c_itemid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_itemgroup:");
      if (this.c_itemgroup == null) {
        sb.append("null");
      } else {
        sb.append(this.c_itemgroup);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_id:");
      if (this.c_id == null) {
        sb.append("null");
      } else {
        sb.append(this.c_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_content:");
      if (this.c_content == null) {
        sb.append("null");
      } else {
        sb.append(this.c_content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_users:");
      if (this.c_users == null) {
        sb.append("null");
      } else {
        sb.append(this.c_users);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_time_created:");
      sb.append(this.c_time_created);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_comment_own_argsStandardSchemeFactory implements SchemeFactory {
      public create_comment_own_argsStandardScheme getScheme() {
        return new create_comment_own_argsStandardScheme();
      }
    }

    private static class create_comment_own_argsStandardScheme extends StandardScheme<create_comment_own_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_comment_own_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // C_ITEMID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_itemid = iprot.readString();
                struct.setC_itemidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // C_ITEMGROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_itemgroup = iprot.readString();
                struct.setC_itemgroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // C_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_id = iprot.readString();
                struct.setC_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // C_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_content = iprot.readString();
                struct.setC_contentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // C_USERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_users = iprot.readString();
                struct.setC_usersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // C_TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.c_time_created = iprot.readI32();
                struct.setC_time_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_comment_own_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.c_itemid != null) {
          oprot.writeFieldBegin(C_ITEMID_FIELD_DESC);
          oprot.writeString(struct.c_itemid);
          oprot.writeFieldEnd();
        }
        if (struct.c_itemgroup != null) {
          oprot.writeFieldBegin(C_ITEMGROUP_FIELD_DESC);
          oprot.writeString(struct.c_itemgroup);
          oprot.writeFieldEnd();
        }
        if (struct.c_id != null) {
          oprot.writeFieldBegin(C_ID_FIELD_DESC);
          oprot.writeString(struct.c_id);
          oprot.writeFieldEnd();
        }
        if (struct.c_content != null) {
          oprot.writeFieldBegin(C_CONTENT_FIELD_DESC);
          oprot.writeString(struct.c_content);
          oprot.writeFieldEnd();
        }
        if (struct.c_users != null) {
          oprot.writeFieldBegin(C_USERS_FIELD_DESC);
          oprot.writeString(struct.c_users);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(C_TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.c_time_created);
        oprot.writeFieldEnd();
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_comment_own_argsTupleSchemeFactory implements SchemeFactory {
      public create_comment_own_argsTupleScheme getScheme() {
        return new create_comment_own_argsTupleScheme();
      }
    }

    private static class create_comment_own_argsTupleScheme extends TupleScheme<create_comment_own_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_comment_own_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetC_itemid()) {
          optionals.set(0);
        }
        if (struct.isSetC_itemgroup()) {
          optionals.set(1);
        }
        if (struct.isSetC_id()) {
          optionals.set(2);
        }
        if (struct.isSetC_content()) {
          optionals.set(3);
        }
        if (struct.isSetC_users()) {
          optionals.set(4);
        }
        if (struct.isSetC_time_created()) {
          optionals.set(5);
        }
        if (struct.isSetUser_name()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetC_itemid()) {
          oprot.writeString(struct.c_itemid);
        }
        if (struct.isSetC_itemgroup()) {
          oprot.writeString(struct.c_itemgroup);
        }
        if (struct.isSetC_id()) {
          oprot.writeString(struct.c_id);
        }
        if (struct.isSetC_content()) {
          oprot.writeString(struct.c_content);
        }
        if (struct.isSetC_users()) {
          oprot.writeString(struct.c_users);
        }
        if (struct.isSetC_time_created()) {
          oprot.writeI32(struct.c_time_created);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_comment_own_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.c_itemid = iprot.readString();
          struct.setC_itemidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.c_itemgroup = iprot.readString();
          struct.setC_itemgroupIsSet(true);
        }
        if (incoming.get(2)) {
          struct.c_id = iprot.readString();
          struct.setC_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.c_content = iprot.readString();
          struct.setC_contentIsSet(true);
        }
        if (incoming.get(4)) {
          struct.c_users = iprot.readString();
          struct.setC_usersIsSet(true);
        }
        if (incoming.get(5)) {
          struct.c_time_created = iprot.readI32();
          struct.setC_time_createdIsSet(true);
        }
        if (incoming.get(6)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
      }
    }

  }

  public static class create_comment_own_result implements org.apache.thrift.TBase<create_comment_own_result, create_comment_own_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_comment_own_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_comment_own_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_comment_own_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_comment_own_result.class, metaDataMap);
    }

    public create_comment_own_result() {
    }

    public create_comment_own_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_comment_own_result(create_comment_own_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public create_comment_own_result deepCopy() {
      return new create_comment_own_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public create_comment_own_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_comment_own_result)
        return this.equals((create_comment_own_result)that);
      return false;
    }

    public boolean equals(create_comment_own_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_comment_own_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_comment_own_result typedOther = (create_comment_own_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_comment_own_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_comment_own_resultStandardSchemeFactory implements SchemeFactory {
      public create_comment_own_resultStandardScheme getScheme() {
        return new create_comment_own_resultStandardScheme();
      }
    }

    private static class create_comment_own_resultStandardScheme extends StandardScheme<create_comment_own_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_comment_own_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_comment_own_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_comment_own_resultTupleSchemeFactory implements SchemeFactory {
      public create_comment_own_resultTupleScheme getScheme() {
        return new create_comment_own_resultTupleScheme();
      }
    }

    private static class create_comment_own_resultTupleScheme extends TupleScheme<create_comment_own_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_comment_own_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_comment_own_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class edit_comment_args implements org.apache.thrift.TBase<edit_comment_args, edit_comment_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_comment_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField C_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("c_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField C_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("c_content", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField C_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("c_users", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField C_TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("c_time_created", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_comment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_comment_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String c_id; // required
    public String c_content; // required
    public String c_users; // required
    public int c_time_created; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      C_ID((short)2, "c_id"),
      C_CONTENT((short)3, "c_content"),
      C_USERS((short)4, "c_users"),
      C_TIME_CREATED((short)5, "c_time_created");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // C_ID
            return C_ID;
          case 3: // C_CONTENT
            return C_CONTENT;
          case 4: // C_USERS
            return C_USERS;
          case 5: // C_TIME_CREATED
            return C_TIME_CREATED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __C_TIME_CREATED_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_ID, new org.apache.thrift.meta_data.FieldMetaData("c_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("c_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_USERS, new org.apache.thrift.meta_data.FieldMetaData("c_users", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("c_time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_comment_args.class, metaDataMap);
    }

    public edit_comment_args() {
    }

    public edit_comment_args(
      String user_name,
      String c_id,
      String c_content,
      String c_users,
      int c_time_created)
    {
      this();
      this.user_name = user_name;
      this.c_id = c_id;
      this.c_content = c_content;
      this.c_users = c_users;
      this.c_time_created = c_time_created;
      setC_time_createdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_comment_args(edit_comment_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetC_id()) {
        this.c_id = other.c_id;
      }
      if (other.isSetC_content()) {
        this.c_content = other.c_content;
      }
      if (other.isSetC_users()) {
        this.c_users = other.c_users;
      }
      this.c_time_created = other.c_time_created;
    }

    public edit_comment_args deepCopy() {
      return new edit_comment_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.c_id = null;
      this.c_content = null;
      this.c_users = null;
      setC_time_createdIsSet(false);
      this.c_time_created = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public edit_comment_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getC_id() {
      return this.c_id;
    }

    public edit_comment_args setC_id(String c_id) {
      this.c_id = c_id;
      return this;
    }

    public void unsetC_id() {
      this.c_id = null;
    }

    /** Returns true if field c_id is set (has been assigned a value) and false otherwise */
    public boolean isSetC_id() {
      return this.c_id != null;
    }

    public void setC_idIsSet(boolean value) {
      if (!value) {
        this.c_id = null;
      }
    }

    public String getC_content() {
      return this.c_content;
    }

    public edit_comment_args setC_content(String c_content) {
      this.c_content = c_content;
      return this;
    }

    public void unsetC_content() {
      this.c_content = null;
    }

    /** Returns true if field c_content is set (has been assigned a value) and false otherwise */
    public boolean isSetC_content() {
      return this.c_content != null;
    }

    public void setC_contentIsSet(boolean value) {
      if (!value) {
        this.c_content = null;
      }
    }

    public String getC_users() {
      return this.c_users;
    }

    public edit_comment_args setC_users(String c_users) {
      this.c_users = c_users;
      return this;
    }

    public void unsetC_users() {
      this.c_users = null;
    }

    /** Returns true if field c_users is set (has been assigned a value) and false otherwise */
    public boolean isSetC_users() {
      return this.c_users != null;
    }

    public void setC_usersIsSet(boolean value) {
      if (!value) {
        this.c_users = null;
      }
    }

    public int getC_time_created() {
      return this.c_time_created;
    }

    public edit_comment_args setC_time_created(int c_time_created) {
      this.c_time_created = c_time_created;
      setC_time_createdIsSet(true);
      return this;
    }

    public void unsetC_time_created() {
      __isset_bit_vector.clear(__C_TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field c_time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetC_time_created() {
      return __isset_bit_vector.get(__C_TIME_CREATED_ISSET_ID);
    }

    public void setC_time_createdIsSet(boolean value) {
      __isset_bit_vector.set(__C_TIME_CREATED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case C_ID:
        if (value == null) {
          unsetC_id();
        } else {
          setC_id((String)value);
        }
        break;

      case C_CONTENT:
        if (value == null) {
          unsetC_content();
        } else {
          setC_content((String)value);
        }
        break;

      case C_USERS:
        if (value == null) {
          unsetC_users();
        } else {
          setC_users((String)value);
        }
        break;

      case C_TIME_CREATED:
        if (value == null) {
          unsetC_time_created();
        } else {
          setC_time_created((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case C_ID:
        return getC_id();

      case C_CONTENT:
        return getC_content();

      case C_USERS:
        return getC_users();

      case C_TIME_CREATED:
        return Integer.valueOf(getC_time_created());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case C_ID:
        return isSetC_id();
      case C_CONTENT:
        return isSetC_content();
      case C_USERS:
        return isSetC_users();
      case C_TIME_CREATED:
        return isSetC_time_created();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_comment_args)
        return this.equals((edit_comment_args)that);
      return false;
    }

    public boolean equals(edit_comment_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_c_id = true && this.isSetC_id();
      boolean that_present_c_id = true && that.isSetC_id();
      if (this_present_c_id || that_present_c_id) {
        if (!(this_present_c_id && that_present_c_id))
          return false;
        if (!this.c_id.equals(that.c_id))
          return false;
      }

      boolean this_present_c_content = true && this.isSetC_content();
      boolean that_present_c_content = true && that.isSetC_content();
      if (this_present_c_content || that_present_c_content) {
        if (!(this_present_c_content && that_present_c_content))
          return false;
        if (!this.c_content.equals(that.c_content))
          return false;
      }

      boolean this_present_c_users = true && this.isSetC_users();
      boolean that_present_c_users = true && that.isSetC_users();
      if (this_present_c_users || that_present_c_users) {
        if (!(this_present_c_users && that_present_c_users))
          return false;
        if (!this.c_users.equals(that.c_users))
          return false;
      }

      boolean this_present_c_time_created = true;
      boolean that_present_c_time_created = true;
      if (this_present_c_time_created || that_present_c_time_created) {
        if (!(this_present_c_time_created && that_present_c_time_created))
          return false;
        if (this.c_time_created != that.c_time_created)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_comment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_comment_args typedOther = (edit_comment_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_id()).compareTo(typedOther.isSetC_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_id, typedOther.c_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_content()).compareTo(typedOther.isSetC_content());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_content()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_content, typedOther.c_content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_users()).compareTo(typedOther.isSetC_users());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_users()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_users, typedOther.c_users);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_time_created()).compareTo(typedOther.isSetC_time_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_time_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_time_created, typedOther.c_time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_comment_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_id:");
      if (this.c_id == null) {
        sb.append("null");
      } else {
        sb.append(this.c_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_content:");
      if (this.c_content == null) {
        sb.append("null");
      } else {
        sb.append(this.c_content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_users:");
      if (this.c_users == null) {
        sb.append("null");
      } else {
        sb.append(this.c_users);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_time_created:");
      sb.append(this.c_time_created);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_comment_argsStandardSchemeFactory implements SchemeFactory {
      public edit_comment_argsStandardScheme getScheme() {
        return new edit_comment_argsStandardScheme();
      }
    }

    private static class edit_comment_argsStandardScheme extends StandardScheme<edit_comment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_comment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // C_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_id = iprot.readString();
                struct.setC_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // C_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_content = iprot.readString();
                struct.setC_contentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // C_USERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_users = iprot.readString();
                struct.setC_usersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // C_TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.c_time_created = iprot.readI32();
                struct.setC_time_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_comment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.c_id != null) {
          oprot.writeFieldBegin(C_ID_FIELD_DESC);
          oprot.writeString(struct.c_id);
          oprot.writeFieldEnd();
        }
        if (struct.c_content != null) {
          oprot.writeFieldBegin(C_CONTENT_FIELD_DESC);
          oprot.writeString(struct.c_content);
          oprot.writeFieldEnd();
        }
        if (struct.c_users != null) {
          oprot.writeFieldBegin(C_USERS_FIELD_DESC);
          oprot.writeString(struct.c_users);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(C_TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.c_time_created);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_comment_argsTupleSchemeFactory implements SchemeFactory {
      public edit_comment_argsTupleScheme getScheme() {
        return new edit_comment_argsTupleScheme();
      }
    }

    private static class edit_comment_argsTupleScheme extends TupleScheme<edit_comment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_comment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetC_id()) {
          optionals.set(1);
        }
        if (struct.isSetC_content()) {
          optionals.set(2);
        }
        if (struct.isSetC_users()) {
          optionals.set(3);
        }
        if (struct.isSetC_time_created()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetC_id()) {
          oprot.writeString(struct.c_id);
        }
        if (struct.isSetC_content()) {
          oprot.writeString(struct.c_content);
        }
        if (struct.isSetC_users()) {
          oprot.writeString(struct.c_users);
        }
        if (struct.isSetC_time_created()) {
          oprot.writeI32(struct.c_time_created);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_comment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.c_id = iprot.readString();
          struct.setC_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.c_content = iprot.readString();
          struct.setC_contentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.c_users = iprot.readString();
          struct.setC_usersIsSet(true);
        }
        if (incoming.get(4)) {
          struct.c_time_created = iprot.readI32();
          struct.setC_time_createdIsSet(true);
        }
      }
    }

  }

  public static class edit_comment_result implements org.apache.thrift.TBase<edit_comment_result, edit_comment_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edit_comment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new edit_comment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new edit_comment_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edit_comment_result.class, metaDataMap);
    }

    public edit_comment_result() {
    }

    public edit_comment_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edit_comment_result(edit_comment_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public edit_comment_result deepCopy() {
      return new edit_comment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public edit_comment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof edit_comment_result)
        return this.equals((edit_comment_result)that);
      return false;
    }

    public boolean equals(edit_comment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(edit_comment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      edit_comment_result typedOther = (edit_comment_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("edit_comment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edit_comment_resultStandardSchemeFactory implements SchemeFactory {
      public edit_comment_resultStandardScheme getScheme() {
        return new edit_comment_resultStandardScheme();
      }
    }

    private static class edit_comment_resultStandardScheme extends StandardScheme<edit_comment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edit_comment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edit_comment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edit_comment_resultTupleSchemeFactory implements SchemeFactory {
      public edit_comment_resultTupleScheme getScheme() {
        return new edit_comment_resultTupleScheme();
      }
    }

    private static class edit_comment_resultTupleScheme extends TupleScheme<edit_comment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edit_comment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edit_comment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_comment_args implements org.apache.thrift.TBase<delete_comment_args, delete_comment_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_comment_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_comment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_comment_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_comment_args.class, metaDataMap);
    }

    public delete_comment_args() {
    }

    public delete_comment_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_comment_args(delete_comment_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public delete_comment_args deepCopy() {
      return new delete_comment_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public delete_comment_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_comment_args)
        return this.equals((delete_comment_args)that);
      return false;
    }

    public boolean equals(delete_comment_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_comment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_comment_args typedOther = (delete_comment_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_comment_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_comment_argsStandardSchemeFactory implements SchemeFactory {
      public delete_comment_argsStandardScheme getScheme() {
        return new delete_comment_argsStandardScheme();
      }
    }

    private static class delete_comment_argsStandardScheme extends StandardScheme<delete_comment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_comment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_comment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_comment_argsTupleSchemeFactory implements SchemeFactory {
      public delete_comment_argsTupleScheme getScheme() {
        return new delete_comment_argsTupleScheme();
      }
    }

    private static class delete_comment_argsTupleScheme extends TupleScheme<delete_comment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_comment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_comment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class delete_comment_result implements org.apache.thrift.TBase<delete_comment_result, delete_comment_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_comment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_comment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_comment_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_comment_result.class, metaDataMap);
    }

    public delete_comment_result() {
    }

    public delete_comment_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_comment_result(delete_comment_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public delete_comment_result deepCopy() {
      return new delete_comment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delete_comment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_comment_result)
        return this.equals((delete_comment_result)that);
      return false;
    }

    public boolean equals(delete_comment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_comment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_comment_result typedOther = (delete_comment_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_comment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_comment_resultStandardSchemeFactory implements SchemeFactory {
      public delete_comment_resultStandardScheme getScheme() {
        return new delete_comment_resultStandardScheme();
      }
    }

    private static class delete_comment_resultStandardScheme extends StandardScheme<delete_comment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_comment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_comment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_comment_resultTupleSchemeFactory implements SchemeFactory {
      public delete_comment_resultTupleScheme getScheme() {
        return new delete_comment_resultTupleScheme();
      }
    }

    private static class delete_comment_resultTupleScheme extends TupleScheme<delete_comment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_comment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_comment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class comment_spam_args implements org.apache.thrift.TBase<comment_spam_args, comment_spam_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("comment_spam_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new comment_spam_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new comment_spam_argsTupleSchemeFactory());
    }

    public String id; // required
    public String user_name; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      USER_NAME((short)2, "user_name"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(comment_spam_args.class, metaDataMap);
    }

    public comment_spam_args() {
    }

    public comment_spam_args(
      String id,
      String user_name,
      int time)
    {
      this();
      this.id = id;
      this.user_name = user_name;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public comment_spam_args(comment_spam_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      this.time = other.time;
    }

    public comment_spam_args deepCopy() {
      return new comment_spam_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.user_name = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getId() {
      return this.id;
    }

    public comment_spam_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public comment_spam_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public comment_spam_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case USER_NAME:
        return getUser_name();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case USER_NAME:
        return isSetUser_name();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof comment_spam_args)
        return this.equals((comment_spam_args)that);
      return false;
    }

    public boolean equals(comment_spam_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(comment_spam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      comment_spam_args typedOther = (comment_spam_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("comment_spam_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class comment_spam_argsStandardSchemeFactory implements SchemeFactory {
      public comment_spam_argsStandardScheme getScheme() {
        return new comment_spam_argsStandardScheme();
      }
    }

    private static class comment_spam_argsStandardScheme extends StandardScheme<comment_spam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, comment_spam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, comment_spam_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class comment_spam_argsTupleSchemeFactory implements SchemeFactory {
      public comment_spam_argsTupleScheme getScheme() {
        return new comment_spam_argsTupleScheme();
      }
    }

    private static class comment_spam_argsTupleScheme extends TupleScheme<comment_spam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, comment_spam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, comment_spam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class comment_spam_result implements org.apache.thrift.TBase<comment_spam_result, comment_spam_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("comment_spam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new comment_spam_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new comment_spam_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(comment_spam_result.class, metaDataMap);
    }

    public comment_spam_result() {
    }

    public comment_spam_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public comment_spam_result(comment_spam_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public comment_spam_result deepCopy() {
      return new comment_spam_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public comment_spam_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof comment_spam_result)
        return this.equals((comment_spam_result)that);
      return false;
    }

    public boolean equals(comment_spam_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(comment_spam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      comment_spam_result typedOther = (comment_spam_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("comment_spam_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class comment_spam_resultStandardSchemeFactory implements SchemeFactory {
      public comment_spam_resultStandardScheme getScheme() {
        return new comment_spam_resultStandardScheme();
      }
    }

    private static class comment_spam_resultStandardScheme extends StandardScheme<comment_spam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, comment_spam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, comment_spam_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class comment_spam_resultTupleSchemeFactory implements SchemeFactory {
      public comment_spam_resultTupleScheme getScheme() {
        return new comment_spam_resultTupleScheme();
      }
    }

    private static class comment_spam_resultTupleScheme extends TupleScheme<comment_spam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, comment_spam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, comment_spam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_all_comments_args implements org.apache.thrift.TBase<get_all_comments_args, get_all_comments_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_comments_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField C_ITEMTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("c_itemtype", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField C_ITEMID_FIELD_DESC = new org.apache.thrift.protocol.TField("c_itemid", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_all_comments_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_all_comments_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String c_itemtype; // required
    public String c_itemid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      C_ITEMTYPE((short)2, "c_itemtype"),
      C_ITEMID((short)3, "c_itemid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // C_ITEMTYPE
            return C_ITEMTYPE;
          case 3: // C_ITEMID
            return C_ITEMID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_ITEMTYPE, new org.apache.thrift.meta_data.FieldMetaData("c_itemtype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_ITEMID, new org.apache.thrift.meta_data.FieldMetaData("c_itemid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_comments_args.class, metaDataMap);
    }

    public get_all_comments_args() {
    }

    public get_all_comments_args(
      String user_name,
      String c_itemtype,
      String c_itemid)
    {
      this();
      this.user_name = user_name;
      this.c_itemtype = c_itemtype;
      this.c_itemid = c_itemid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_comments_args(get_all_comments_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetC_itemtype()) {
        this.c_itemtype = other.c_itemtype;
      }
      if (other.isSetC_itemid()) {
        this.c_itemid = other.c_itemid;
      }
    }

    public get_all_comments_args deepCopy() {
      return new get_all_comments_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.c_itemtype = null;
      this.c_itemid = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_all_comments_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getC_itemtype() {
      return this.c_itemtype;
    }

    public get_all_comments_args setC_itemtype(String c_itemtype) {
      this.c_itemtype = c_itemtype;
      return this;
    }

    public void unsetC_itemtype() {
      this.c_itemtype = null;
    }

    /** Returns true if field c_itemtype is set (has been assigned a value) and false otherwise */
    public boolean isSetC_itemtype() {
      return this.c_itemtype != null;
    }

    public void setC_itemtypeIsSet(boolean value) {
      if (!value) {
        this.c_itemtype = null;
      }
    }

    public String getC_itemid() {
      return this.c_itemid;
    }

    public get_all_comments_args setC_itemid(String c_itemid) {
      this.c_itemid = c_itemid;
      return this;
    }

    public void unsetC_itemid() {
      this.c_itemid = null;
    }

    /** Returns true if field c_itemid is set (has been assigned a value) and false otherwise */
    public boolean isSetC_itemid() {
      return this.c_itemid != null;
    }

    public void setC_itemidIsSet(boolean value) {
      if (!value) {
        this.c_itemid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case C_ITEMTYPE:
        if (value == null) {
          unsetC_itemtype();
        } else {
          setC_itemtype((String)value);
        }
        break;

      case C_ITEMID:
        if (value == null) {
          unsetC_itemid();
        } else {
          setC_itemid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case C_ITEMTYPE:
        return getC_itemtype();

      case C_ITEMID:
        return getC_itemid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case C_ITEMTYPE:
        return isSetC_itemtype();
      case C_ITEMID:
        return isSetC_itemid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_comments_args)
        return this.equals((get_all_comments_args)that);
      return false;
    }

    public boolean equals(get_all_comments_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_c_itemtype = true && this.isSetC_itemtype();
      boolean that_present_c_itemtype = true && that.isSetC_itemtype();
      if (this_present_c_itemtype || that_present_c_itemtype) {
        if (!(this_present_c_itemtype && that_present_c_itemtype))
          return false;
        if (!this.c_itemtype.equals(that.c_itemtype))
          return false;
      }

      boolean this_present_c_itemid = true && this.isSetC_itemid();
      boolean that_present_c_itemid = true && that.isSetC_itemid();
      if (this_present_c_itemid || that_present_c_itemid) {
        if (!(this_present_c_itemid && that_present_c_itemid))
          return false;
        if (!this.c_itemid.equals(that.c_itemid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_all_comments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_all_comments_args typedOther = (get_all_comments_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_itemtype()).compareTo(typedOther.isSetC_itemtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_itemtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_itemtype, typedOther.c_itemtype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_itemid()).compareTo(typedOther.isSetC_itemid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_itemid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_itemid, typedOther.c_itemid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_comments_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_itemtype:");
      if (this.c_itemtype == null) {
        sb.append("null");
      } else {
        sb.append(this.c_itemtype);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_itemid:");
      if (this.c_itemid == null) {
        sb.append("null");
      } else {
        sb.append(this.c_itemid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_all_comments_argsStandardSchemeFactory implements SchemeFactory {
      public get_all_comments_argsStandardScheme getScheme() {
        return new get_all_comments_argsStandardScheme();
      }
    }

    private static class get_all_comments_argsStandardScheme extends StandardScheme<get_all_comments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_comments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // C_ITEMTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_itemtype = iprot.readString();
                struct.setC_itemtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // C_ITEMID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_itemid = iprot.readString();
                struct.setC_itemidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_comments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.c_itemtype != null) {
          oprot.writeFieldBegin(C_ITEMTYPE_FIELD_DESC);
          oprot.writeString(struct.c_itemtype);
          oprot.writeFieldEnd();
        }
        if (struct.c_itemid != null) {
          oprot.writeFieldBegin(C_ITEMID_FIELD_DESC);
          oprot.writeString(struct.c_itemid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_all_comments_argsTupleSchemeFactory implements SchemeFactory {
      public get_all_comments_argsTupleScheme getScheme() {
        return new get_all_comments_argsTupleScheme();
      }
    }

    private static class get_all_comments_argsTupleScheme extends TupleScheme<get_all_comments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_comments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetC_itemtype()) {
          optionals.set(1);
        }
        if (struct.isSetC_itemid()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetC_itemtype()) {
          oprot.writeString(struct.c_itemtype);
        }
        if (struct.isSetC_itemid()) {
          oprot.writeString(struct.c_itemid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_comments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.c_itemtype = iprot.readString();
          struct.setC_itemtypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.c_itemid = iprot.readString();
          struct.setC_itemidIsSet(true);
        }
      }
    }

  }

  public static class get_all_comments_result implements org.apache.thrift.TBase<get_all_comments_result, get_all_comments_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_comments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_all_comments_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_all_comments_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_comments_result.class, metaDataMap);
    }

    public get_all_comments_result() {
    }

    public get_all_comments_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_comments_result(get_all_comments_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_all_comments_result deepCopy() {
      return new get_all_comments_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_all_comments_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_comments_result)
        return this.equals((get_all_comments_result)that);
      return false;
    }

    public boolean equals(get_all_comments_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_all_comments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_all_comments_result typedOther = (get_all_comments_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_comments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_all_comments_resultStandardSchemeFactory implements SchemeFactory {
      public get_all_comments_resultStandardScheme getScheme() {
        return new get_all_comments_resultStandardScheme();
      }
    }

    private static class get_all_comments_resultStandardScheme extends StandardScheme<get_all_comments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_comments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_comments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_all_comments_resultTupleSchemeFactory implements SchemeFactory {
      public get_all_comments_resultTupleScheme getScheme() {
        return new get_all_comments_resultTupleScheme();
      }
    }

    private static class get_all_comments_resultTupleScheme extends TupleScheme<get_all_comments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_comments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_comments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_comments_args implements org.apache.thrift.TBase<get_comments_args, get_comments_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_comments_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField C_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("c_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_comments_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_comments_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String c_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      C_ID((short)2, "c_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // C_ID
            return C_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_ID, new org.apache.thrift.meta_data.FieldMetaData("c_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_comments_args.class, metaDataMap);
    }

    public get_comments_args() {
    }

    public get_comments_args(
      String user_name,
      String c_id)
    {
      this();
      this.user_name = user_name;
      this.c_id = c_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_comments_args(get_comments_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetC_id()) {
        this.c_id = other.c_id;
      }
    }

    public get_comments_args deepCopy() {
      return new get_comments_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.c_id = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public get_comments_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getC_id() {
      return this.c_id;
    }

    public get_comments_args setC_id(String c_id) {
      this.c_id = c_id;
      return this;
    }

    public void unsetC_id() {
      this.c_id = null;
    }

    /** Returns true if field c_id is set (has been assigned a value) and false otherwise */
    public boolean isSetC_id() {
      return this.c_id != null;
    }

    public void setC_idIsSet(boolean value) {
      if (!value) {
        this.c_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case C_ID:
        if (value == null) {
          unsetC_id();
        } else {
          setC_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case C_ID:
        return getC_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case C_ID:
        return isSetC_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_comments_args)
        return this.equals((get_comments_args)that);
      return false;
    }

    public boolean equals(get_comments_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_c_id = true && this.isSetC_id();
      boolean that_present_c_id = true && that.isSetC_id();
      if (this_present_c_id || that_present_c_id) {
        if (!(this_present_c_id && that_present_c_id))
          return false;
        if (!this.c_id.equals(that.c_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_comments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_comments_args typedOther = (get_comments_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_id()).compareTo(typedOther.isSetC_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_id, typedOther.c_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_comments_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_id:");
      if (this.c_id == null) {
        sb.append("null");
      } else {
        sb.append(this.c_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_comments_argsStandardSchemeFactory implements SchemeFactory {
      public get_comments_argsStandardScheme getScheme() {
        return new get_comments_argsStandardScheme();
      }
    }

    private static class get_comments_argsStandardScheme extends StandardScheme<get_comments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_comments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // C_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_id = iprot.readString();
                struct.setC_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_comments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.c_id != null) {
          oprot.writeFieldBegin(C_ID_FIELD_DESC);
          oprot.writeString(struct.c_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_comments_argsTupleSchemeFactory implements SchemeFactory {
      public get_comments_argsTupleScheme getScheme() {
        return new get_comments_argsTupleScheme();
      }
    }

    private static class get_comments_argsTupleScheme extends TupleScheme<get_comments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_comments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetC_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetC_id()) {
          oprot.writeString(struct.c_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_comments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.c_id = iprot.readString();
          struct.setC_idIsSet(true);
        }
      }
    }

  }

  public static class get_comments_result implements org.apache.thrift.TBase<get_comments_result, get_comments_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_comments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_comments_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_comments_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_comments_result.class, metaDataMap);
    }

    public get_comments_result() {
    }

    public get_comments_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_comments_result(get_comments_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public get_comments_result deepCopy() {
      return new get_comments_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_comments_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_comments_result)
        return this.equals((get_comments_result)that);
      return false;
    }

    public boolean equals(get_comments_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_comments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_comments_result typedOther = (get_comments_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_comments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_comments_resultStandardSchemeFactory implements SchemeFactory {
      public get_comments_resultStandardScheme getScheme() {
        return new get_comments_resultStandardScheme();
      }
    }

    private static class get_comments_resultStandardScheme extends StandardScheme<get_comments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_comments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_comments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_comments_resultTupleSchemeFactory implements SchemeFactory {
      public get_comments_resultTupleScheme getScheme() {
        return new get_comments_resultTupleScheme();
      }
    }

    private static class get_comments_resultTupleScheme extends TupleScheme<get_comments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_comments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_comments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class debate_townhall_suggestion_args implements org.apache.thrift.TBase<debate_townhall_suggestion_args, debate_townhall_suggestion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("debate_townhall_suggestion_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ITEM_TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("item_topic", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ITEM_CELEBRITY_FIELD_DESC = new org.apache.thrift.protocol.TField("item_celebrity", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField ITEM_TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("item_time_created", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new debate_townhall_suggestion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new debate_townhall_suggestion_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String user_name; // required
    public String item_id; // required
    public String item_topic; // required
    public String item_celebrity; // required
    public int item_time_created; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      USER_NAME((short)2, "user_name"),
      ITEM_ID((short)3, "item_id"),
      ITEM_TOPIC((short)4, "item_topic"),
      ITEM_CELEBRITY((short)5, "item_celebrity"),
      ITEM_TIME_CREATED((short)6, "item_time_created");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // ITEM_ID
            return ITEM_ID;
          case 4: // ITEM_TOPIC
            return ITEM_TOPIC;
          case 5: // ITEM_CELEBRITY
            return ITEM_CELEBRITY;
          case 6: // ITEM_TIME_CREATED
            return ITEM_TIME_CREATED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ITEM_TIME_CREATED_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_TOPIC, new org.apache.thrift.meta_data.FieldMetaData("item_topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_CELEBRITY, new org.apache.thrift.meta_data.FieldMetaData("item_celebrity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("item_time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(debate_townhall_suggestion_args.class, metaDataMap);
    }

    public debate_townhall_suggestion_args() {
    }

    public debate_townhall_suggestion_args(
      String item_type,
      String user_name,
      String item_id,
      String item_topic,
      String item_celebrity,
      int item_time_created)
    {
      this();
      this.item_type = item_type;
      this.user_name = user_name;
      this.item_id = item_id;
      this.item_topic = item_topic;
      this.item_celebrity = item_celebrity;
      this.item_time_created = item_time_created;
      setItem_time_createdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public debate_townhall_suggestion_args(debate_townhall_suggestion_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
      if (other.isSetItem_topic()) {
        this.item_topic = other.item_topic;
      }
      if (other.isSetItem_celebrity()) {
        this.item_celebrity = other.item_celebrity;
      }
      this.item_time_created = other.item_time_created;
    }

    public debate_townhall_suggestion_args deepCopy() {
      return new debate_townhall_suggestion_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.user_name = null;
      this.item_id = null;
      this.item_topic = null;
      this.item_celebrity = null;
      setItem_time_createdIsSet(false);
      this.item_time_created = 0;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public debate_townhall_suggestion_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public debate_townhall_suggestion_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public debate_townhall_suggestion_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public String getItem_topic() {
      return this.item_topic;
    }

    public debate_townhall_suggestion_args setItem_topic(String item_topic) {
      this.item_topic = item_topic;
      return this;
    }

    public void unsetItem_topic() {
      this.item_topic = null;
    }

    /** Returns true if field item_topic is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_topic() {
      return this.item_topic != null;
    }

    public void setItem_topicIsSet(boolean value) {
      if (!value) {
        this.item_topic = null;
      }
    }

    public String getItem_celebrity() {
      return this.item_celebrity;
    }

    public debate_townhall_suggestion_args setItem_celebrity(String item_celebrity) {
      this.item_celebrity = item_celebrity;
      return this;
    }

    public void unsetItem_celebrity() {
      this.item_celebrity = null;
    }

    /** Returns true if field item_celebrity is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_celebrity() {
      return this.item_celebrity != null;
    }

    public void setItem_celebrityIsSet(boolean value) {
      if (!value) {
        this.item_celebrity = null;
      }
    }

    public int getItem_time_created() {
      return this.item_time_created;
    }

    public debate_townhall_suggestion_args setItem_time_created(int item_time_created) {
      this.item_time_created = item_time_created;
      setItem_time_createdIsSet(true);
      return this;
    }

    public void unsetItem_time_created() {
      __isset_bit_vector.clear(__ITEM_TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field item_time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_time_created() {
      return __isset_bit_vector.get(__ITEM_TIME_CREATED_ISSET_ID);
    }

    public void setItem_time_createdIsSet(boolean value) {
      __isset_bit_vector.set(__ITEM_TIME_CREATED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      case ITEM_TOPIC:
        if (value == null) {
          unsetItem_topic();
        } else {
          setItem_topic((String)value);
        }
        break;

      case ITEM_CELEBRITY:
        if (value == null) {
          unsetItem_celebrity();
        } else {
          setItem_celebrity((String)value);
        }
        break;

      case ITEM_TIME_CREATED:
        if (value == null) {
          unsetItem_time_created();
        } else {
          setItem_time_created((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case USER_NAME:
        return getUser_name();

      case ITEM_ID:
        return getItem_id();

      case ITEM_TOPIC:
        return getItem_topic();

      case ITEM_CELEBRITY:
        return getItem_celebrity();

      case ITEM_TIME_CREATED:
        return Integer.valueOf(getItem_time_created());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case USER_NAME:
        return isSetUser_name();
      case ITEM_ID:
        return isSetItem_id();
      case ITEM_TOPIC:
        return isSetItem_topic();
      case ITEM_CELEBRITY:
        return isSetItem_celebrity();
      case ITEM_TIME_CREATED:
        return isSetItem_time_created();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof debate_townhall_suggestion_args)
        return this.equals((debate_townhall_suggestion_args)that);
      return false;
    }

    public boolean equals(debate_townhall_suggestion_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      boolean this_present_item_topic = true && this.isSetItem_topic();
      boolean that_present_item_topic = true && that.isSetItem_topic();
      if (this_present_item_topic || that_present_item_topic) {
        if (!(this_present_item_topic && that_present_item_topic))
          return false;
        if (!this.item_topic.equals(that.item_topic))
          return false;
      }

      boolean this_present_item_celebrity = true && this.isSetItem_celebrity();
      boolean that_present_item_celebrity = true && that.isSetItem_celebrity();
      if (this_present_item_celebrity || that_present_item_celebrity) {
        if (!(this_present_item_celebrity && that_present_item_celebrity))
          return false;
        if (!this.item_celebrity.equals(that.item_celebrity))
          return false;
      }

      boolean this_present_item_time_created = true;
      boolean that_present_item_time_created = true;
      if (this_present_item_time_created || that_present_item_time_created) {
        if (!(this_present_item_time_created && that_present_item_time_created))
          return false;
        if (this.item_time_created != that.item_time_created)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(debate_townhall_suggestion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      debate_townhall_suggestion_args typedOther = (debate_townhall_suggestion_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_topic()).compareTo(typedOther.isSetItem_topic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_topic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_topic, typedOther.item_topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_celebrity()).compareTo(typedOther.isSetItem_celebrity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_celebrity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_celebrity, typedOther.item_celebrity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_time_created()).compareTo(typedOther.isSetItem_time_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_time_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_time_created, typedOther.item_time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("debate_townhall_suggestion_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_topic:");
      if (this.item_topic == null) {
        sb.append("null");
      } else {
        sb.append(this.item_topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_celebrity:");
      if (this.item_celebrity == null) {
        sb.append("null");
      } else {
        sb.append(this.item_celebrity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_time_created:");
      sb.append(this.item_time_created);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class debate_townhall_suggestion_argsStandardSchemeFactory implements SchemeFactory {
      public debate_townhall_suggestion_argsStandardScheme getScheme() {
        return new debate_townhall_suggestion_argsStandardScheme();
      }
    }

    private static class debate_townhall_suggestion_argsStandardScheme extends StandardScheme<debate_townhall_suggestion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, debate_townhall_suggestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ITEM_TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_topic = iprot.readString();
                struct.setItem_topicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ITEM_CELEBRITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_celebrity = iprot.readString();
                struct.setItem_celebrityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ITEM_TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.item_time_created = iprot.readI32();
                struct.setItem_time_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, debate_townhall_suggestion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        if (struct.item_topic != null) {
          oprot.writeFieldBegin(ITEM_TOPIC_FIELD_DESC);
          oprot.writeString(struct.item_topic);
          oprot.writeFieldEnd();
        }
        if (struct.item_celebrity != null) {
          oprot.writeFieldBegin(ITEM_CELEBRITY_FIELD_DESC);
          oprot.writeString(struct.item_celebrity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ITEM_TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.item_time_created);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class debate_townhall_suggestion_argsTupleSchemeFactory implements SchemeFactory {
      public debate_townhall_suggestion_argsTupleScheme getScheme() {
        return new debate_townhall_suggestion_argsTupleScheme();
      }
    }

    private static class debate_townhall_suggestion_argsTupleScheme extends TupleScheme<debate_townhall_suggestion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, debate_townhall_suggestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name()) {
          optionals.set(1);
        }
        if (struct.isSetItem_id()) {
          optionals.set(2);
        }
        if (struct.isSetItem_topic()) {
          optionals.set(3);
        }
        if (struct.isSetItem_celebrity()) {
          optionals.set(4);
        }
        if (struct.isSetItem_time_created()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
        if (struct.isSetItem_topic()) {
          oprot.writeString(struct.item_topic);
        }
        if (struct.isSetItem_celebrity()) {
          oprot.writeString(struct.item_celebrity);
        }
        if (struct.isSetItem_time_created()) {
          oprot.writeI32(struct.item_time_created);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, debate_townhall_suggestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.item_topic = iprot.readString();
          struct.setItem_topicIsSet(true);
        }
        if (incoming.get(4)) {
          struct.item_celebrity = iprot.readString();
          struct.setItem_celebrityIsSet(true);
        }
        if (incoming.get(5)) {
          struct.item_time_created = iprot.readI32();
          struct.setItem_time_createdIsSet(true);
        }
      }
    }

  }

  public static class debate_townhall_suggestion_result implements org.apache.thrift.TBase<debate_townhall_suggestion_result, debate_townhall_suggestion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("debate_townhall_suggestion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new debate_townhall_suggestion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new debate_townhall_suggestion_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(debate_townhall_suggestion_result.class, metaDataMap);
    }

    public debate_townhall_suggestion_result() {
    }

    public debate_townhall_suggestion_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public debate_townhall_suggestion_result(debate_townhall_suggestion_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public debate_townhall_suggestion_result deepCopy() {
      return new debate_townhall_suggestion_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public debate_townhall_suggestion_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof debate_townhall_suggestion_result)
        return this.equals((debate_townhall_suggestion_result)that);
      return false;
    }

    public boolean equals(debate_townhall_suggestion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(debate_townhall_suggestion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      debate_townhall_suggestion_result typedOther = (debate_townhall_suggestion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("debate_townhall_suggestion_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class debate_townhall_suggestion_resultStandardSchemeFactory implements SchemeFactory {
      public debate_townhall_suggestion_resultStandardScheme getScheme() {
        return new debate_townhall_suggestion_resultStandardScheme();
      }
    }

    private static class debate_townhall_suggestion_resultStandardScheme extends StandardScheme<debate_townhall_suggestion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, debate_townhall_suggestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, debate_townhall_suggestion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class debate_townhall_suggestion_resultTupleSchemeFactory implements SchemeFactory {
      public debate_townhall_suggestion_resultTupleScheme getScheme() {
        return new debate_townhall_suggestion_resultTupleScheme();
      }
    }

    private static class debate_townhall_suggestion_resultTupleScheme extends TupleScheme<debate_townhall_suggestion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, debate_townhall_suggestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, debate_townhall_suggestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class debate_townhall_suggestion_voteup_args implements org.apache.thrift.TBase<debate_townhall_suggestion_voteup_args, debate_townhall_suggestion_voteup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("debate_townhall_suggestion_voteup_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new debate_townhall_suggestion_voteup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new debate_townhall_suggestion_voteup_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String user_name; // required
    public String item_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      USER_NAME((short)2, "user_name"),
      ITEM_ID((short)3, "item_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // ITEM_ID
            return ITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(debate_townhall_suggestion_voteup_args.class, metaDataMap);
    }

    public debate_townhall_suggestion_voteup_args() {
    }

    public debate_townhall_suggestion_voteup_args(
      String item_type,
      String user_name,
      String item_id)
    {
      this();
      this.item_type = item_type;
      this.user_name = user_name;
      this.item_id = item_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public debate_townhall_suggestion_voteup_args(debate_townhall_suggestion_voteup_args other) {
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetItem_id()) {
        this.item_id = other.item_id;
      }
    }

    public debate_townhall_suggestion_voteup_args deepCopy() {
      return new debate_townhall_suggestion_voteup_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.user_name = null;
      this.item_id = null;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public debate_townhall_suggestion_voteup_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public debate_townhall_suggestion_voteup_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getItem_id() {
      return this.item_id;
    }

    public debate_townhall_suggestion_voteup_args setItem_id(String item_id) {
      this.item_id = item_id;
      return this;
    }

    public void unsetItem_id() {
      this.item_id = null;
    }

    /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_id() {
      return this.item_id != null;
    }

    public void setItem_idIsSet(boolean value) {
      if (!value) {
        this.item_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          setItem_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case USER_NAME:
        return getUser_name();

      case ITEM_ID:
        return getItem_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case USER_NAME:
        return isSetUser_name();
      case ITEM_ID:
        return isSetItem_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof debate_townhall_suggestion_voteup_args)
        return this.equals((debate_townhall_suggestion_voteup_args)that);
      return false;
    }

    public boolean equals(debate_townhall_suggestion_voteup_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_item_id = true && this.isSetItem_id();
      boolean that_present_item_id = true && that.isSetItem_id();
      if (this_present_item_id || that_present_item_id) {
        if (!(this_present_item_id && that_present_item_id))
          return false;
        if (!this.item_id.equals(that.item_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(debate_townhall_suggestion_voteup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      debate_townhall_suggestion_voteup_args typedOther = (debate_townhall_suggestion_voteup_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("debate_townhall_suggestion_voteup_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item_id:");
      if (this.item_id == null) {
        sb.append("null");
      } else {
        sb.append(this.item_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class debate_townhall_suggestion_voteup_argsStandardSchemeFactory implements SchemeFactory {
      public debate_townhall_suggestion_voteup_argsStandardScheme getScheme() {
        return new debate_townhall_suggestion_voteup_argsStandardScheme();
      }
    }

    private static class debate_townhall_suggestion_voteup_argsStandardScheme extends StandardScheme<debate_townhall_suggestion_voteup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, debate_townhall_suggestion_voteup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_id = iprot.readString();
                struct.setItem_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, debate_townhall_suggestion_voteup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.item_id != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.item_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class debate_townhall_suggestion_voteup_argsTupleSchemeFactory implements SchemeFactory {
      public debate_townhall_suggestion_voteup_argsTupleScheme getScheme() {
        return new debate_townhall_suggestion_voteup_argsTupleScheme();
      }
    }

    private static class debate_townhall_suggestion_voteup_argsTupleScheme extends TupleScheme<debate_townhall_suggestion_voteup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, debate_townhall_suggestion_voteup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name()) {
          optionals.set(1);
        }
        if (struct.isSetItem_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetItem_id()) {
          oprot.writeString(struct.item_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, debate_townhall_suggestion_voteup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.item_id = iprot.readString();
          struct.setItem_idIsSet(true);
        }
      }
    }

  }

  public static class debate_townhall_suggestion_voteup_result implements org.apache.thrift.TBase<debate_townhall_suggestion_voteup_result, debate_townhall_suggestion_voteup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("debate_townhall_suggestion_voteup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new debate_townhall_suggestion_voteup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new debate_townhall_suggestion_voteup_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(debate_townhall_suggestion_voteup_result.class, metaDataMap);
    }

    public debate_townhall_suggestion_voteup_result() {
    }

    public debate_townhall_suggestion_voteup_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public debate_townhall_suggestion_voteup_result(debate_townhall_suggestion_voteup_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public debate_townhall_suggestion_voteup_result deepCopy() {
      return new debate_townhall_suggestion_voteup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public debate_townhall_suggestion_voteup_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof debate_townhall_suggestion_voteup_result)
        return this.equals((debate_townhall_suggestion_voteup_result)that);
      return false;
    }

    public boolean equals(debate_townhall_suggestion_voteup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(debate_townhall_suggestion_voteup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      debate_townhall_suggestion_voteup_result typedOther = (debate_townhall_suggestion_voteup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("debate_townhall_suggestion_voteup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class debate_townhall_suggestion_voteup_resultStandardSchemeFactory implements SchemeFactory {
      public debate_townhall_suggestion_voteup_resultStandardScheme getScheme() {
        return new debate_townhall_suggestion_voteup_resultStandardScheme();
      }
    }

    private static class debate_townhall_suggestion_voteup_resultStandardScheme extends StandardScheme<debate_townhall_suggestion_voteup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, debate_townhall_suggestion_voteup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, debate_townhall_suggestion_voteup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class debate_townhall_suggestion_voteup_resultTupleSchemeFactory implements SchemeFactory {
      public debate_townhall_suggestion_voteup_resultTupleScheme getScheme() {
        return new debate_townhall_suggestion_voteup_resultTupleScheme();
      }
    }

    private static class debate_townhall_suggestion_voteup_resultTupleScheme extends TupleScheme<debate_townhall_suggestion_voteup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, debate_townhall_suggestion_voteup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, debate_townhall_suggestion_voteup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_petition_args implements org.apache.thrift.TBase<create_petition_args, create_petition_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_petition_args");

    private static final org.apache.thrift.protocol.TField P_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("p_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("p_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField P_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("p_title", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField P_TITLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("p_title_id", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField P_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("p_content", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField P_IMG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("p_img_url", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField P_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("p_to", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField P_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("p_target", org.apache.thrift.protocol.TType.I32, (short)9);
    private static final org.apache.thrift.protocol.TField P_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("p_count", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField P_TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("p_time_created", org.apache.thrift.protocol.TType.I32, (short)11);
    private static final org.apache.thrift.protocol.TField P_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("p_end_date", org.apache.thrift.protocol.TType.I32, (short)12);
    private static final org.apache.thrift.protocol.TField P_SUBCAT_FIELD_DESC = new org.apache.thrift.protocol.TField("p_subcat", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField P_HASHTAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("p_hashtags", org.apache.thrift.protocol.TType.STRING, (short)14);
    private static final org.apache.thrift.protocol.TField P_CAT_FIELD_DESC = new org.apache.thrift.protocol.TField("p_cat", org.apache.thrift.protocol.TType.STRING, (short)15);
    private static final org.apache.thrift.protocol.TField IS_EDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_edit", org.apache.thrift.protocol.TType.I32, (short)16);
    private static final org.apache.thrift.protocol.TField IS_CLOSED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_closed", org.apache.thrift.protocol.TType.I32, (short)17);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_petition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_petition_argsTupleSchemeFactory());
    }

    public String p_type; // required
    public String user_name; // required
    public String p_id; // required
    public String p_title; // required
    public String p_title_id; // required
    public String p_content; // required
    public String p_img_url; // required
    public String p_to; // required
    public int p_target; // required
    public int p_count; // required
    public int p_time_created; // required
    public int p_end_date; // required
    public String p_subcat; // required
    public String p_hashtags; // required
    public String p_cat; // required
    public int is_edit; // required
    public int is_closed; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_TYPE((short)1, "p_type"),
      USER_NAME((short)2, "user_name"),
      P_ID((short)3, "p_id"),
      P_TITLE((short)4, "p_title"),
      P_TITLE_ID((short)5, "p_title_id"),
      P_CONTENT((short)6, "p_content"),
      P_IMG_URL((short)7, "p_img_url"),
      P_TO((short)8, "p_to"),
      P_TARGET((short)9, "p_target"),
      P_COUNT((short)10, "p_count"),
      P_TIME_CREATED((short)11, "p_time_created"),
      P_END_DATE((short)12, "p_end_date"),
      P_SUBCAT((short)13, "p_subcat"),
      P_HASHTAGS((short)14, "p_hashtags"),
      P_CAT((short)15, "p_cat"),
      IS_EDIT((short)16, "is_edit"),
      IS_CLOSED((short)17, "is_closed");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_TYPE
            return P_TYPE;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // P_ID
            return P_ID;
          case 4: // P_TITLE
            return P_TITLE;
          case 5: // P_TITLE_ID
            return P_TITLE_ID;
          case 6: // P_CONTENT
            return P_CONTENT;
          case 7: // P_IMG_URL
            return P_IMG_URL;
          case 8: // P_TO
            return P_TO;
          case 9: // P_TARGET
            return P_TARGET;
          case 10: // P_COUNT
            return P_COUNT;
          case 11: // P_TIME_CREATED
            return P_TIME_CREATED;
          case 12: // P_END_DATE
            return P_END_DATE;
          case 13: // P_SUBCAT
            return P_SUBCAT;
          case 14: // P_HASHTAGS
            return P_HASHTAGS;
          case 15: // P_CAT
            return P_CAT;
          case 16: // IS_EDIT
            return IS_EDIT;
          case 17: // IS_CLOSED
            return IS_CLOSED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __P_TARGET_ISSET_ID = 0;
    private static final int __P_COUNT_ISSET_ID = 1;
    private static final int __P_TIME_CREATED_ISSET_ID = 2;
    private static final int __P_END_DATE_ISSET_ID = 3;
    private static final int __IS_EDIT_ISSET_ID = 4;
    private static final int __IS_CLOSED_ISSET_ID = 5;
    private BitSet __isset_bit_vector = new BitSet(6);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_TYPE, new org.apache.thrift.meta_data.FieldMetaData("p_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("p_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_TITLE, new org.apache.thrift.meta_data.FieldMetaData("p_title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_TITLE_ID, new org.apache.thrift.meta_data.FieldMetaData("p_title_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("p_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_IMG_URL, new org.apache.thrift.meta_data.FieldMetaData("p_img_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_TO, new org.apache.thrift.meta_data.FieldMetaData("p_to", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_TARGET, new org.apache.thrift.meta_data.FieldMetaData("p_target", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.P_COUNT, new org.apache.thrift.meta_data.FieldMetaData("p_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.P_TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("p_time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.P_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("p_end_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.P_SUBCAT, new org.apache.thrift.meta_data.FieldMetaData("p_subcat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_HASHTAGS, new org.apache.thrift.meta_data.FieldMetaData("p_hashtags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_CAT, new org.apache.thrift.meta_data.FieldMetaData("p_cat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_EDIT, new org.apache.thrift.meta_data.FieldMetaData("is_edit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_CLOSED, new org.apache.thrift.meta_data.FieldMetaData("is_closed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_petition_args.class, metaDataMap);
    }

    public create_petition_args() {
    }

    public create_petition_args(
      String p_type,
      String user_name,
      String p_id,
      String p_title,
      String p_title_id,
      String p_content,
      String p_img_url,
      String p_to,
      int p_target,
      int p_count,
      int p_time_created,
      int p_end_date,
      String p_subcat,
      String p_hashtags,
      String p_cat,
      int is_edit,
      int is_closed)
    {
      this();
      this.p_type = p_type;
      this.user_name = user_name;
      this.p_id = p_id;
      this.p_title = p_title;
      this.p_title_id = p_title_id;
      this.p_content = p_content;
      this.p_img_url = p_img_url;
      this.p_to = p_to;
      this.p_target = p_target;
      setP_targetIsSet(true);
      this.p_count = p_count;
      setP_countIsSet(true);
      this.p_time_created = p_time_created;
      setP_time_createdIsSet(true);
      this.p_end_date = p_end_date;
      setP_end_dateIsSet(true);
      this.p_subcat = p_subcat;
      this.p_hashtags = p_hashtags;
      this.p_cat = p_cat;
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      this.is_closed = is_closed;
      setIs_closedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_petition_args(create_petition_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetP_type()) {
        this.p_type = other.p_type;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetP_id()) {
        this.p_id = other.p_id;
      }
      if (other.isSetP_title()) {
        this.p_title = other.p_title;
      }
      if (other.isSetP_title_id()) {
        this.p_title_id = other.p_title_id;
      }
      if (other.isSetP_content()) {
        this.p_content = other.p_content;
      }
      if (other.isSetP_img_url()) {
        this.p_img_url = other.p_img_url;
      }
      if (other.isSetP_to()) {
        this.p_to = other.p_to;
      }
      this.p_target = other.p_target;
      this.p_count = other.p_count;
      this.p_time_created = other.p_time_created;
      this.p_end_date = other.p_end_date;
      if (other.isSetP_subcat()) {
        this.p_subcat = other.p_subcat;
      }
      if (other.isSetP_hashtags()) {
        this.p_hashtags = other.p_hashtags;
      }
      if (other.isSetP_cat()) {
        this.p_cat = other.p_cat;
      }
      this.is_edit = other.is_edit;
      this.is_closed = other.is_closed;
    }

    public create_petition_args deepCopy() {
      return new create_petition_args(this);
    }

    @Override
    public void clear() {
      this.p_type = null;
      this.user_name = null;
      this.p_id = null;
      this.p_title = null;
      this.p_title_id = null;
      this.p_content = null;
      this.p_img_url = null;
      this.p_to = null;
      setP_targetIsSet(false);
      this.p_target = 0;
      setP_countIsSet(false);
      this.p_count = 0;
      setP_time_createdIsSet(false);
      this.p_time_created = 0;
      setP_end_dateIsSet(false);
      this.p_end_date = 0;
      this.p_subcat = null;
      this.p_hashtags = null;
      this.p_cat = null;
      setIs_editIsSet(false);
      this.is_edit = 0;
      setIs_closedIsSet(false);
      this.is_closed = 0;
    }

    public String getP_type() {
      return this.p_type;
    }

    public create_petition_args setP_type(String p_type) {
      this.p_type = p_type;
      return this;
    }

    public void unsetP_type() {
      this.p_type = null;
    }

    /** Returns true if field p_type is set (has been assigned a value) and false otherwise */
    public boolean isSetP_type() {
      return this.p_type != null;
    }

    public void setP_typeIsSet(boolean value) {
      if (!value) {
        this.p_type = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public create_petition_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getP_id() {
      return this.p_id;
    }

    public create_petition_args setP_id(String p_id) {
      this.p_id = p_id;
      return this;
    }

    public void unsetP_id() {
      this.p_id = null;
    }

    /** Returns true if field p_id is set (has been assigned a value) and false otherwise */
    public boolean isSetP_id() {
      return this.p_id != null;
    }

    public void setP_idIsSet(boolean value) {
      if (!value) {
        this.p_id = null;
      }
    }

    public String getP_title() {
      return this.p_title;
    }

    public create_petition_args setP_title(String p_title) {
      this.p_title = p_title;
      return this;
    }

    public void unsetP_title() {
      this.p_title = null;
    }

    /** Returns true if field p_title is set (has been assigned a value) and false otherwise */
    public boolean isSetP_title() {
      return this.p_title != null;
    }

    public void setP_titleIsSet(boolean value) {
      if (!value) {
        this.p_title = null;
      }
    }

    public String getP_title_id() {
      return this.p_title_id;
    }

    public create_petition_args setP_title_id(String p_title_id) {
      this.p_title_id = p_title_id;
      return this;
    }

    public void unsetP_title_id() {
      this.p_title_id = null;
    }

    /** Returns true if field p_title_id is set (has been assigned a value) and false otherwise */
    public boolean isSetP_title_id() {
      return this.p_title_id != null;
    }

    public void setP_title_idIsSet(boolean value) {
      if (!value) {
        this.p_title_id = null;
      }
    }

    public String getP_content() {
      return this.p_content;
    }

    public create_petition_args setP_content(String p_content) {
      this.p_content = p_content;
      return this;
    }

    public void unsetP_content() {
      this.p_content = null;
    }

    /** Returns true if field p_content is set (has been assigned a value) and false otherwise */
    public boolean isSetP_content() {
      return this.p_content != null;
    }

    public void setP_contentIsSet(boolean value) {
      if (!value) {
        this.p_content = null;
      }
    }

    public String getP_img_url() {
      return this.p_img_url;
    }

    public create_petition_args setP_img_url(String p_img_url) {
      this.p_img_url = p_img_url;
      return this;
    }

    public void unsetP_img_url() {
      this.p_img_url = null;
    }

    /** Returns true if field p_img_url is set (has been assigned a value) and false otherwise */
    public boolean isSetP_img_url() {
      return this.p_img_url != null;
    }

    public void setP_img_urlIsSet(boolean value) {
      if (!value) {
        this.p_img_url = null;
      }
    }

    public String getP_to() {
      return this.p_to;
    }

    public create_petition_args setP_to(String p_to) {
      this.p_to = p_to;
      return this;
    }

    public void unsetP_to() {
      this.p_to = null;
    }

    /** Returns true if field p_to is set (has been assigned a value) and false otherwise */
    public boolean isSetP_to() {
      return this.p_to != null;
    }

    public void setP_toIsSet(boolean value) {
      if (!value) {
        this.p_to = null;
      }
    }

    public int getP_target() {
      return this.p_target;
    }

    public create_petition_args setP_target(int p_target) {
      this.p_target = p_target;
      setP_targetIsSet(true);
      return this;
    }

    public void unsetP_target() {
      __isset_bit_vector.clear(__P_TARGET_ISSET_ID);
    }

    /** Returns true if field p_target is set (has been assigned a value) and false otherwise */
    public boolean isSetP_target() {
      return __isset_bit_vector.get(__P_TARGET_ISSET_ID);
    }

    public void setP_targetIsSet(boolean value) {
      __isset_bit_vector.set(__P_TARGET_ISSET_ID, value);
    }

    public int getP_count() {
      return this.p_count;
    }

    public create_petition_args setP_count(int p_count) {
      this.p_count = p_count;
      setP_countIsSet(true);
      return this;
    }

    public void unsetP_count() {
      __isset_bit_vector.clear(__P_COUNT_ISSET_ID);
    }

    /** Returns true if field p_count is set (has been assigned a value) and false otherwise */
    public boolean isSetP_count() {
      return __isset_bit_vector.get(__P_COUNT_ISSET_ID);
    }

    public void setP_countIsSet(boolean value) {
      __isset_bit_vector.set(__P_COUNT_ISSET_ID, value);
    }

    public int getP_time_created() {
      return this.p_time_created;
    }

    public create_petition_args setP_time_created(int p_time_created) {
      this.p_time_created = p_time_created;
      setP_time_createdIsSet(true);
      return this;
    }

    public void unsetP_time_created() {
      __isset_bit_vector.clear(__P_TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field p_time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetP_time_created() {
      return __isset_bit_vector.get(__P_TIME_CREATED_ISSET_ID);
    }

    public void setP_time_createdIsSet(boolean value) {
      __isset_bit_vector.set(__P_TIME_CREATED_ISSET_ID, value);
    }

    public int getP_end_date() {
      return this.p_end_date;
    }

    public create_petition_args setP_end_date(int p_end_date) {
      this.p_end_date = p_end_date;
      setP_end_dateIsSet(true);
      return this;
    }

    public void unsetP_end_date() {
      __isset_bit_vector.clear(__P_END_DATE_ISSET_ID);
    }

    /** Returns true if field p_end_date is set (has been assigned a value) and false otherwise */
    public boolean isSetP_end_date() {
      return __isset_bit_vector.get(__P_END_DATE_ISSET_ID);
    }

    public void setP_end_dateIsSet(boolean value) {
      __isset_bit_vector.set(__P_END_DATE_ISSET_ID, value);
    }

    public String getP_subcat() {
      return this.p_subcat;
    }

    public create_petition_args setP_subcat(String p_subcat) {
      this.p_subcat = p_subcat;
      return this;
    }

    public void unsetP_subcat() {
      this.p_subcat = null;
    }

    /** Returns true if field p_subcat is set (has been assigned a value) and false otherwise */
    public boolean isSetP_subcat() {
      return this.p_subcat != null;
    }

    public void setP_subcatIsSet(boolean value) {
      if (!value) {
        this.p_subcat = null;
      }
    }

    public String getP_hashtags() {
      return this.p_hashtags;
    }

    public create_petition_args setP_hashtags(String p_hashtags) {
      this.p_hashtags = p_hashtags;
      return this;
    }

    public void unsetP_hashtags() {
      this.p_hashtags = null;
    }

    /** Returns true if field p_hashtags is set (has been assigned a value) and false otherwise */
    public boolean isSetP_hashtags() {
      return this.p_hashtags != null;
    }

    public void setP_hashtagsIsSet(boolean value) {
      if (!value) {
        this.p_hashtags = null;
      }
    }

    public String getP_cat() {
      return this.p_cat;
    }

    public create_petition_args setP_cat(String p_cat) {
      this.p_cat = p_cat;
      return this;
    }

    public void unsetP_cat() {
      this.p_cat = null;
    }

    /** Returns true if field p_cat is set (has been assigned a value) and false otherwise */
    public boolean isSetP_cat() {
      return this.p_cat != null;
    }

    public void setP_catIsSet(boolean value) {
      if (!value) {
        this.p_cat = null;
      }
    }

    public int getIs_edit() {
      return this.is_edit;
    }

    public create_petition_args setIs_edit(int is_edit) {
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      return this;
    }

    public void unsetIs_edit() {
      __isset_bit_vector.clear(__IS_EDIT_ISSET_ID);
    }

    /** Returns true if field is_edit is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_edit() {
      return __isset_bit_vector.get(__IS_EDIT_ISSET_ID);
    }

    public void setIs_editIsSet(boolean value) {
      __isset_bit_vector.set(__IS_EDIT_ISSET_ID, value);
    }

    public int getIs_closed() {
      return this.is_closed;
    }

    public create_petition_args setIs_closed(int is_closed) {
      this.is_closed = is_closed;
      setIs_closedIsSet(true);
      return this;
    }

    public void unsetIs_closed() {
      __isset_bit_vector.clear(__IS_CLOSED_ISSET_ID);
    }

    /** Returns true if field is_closed is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_closed() {
      return __isset_bit_vector.get(__IS_CLOSED_ISSET_ID);
    }

    public void setIs_closedIsSet(boolean value) {
      __isset_bit_vector.set(__IS_CLOSED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_TYPE:
        if (value == null) {
          unsetP_type();
        } else {
          setP_type((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case P_ID:
        if (value == null) {
          unsetP_id();
        } else {
          setP_id((String)value);
        }
        break;

      case P_TITLE:
        if (value == null) {
          unsetP_title();
        } else {
          setP_title((String)value);
        }
        break;

      case P_TITLE_ID:
        if (value == null) {
          unsetP_title_id();
        } else {
          setP_title_id((String)value);
        }
        break;

      case P_CONTENT:
        if (value == null) {
          unsetP_content();
        } else {
          setP_content((String)value);
        }
        break;

      case P_IMG_URL:
        if (value == null) {
          unsetP_img_url();
        } else {
          setP_img_url((String)value);
        }
        break;

      case P_TO:
        if (value == null) {
          unsetP_to();
        } else {
          setP_to((String)value);
        }
        break;

      case P_TARGET:
        if (value == null) {
          unsetP_target();
        } else {
          setP_target((Integer)value);
        }
        break;

      case P_COUNT:
        if (value == null) {
          unsetP_count();
        } else {
          setP_count((Integer)value);
        }
        break;

      case P_TIME_CREATED:
        if (value == null) {
          unsetP_time_created();
        } else {
          setP_time_created((Integer)value);
        }
        break;

      case P_END_DATE:
        if (value == null) {
          unsetP_end_date();
        } else {
          setP_end_date((Integer)value);
        }
        break;

      case P_SUBCAT:
        if (value == null) {
          unsetP_subcat();
        } else {
          setP_subcat((String)value);
        }
        break;

      case P_HASHTAGS:
        if (value == null) {
          unsetP_hashtags();
        } else {
          setP_hashtags((String)value);
        }
        break;

      case P_CAT:
        if (value == null) {
          unsetP_cat();
        } else {
          setP_cat((String)value);
        }
        break;

      case IS_EDIT:
        if (value == null) {
          unsetIs_edit();
        } else {
          setIs_edit((Integer)value);
        }
        break;

      case IS_CLOSED:
        if (value == null) {
          unsetIs_closed();
        } else {
          setIs_closed((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_TYPE:
        return getP_type();

      case USER_NAME:
        return getUser_name();

      case P_ID:
        return getP_id();

      case P_TITLE:
        return getP_title();

      case P_TITLE_ID:
        return getP_title_id();

      case P_CONTENT:
        return getP_content();

      case P_IMG_URL:
        return getP_img_url();

      case P_TO:
        return getP_to();

      case P_TARGET:
        return Integer.valueOf(getP_target());

      case P_COUNT:
        return Integer.valueOf(getP_count());

      case P_TIME_CREATED:
        return Integer.valueOf(getP_time_created());

      case P_END_DATE:
        return Integer.valueOf(getP_end_date());

      case P_SUBCAT:
        return getP_subcat();

      case P_HASHTAGS:
        return getP_hashtags();

      case P_CAT:
        return getP_cat();

      case IS_EDIT:
        return Integer.valueOf(getIs_edit());

      case IS_CLOSED:
        return Integer.valueOf(getIs_closed());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_TYPE:
        return isSetP_type();
      case USER_NAME:
        return isSetUser_name();
      case P_ID:
        return isSetP_id();
      case P_TITLE:
        return isSetP_title();
      case P_TITLE_ID:
        return isSetP_title_id();
      case P_CONTENT:
        return isSetP_content();
      case P_IMG_URL:
        return isSetP_img_url();
      case P_TO:
        return isSetP_to();
      case P_TARGET:
        return isSetP_target();
      case P_COUNT:
        return isSetP_count();
      case P_TIME_CREATED:
        return isSetP_time_created();
      case P_END_DATE:
        return isSetP_end_date();
      case P_SUBCAT:
        return isSetP_subcat();
      case P_HASHTAGS:
        return isSetP_hashtags();
      case P_CAT:
        return isSetP_cat();
      case IS_EDIT:
        return isSetIs_edit();
      case IS_CLOSED:
        return isSetIs_closed();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_petition_args)
        return this.equals((create_petition_args)that);
      return false;
    }

    public boolean equals(create_petition_args that) {
      if (that == null)
        return false;

      boolean this_present_p_type = true && this.isSetP_type();
      boolean that_present_p_type = true && that.isSetP_type();
      if (this_present_p_type || that_present_p_type) {
        if (!(this_present_p_type && that_present_p_type))
          return false;
        if (!this.p_type.equals(that.p_type))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_p_id = true && this.isSetP_id();
      boolean that_present_p_id = true && that.isSetP_id();
      if (this_present_p_id || that_present_p_id) {
        if (!(this_present_p_id && that_present_p_id))
          return false;
        if (!this.p_id.equals(that.p_id))
          return false;
      }

      boolean this_present_p_title = true && this.isSetP_title();
      boolean that_present_p_title = true && that.isSetP_title();
      if (this_present_p_title || that_present_p_title) {
        if (!(this_present_p_title && that_present_p_title))
          return false;
        if (!this.p_title.equals(that.p_title))
          return false;
      }

      boolean this_present_p_title_id = true && this.isSetP_title_id();
      boolean that_present_p_title_id = true && that.isSetP_title_id();
      if (this_present_p_title_id || that_present_p_title_id) {
        if (!(this_present_p_title_id && that_present_p_title_id))
          return false;
        if (!this.p_title_id.equals(that.p_title_id))
          return false;
      }

      boolean this_present_p_content = true && this.isSetP_content();
      boolean that_present_p_content = true && that.isSetP_content();
      if (this_present_p_content || that_present_p_content) {
        if (!(this_present_p_content && that_present_p_content))
          return false;
        if (!this.p_content.equals(that.p_content))
          return false;
      }

      boolean this_present_p_img_url = true && this.isSetP_img_url();
      boolean that_present_p_img_url = true && that.isSetP_img_url();
      if (this_present_p_img_url || that_present_p_img_url) {
        if (!(this_present_p_img_url && that_present_p_img_url))
          return false;
        if (!this.p_img_url.equals(that.p_img_url))
          return false;
      }

      boolean this_present_p_to = true && this.isSetP_to();
      boolean that_present_p_to = true && that.isSetP_to();
      if (this_present_p_to || that_present_p_to) {
        if (!(this_present_p_to && that_present_p_to))
          return false;
        if (!this.p_to.equals(that.p_to))
          return false;
      }

      boolean this_present_p_target = true;
      boolean that_present_p_target = true;
      if (this_present_p_target || that_present_p_target) {
        if (!(this_present_p_target && that_present_p_target))
          return false;
        if (this.p_target != that.p_target)
          return false;
      }

      boolean this_present_p_count = true;
      boolean that_present_p_count = true;
      if (this_present_p_count || that_present_p_count) {
        if (!(this_present_p_count && that_present_p_count))
          return false;
        if (this.p_count != that.p_count)
          return false;
      }

      boolean this_present_p_time_created = true;
      boolean that_present_p_time_created = true;
      if (this_present_p_time_created || that_present_p_time_created) {
        if (!(this_present_p_time_created && that_present_p_time_created))
          return false;
        if (this.p_time_created != that.p_time_created)
          return false;
      }

      boolean this_present_p_end_date = true;
      boolean that_present_p_end_date = true;
      if (this_present_p_end_date || that_present_p_end_date) {
        if (!(this_present_p_end_date && that_present_p_end_date))
          return false;
        if (this.p_end_date != that.p_end_date)
          return false;
      }

      boolean this_present_p_subcat = true && this.isSetP_subcat();
      boolean that_present_p_subcat = true && that.isSetP_subcat();
      if (this_present_p_subcat || that_present_p_subcat) {
        if (!(this_present_p_subcat && that_present_p_subcat))
          return false;
        if (!this.p_subcat.equals(that.p_subcat))
          return false;
      }

      boolean this_present_p_hashtags = true && this.isSetP_hashtags();
      boolean that_present_p_hashtags = true && that.isSetP_hashtags();
      if (this_present_p_hashtags || that_present_p_hashtags) {
        if (!(this_present_p_hashtags && that_present_p_hashtags))
          return false;
        if (!this.p_hashtags.equals(that.p_hashtags))
          return false;
      }

      boolean this_present_p_cat = true && this.isSetP_cat();
      boolean that_present_p_cat = true && that.isSetP_cat();
      if (this_present_p_cat || that_present_p_cat) {
        if (!(this_present_p_cat && that_present_p_cat))
          return false;
        if (!this.p_cat.equals(that.p_cat))
          return false;
      }

      boolean this_present_is_edit = true;
      boolean that_present_is_edit = true;
      if (this_present_is_edit || that_present_is_edit) {
        if (!(this_present_is_edit && that_present_is_edit))
          return false;
        if (this.is_edit != that.is_edit)
          return false;
      }

      boolean this_present_is_closed = true;
      boolean that_present_is_closed = true;
      if (this_present_is_closed || that_present_is_closed) {
        if (!(this_present_is_closed && that_present_is_closed))
          return false;
        if (this.is_closed != that.is_closed)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_petition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_petition_args typedOther = (create_petition_args)other;

      lastComparison = Boolean.valueOf(isSetP_type()).compareTo(typedOther.isSetP_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_type, typedOther.p_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_id()).compareTo(typedOther.isSetP_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_id, typedOther.p_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_title()).compareTo(typedOther.isSetP_title());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_title()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_title, typedOther.p_title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_title_id()).compareTo(typedOther.isSetP_title_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_title_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_title_id, typedOther.p_title_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_content()).compareTo(typedOther.isSetP_content());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_content()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_content, typedOther.p_content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_img_url()).compareTo(typedOther.isSetP_img_url());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_img_url()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_img_url, typedOther.p_img_url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_to()).compareTo(typedOther.isSetP_to());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_to()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_to, typedOther.p_to);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_target()).compareTo(typedOther.isSetP_target());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_target()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_target, typedOther.p_target);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_count()).compareTo(typedOther.isSetP_count());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_count()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_count, typedOther.p_count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_time_created()).compareTo(typedOther.isSetP_time_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_time_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_time_created, typedOther.p_time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_end_date()).compareTo(typedOther.isSetP_end_date());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_end_date()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_end_date, typedOther.p_end_date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_subcat()).compareTo(typedOther.isSetP_subcat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_subcat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_subcat, typedOther.p_subcat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_hashtags()).compareTo(typedOther.isSetP_hashtags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_hashtags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_hashtags, typedOther.p_hashtags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_cat()).compareTo(typedOther.isSetP_cat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_cat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_cat, typedOther.p_cat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_edit()).compareTo(typedOther.isSetIs_edit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_edit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_edit, typedOther.is_edit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_closed()).compareTo(typedOther.isSetIs_closed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_closed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_closed, typedOther.is_closed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_petition_args(");
      boolean first = true;

      sb.append("p_type:");
      if (this.p_type == null) {
        sb.append("null");
      } else {
        sb.append(this.p_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_id:");
      if (this.p_id == null) {
        sb.append("null");
      } else {
        sb.append(this.p_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_title:");
      if (this.p_title == null) {
        sb.append("null");
      } else {
        sb.append(this.p_title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_title_id:");
      if (this.p_title_id == null) {
        sb.append("null");
      } else {
        sb.append(this.p_title_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_content:");
      if (this.p_content == null) {
        sb.append("null");
      } else {
        sb.append(this.p_content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_img_url:");
      if (this.p_img_url == null) {
        sb.append("null");
      } else {
        sb.append(this.p_img_url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_to:");
      if (this.p_to == null) {
        sb.append("null");
      } else {
        sb.append(this.p_to);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_target:");
      sb.append(this.p_target);
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_count:");
      sb.append(this.p_count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_time_created:");
      sb.append(this.p_time_created);
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_end_date:");
      sb.append(this.p_end_date);
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_subcat:");
      if (this.p_subcat == null) {
        sb.append("null");
      } else {
        sb.append(this.p_subcat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_hashtags:");
      if (this.p_hashtags == null) {
        sb.append("null");
      } else {
        sb.append(this.p_hashtags);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_cat:");
      if (this.p_cat == null) {
        sb.append("null");
      } else {
        sb.append(this.p_cat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_edit:");
      sb.append(this.is_edit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_closed:");
      sb.append(this.is_closed);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_petition_argsStandardSchemeFactory implements SchemeFactory {
      public create_petition_argsStandardScheme getScheme() {
        return new create_petition_argsStandardScheme();
      }
    }

    private static class create_petition_argsStandardScheme extends StandardScheme<create_petition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_petition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_type = iprot.readString();
                struct.setP_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_id = iprot.readString();
                struct.setP_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // P_TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_title = iprot.readString();
                struct.setP_titleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // P_TITLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_title_id = iprot.readString();
                struct.setP_title_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // P_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_content = iprot.readString();
                struct.setP_contentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // P_IMG_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_img_url = iprot.readString();
                struct.setP_img_urlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // P_TO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_to = iprot.readString();
                struct.setP_toIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // P_TARGET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.p_target = iprot.readI32();
                struct.setP_targetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // P_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.p_count = iprot.readI32();
                struct.setP_countIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // P_TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.p_time_created = iprot.readI32();
                struct.setP_time_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // P_END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.p_end_date = iprot.readI32();
                struct.setP_end_dateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // P_SUBCAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_subcat = iprot.readString();
                struct.setP_subcatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // P_HASHTAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_hashtags = iprot.readString();
                struct.setP_hashtagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // P_CAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_cat = iprot.readString();
                struct.setP_catIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 16: // IS_EDIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_edit = iprot.readI32();
                struct.setIs_editIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 17: // IS_CLOSED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_closed = iprot.readI32();
                struct.setIs_closedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_petition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p_type != null) {
          oprot.writeFieldBegin(P_TYPE_FIELD_DESC);
          oprot.writeString(struct.p_type);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.p_id != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.p_id);
          oprot.writeFieldEnd();
        }
        if (struct.p_title != null) {
          oprot.writeFieldBegin(P_TITLE_FIELD_DESC);
          oprot.writeString(struct.p_title);
          oprot.writeFieldEnd();
        }
        if (struct.p_title_id != null) {
          oprot.writeFieldBegin(P_TITLE_ID_FIELD_DESC);
          oprot.writeString(struct.p_title_id);
          oprot.writeFieldEnd();
        }
        if (struct.p_content != null) {
          oprot.writeFieldBegin(P_CONTENT_FIELD_DESC);
          oprot.writeString(struct.p_content);
          oprot.writeFieldEnd();
        }
        if (struct.p_img_url != null) {
          oprot.writeFieldBegin(P_IMG_URL_FIELD_DESC);
          oprot.writeString(struct.p_img_url);
          oprot.writeFieldEnd();
        }
        if (struct.p_to != null) {
          oprot.writeFieldBegin(P_TO_FIELD_DESC);
          oprot.writeString(struct.p_to);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(P_TARGET_FIELD_DESC);
        oprot.writeI32(struct.p_target);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(P_COUNT_FIELD_DESC);
        oprot.writeI32(struct.p_count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(P_TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.p_time_created);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(P_END_DATE_FIELD_DESC);
        oprot.writeI32(struct.p_end_date);
        oprot.writeFieldEnd();
        if (struct.p_subcat != null) {
          oprot.writeFieldBegin(P_SUBCAT_FIELD_DESC);
          oprot.writeString(struct.p_subcat);
          oprot.writeFieldEnd();
        }
        if (struct.p_hashtags != null) {
          oprot.writeFieldBegin(P_HASHTAGS_FIELD_DESC);
          oprot.writeString(struct.p_hashtags);
          oprot.writeFieldEnd();
        }
        if (struct.p_cat != null) {
          oprot.writeFieldBegin(P_CAT_FIELD_DESC);
          oprot.writeString(struct.p_cat);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_EDIT_FIELD_DESC);
        oprot.writeI32(struct.is_edit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_CLOSED_FIELD_DESC);
        oprot.writeI32(struct.is_closed);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_petition_argsTupleSchemeFactory implements SchemeFactory {
      public create_petition_argsTupleScheme getScheme() {
        return new create_petition_argsTupleScheme();
      }
    }

    private static class create_petition_argsTupleScheme extends TupleScheme<create_petition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_petition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP_type()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name()) {
          optionals.set(1);
        }
        if (struct.isSetP_id()) {
          optionals.set(2);
        }
        if (struct.isSetP_title()) {
          optionals.set(3);
        }
        if (struct.isSetP_title_id()) {
          optionals.set(4);
        }
        if (struct.isSetP_content()) {
          optionals.set(5);
        }
        if (struct.isSetP_img_url()) {
          optionals.set(6);
        }
        if (struct.isSetP_to()) {
          optionals.set(7);
        }
        if (struct.isSetP_target()) {
          optionals.set(8);
        }
        if (struct.isSetP_count()) {
          optionals.set(9);
        }
        if (struct.isSetP_time_created()) {
          optionals.set(10);
        }
        if (struct.isSetP_end_date()) {
          optionals.set(11);
        }
        if (struct.isSetP_subcat()) {
          optionals.set(12);
        }
        if (struct.isSetP_hashtags()) {
          optionals.set(13);
        }
        if (struct.isSetP_cat()) {
          optionals.set(14);
        }
        if (struct.isSetIs_edit()) {
          optionals.set(15);
        }
        if (struct.isSetIs_closed()) {
          optionals.set(16);
        }
        oprot.writeBitSet(optionals, 17);
        if (struct.isSetP_type()) {
          oprot.writeString(struct.p_type);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetP_id()) {
          oprot.writeString(struct.p_id);
        }
        if (struct.isSetP_title()) {
          oprot.writeString(struct.p_title);
        }
        if (struct.isSetP_title_id()) {
          oprot.writeString(struct.p_title_id);
        }
        if (struct.isSetP_content()) {
          oprot.writeString(struct.p_content);
        }
        if (struct.isSetP_img_url()) {
          oprot.writeString(struct.p_img_url);
        }
        if (struct.isSetP_to()) {
          oprot.writeString(struct.p_to);
        }
        if (struct.isSetP_target()) {
          oprot.writeI32(struct.p_target);
        }
        if (struct.isSetP_count()) {
          oprot.writeI32(struct.p_count);
        }
        if (struct.isSetP_time_created()) {
          oprot.writeI32(struct.p_time_created);
        }
        if (struct.isSetP_end_date()) {
          oprot.writeI32(struct.p_end_date);
        }
        if (struct.isSetP_subcat()) {
          oprot.writeString(struct.p_subcat);
        }
        if (struct.isSetP_hashtags()) {
          oprot.writeString(struct.p_hashtags);
        }
        if (struct.isSetP_cat()) {
          oprot.writeString(struct.p_cat);
        }
        if (struct.isSetIs_edit()) {
          oprot.writeI32(struct.is_edit);
        }
        if (struct.isSetIs_closed()) {
          oprot.writeI32(struct.is_closed);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_petition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(17);
        if (incoming.get(0)) {
          struct.p_type = iprot.readString();
          struct.setP_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.p_id = iprot.readString();
          struct.setP_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.p_title = iprot.readString();
          struct.setP_titleIsSet(true);
        }
        if (incoming.get(4)) {
          struct.p_title_id = iprot.readString();
          struct.setP_title_idIsSet(true);
        }
        if (incoming.get(5)) {
          struct.p_content = iprot.readString();
          struct.setP_contentIsSet(true);
        }
        if (incoming.get(6)) {
          struct.p_img_url = iprot.readString();
          struct.setP_img_urlIsSet(true);
        }
        if (incoming.get(7)) {
          struct.p_to = iprot.readString();
          struct.setP_toIsSet(true);
        }
        if (incoming.get(8)) {
          struct.p_target = iprot.readI32();
          struct.setP_targetIsSet(true);
        }
        if (incoming.get(9)) {
          struct.p_count = iprot.readI32();
          struct.setP_countIsSet(true);
        }
        if (incoming.get(10)) {
          struct.p_time_created = iprot.readI32();
          struct.setP_time_createdIsSet(true);
        }
        if (incoming.get(11)) {
          struct.p_end_date = iprot.readI32();
          struct.setP_end_dateIsSet(true);
        }
        if (incoming.get(12)) {
          struct.p_subcat = iprot.readString();
          struct.setP_subcatIsSet(true);
        }
        if (incoming.get(13)) {
          struct.p_hashtags = iprot.readString();
          struct.setP_hashtagsIsSet(true);
        }
        if (incoming.get(14)) {
          struct.p_cat = iprot.readString();
          struct.setP_catIsSet(true);
        }
        if (incoming.get(15)) {
          struct.is_edit = iprot.readI32();
          struct.setIs_editIsSet(true);
        }
        if (incoming.get(16)) {
          struct.is_closed = iprot.readI32();
          struct.setIs_closedIsSet(true);
        }
      }
    }

  }

  public static class create_petition_result implements org.apache.thrift.TBase<create_petition_result, create_petition_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_petition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_petition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_petition_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_petition_result.class, metaDataMap);
    }

    public create_petition_result() {
    }

    public create_petition_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_petition_result(create_petition_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public create_petition_result deepCopy() {
      return new create_petition_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public create_petition_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_petition_result)
        return this.equals((create_petition_result)that);
      return false;
    }

    public boolean equals(create_petition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_petition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_petition_result typedOther = (create_petition_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_petition_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_petition_resultStandardSchemeFactory implements SchemeFactory {
      public create_petition_resultStandardScheme getScheme() {
        return new create_petition_resultStandardScheme();
      }
    }

    private static class create_petition_resultStandardScheme extends StandardScheme<create_petition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_petition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_petition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_petition_resultTupleSchemeFactory implements SchemeFactory {
      public create_petition_resultTupleScheme getScheme() {
        return new create_petition_resultTupleScheme();
      }
    }

    private static class create_petition_resultTupleScheme extends TupleScheme<create_petition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_petition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_petition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sign_petition_args implements org.apache.thrift.TBase<sign_petition_args, sign_petition_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sign_petition_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("p_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sign_petition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sign_petition_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String p_id; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      P_ID((short)2, "p_id"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // P_ID
            return P_ID;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("p_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sign_petition_args.class, metaDataMap);
    }

    public sign_petition_args() {
    }

    public sign_petition_args(
      String user_name,
      String p_id,
      int time)
    {
      this();
      this.user_name = user_name;
      this.p_id = p_id;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sign_petition_args(sign_petition_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetP_id()) {
        this.p_id = other.p_id;
      }
      this.time = other.time;
    }

    public sign_petition_args deepCopy() {
      return new sign_petition_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.p_id = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public sign_petition_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getP_id() {
      return this.p_id;
    }

    public sign_petition_args setP_id(String p_id) {
      this.p_id = p_id;
      return this;
    }

    public void unsetP_id() {
      this.p_id = null;
    }

    /** Returns true if field p_id is set (has been assigned a value) and false otherwise */
    public boolean isSetP_id() {
      return this.p_id != null;
    }

    public void setP_idIsSet(boolean value) {
      if (!value) {
        this.p_id = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public sign_petition_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case P_ID:
        if (value == null) {
          unsetP_id();
        } else {
          setP_id((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case P_ID:
        return getP_id();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case P_ID:
        return isSetP_id();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sign_petition_args)
        return this.equals((sign_petition_args)that);
      return false;
    }

    public boolean equals(sign_petition_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_p_id = true && this.isSetP_id();
      boolean that_present_p_id = true && that.isSetP_id();
      if (this_present_p_id || that_present_p_id) {
        if (!(this_present_p_id && that_present_p_id))
          return false;
        if (!this.p_id.equals(that.p_id))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sign_petition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sign_petition_args typedOther = (sign_petition_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_id()).compareTo(typedOther.isSetP_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_id, typedOther.p_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sign_petition_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_id:");
      if (this.p_id == null) {
        sb.append("null");
      } else {
        sb.append(this.p_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sign_petition_argsStandardSchemeFactory implements SchemeFactory {
      public sign_petition_argsStandardScheme getScheme() {
        return new sign_petition_argsStandardScheme();
      }
    }

    private static class sign_petition_argsStandardScheme extends StandardScheme<sign_petition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sign_petition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_id = iprot.readString();
                struct.setP_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sign_petition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.p_id != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.p_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sign_petition_argsTupleSchemeFactory implements SchemeFactory {
      public sign_petition_argsTupleScheme getScheme() {
        return new sign_petition_argsTupleScheme();
      }
    }

    private static class sign_petition_argsTupleScheme extends TupleScheme<sign_petition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sign_petition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetP_id()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetP_id()) {
          oprot.writeString(struct.p_id);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sign_petition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p_id = iprot.readString();
          struct.setP_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class sign_petition_result implements org.apache.thrift.TBase<sign_petition_result, sign_petition_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sign_petition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sign_petition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sign_petition_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sign_petition_result.class, metaDataMap);
    }

    public sign_petition_result() {
    }

    public sign_petition_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sign_petition_result(sign_petition_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public sign_petition_result deepCopy() {
      return new sign_petition_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public sign_petition_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sign_petition_result)
        return this.equals((sign_petition_result)that);
      return false;
    }

    public boolean equals(sign_petition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sign_petition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sign_petition_result typedOther = (sign_petition_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sign_petition_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sign_petition_resultStandardSchemeFactory implements SchemeFactory {
      public sign_petition_resultStandardScheme getScheme() {
        return new sign_petition_resultStandardScheme();
      }
    }

    private static class sign_petition_resultStandardScheme extends StandardScheme<sign_petition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sign_petition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sign_petition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sign_petition_resultTupleSchemeFactory implements SchemeFactory {
      public sign_petition_resultTupleScheme getScheme() {
        return new sign_petition_resultTupleScheme();
      }
    }

    private static class sign_petition_resultTupleScheme extends TupleScheme<sign_petition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sign_petition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sign_petition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class update_petition_signs_args implements org.apache.thrift.TBase<update_petition_signs_args, update_petition_signs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_petition_signs_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("p_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SIGNS_FIELD_DESC = new org.apache.thrift.protocol.TField("signs", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_petition_signs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_petition_signs_argsTupleSchemeFactory());
    }

    public String p_id; // required
    public int signs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "p_id"),
      SIGNS((short)2, "signs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // SIGNS
            return SIGNS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SIGNS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("p_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SIGNS, new org.apache.thrift.meta_data.FieldMetaData("signs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_petition_signs_args.class, metaDataMap);
    }

    public update_petition_signs_args() {
    }

    public update_petition_signs_args(
      String p_id,
      int signs)
    {
      this();
      this.p_id = p_id;
      this.signs = signs;
      setSignsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_petition_signs_args(update_petition_signs_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetP_id()) {
        this.p_id = other.p_id;
      }
      this.signs = other.signs;
    }

    public update_petition_signs_args deepCopy() {
      return new update_petition_signs_args(this);
    }

    @Override
    public void clear() {
      this.p_id = null;
      setSignsIsSet(false);
      this.signs = 0;
    }

    public String getP_id() {
      return this.p_id;
    }

    public update_petition_signs_args setP_id(String p_id) {
      this.p_id = p_id;
      return this;
    }

    public void unsetP_id() {
      this.p_id = null;
    }

    /** Returns true if field p_id is set (has been assigned a value) and false otherwise */
    public boolean isSetP_id() {
      return this.p_id != null;
    }

    public void setP_idIsSet(boolean value) {
      if (!value) {
        this.p_id = null;
      }
    }

    public int getSigns() {
      return this.signs;
    }

    public update_petition_signs_args setSigns(int signs) {
      this.signs = signs;
      setSignsIsSet(true);
      return this;
    }

    public void unsetSigns() {
      __isset_bit_vector.clear(__SIGNS_ISSET_ID);
    }

    /** Returns true if field signs is set (has been assigned a value) and false otherwise */
    public boolean isSetSigns() {
      return __isset_bit_vector.get(__SIGNS_ISSET_ID);
    }

    public void setSignsIsSet(boolean value) {
      __isset_bit_vector.set(__SIGNS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetP_id();
        } else {
          setP_id((String)value);
        }
        break;

      case SIGNS:
        if (value == null) {
          unsetSigns();
        } else {
          setSigns((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getP_id();

      case SIGNS:
        return Integer.valueOf(getSigns());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetP_id();
      case SIGNS:
        return isSetSigns();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_petition_signs_args)
        return this.equals((update_petition_signs_args)that);
      return false;
    }

    public boolean equals(update_petition_signs_args that) {
      if (that == null)
        return false;

      boolean this_present_p_id = true && this.isSetP_id();
      boolean that_present_p_id = true && that.isSetP_id();
      if (this_present_p_id || that_present_p_id) {
        if (!(this_present_p_id && that_present_p_id))
          return false;
        if (!this.p_id.equals(that.p_id))
          return false;
      }

      boolean this_present_signs = true;
      boolean that_present_signs = true;
      if (this_present_signs || that_present_signs) {
        if (!(this_present_signs && that_present_signs))
          return false;
        if (this.signs != that.signs)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(update_petition_signs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      update_petition_signs_args typedOther = (update_petition_signs_args)other;

      lastComparison = Boolean.valueOf(isSetP_id()).compareTo(typedOther.isSetP_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_id, typedOther.p_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSigns()).compareTo(typedOther.isSetSigns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSigns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signs, typedOther.signs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_petition_signs_args(");
      boolean first = true;

      sb.append("p_id:");
      if (this.p_id == null) {
        sb.append("null");
      } else {
        sb.append(this.p_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("signs:");
      sb.append(this.signs);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_petition_signs_argsStandardSchemeFactory implements SchemeFactory {
      public update_petition_signs_argsStandardScheme getScheme() {
        return new update_petition_signs_argsStandardScheme();
      }
    }

    private static class update_petition_signs_argsStandardScheme extends StandardScheme<update_petition_signs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_petition_signs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_id = iprot.readString();
                struct.setP_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SIGNS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.signs = iprot.readI32();
                struct.setSignsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_petition_signs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p_id != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.p_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SIGNS_FIELD_DESC);
        oprot.writeI32(struct.signs);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_petition_signs_argsTupleSchemeFactory implements SchemeFactory {
      public update_petition_signs_argsTupleScheme getScheme() {
        return new update_petition_signs_argsTupleScheme();
      }
    }

    private static class update_petition_signs_argsTupleScheme extends TupleScheme<update_petition_signs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_petition_signs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP_id()) {
          optionals.set(0);
        }
        if (struct.isSetSigns()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetP_id()) {
          oprot.writeString(struct.p_id);
        }
        if (struct.isSetSigns()) {
          oprot.writeI32(struct.signs);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_petition_signs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.p_id = iprot.readString();
          struct.setP_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.signs = iprot.readI32();
          struct.setSignsIsSet(true);
        }
      }
    }

  }

  public static class update_petition_signs_result implements org.apache.thrift.TBase<update_petition_signs_result, update_petition_signs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_petition_signs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_petition_signs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_petition_signs_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_petition_signs_result.class, metaDataMap);
    }

    public update_petition_signs_result() {
    }

    public update_petition_signs_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_petition_signs_result(update_petition_signs_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public update_petition_signs_result deepCopy() {
      return new update_petition_signs_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public update_petition_signs_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_petition_signs_result)
        return this.equals((update_petition_signs_result)that);
      return false;
    }

    public boolean equals(update_petition_signs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(update_petition_signs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      update_petition_signs_result typedOther = (update_petition_signs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_petition_signs_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_petition_signs_resultStandardSchemeFactory implements SchemeFactory {
      public update_petition_signs_resultStandardScheme getScheme() {
        return new update_petition_signs_resultStandardScheme();
      }
    }

    private static class update_petition_signs_resultStandardScheme extends StandardScheme<update_petition_signs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_petition_signs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_petition_signs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_petition_signs_resultTupleSchemeFactory implements SchemeFactory {
      public update_petition_signs_resultTupleScheme getScheme() {
        return new update_petition_signs_resultTupleScheme();
      }
    }

    private static class update_petition_signs_resultTupleScheme extends TupleScheme<update_petition_signs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_petition_signs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_petition_signs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class user_signed_petition_args implements org.apache.thrift.TBase<user_signed_petition_args, user_signed_petition_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_signed_petition_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("p_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_signed_petition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_signed_petition_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String p_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      P_ID((short)2, "p_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // P_ID
            return P_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("p_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_signed_petition_args.class, metaDataMap);
    }

    public user_signed_petition_args() {
    }

    public user_signed_petition_args(
      String user_name,
      String p_id)
    {
      this();
      this.user_name = user_name;
      this.p_id = p_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_signed_petition_args(user_signed_petition_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetP_id()) {
        this.p_id = other.p_id;
      }
    }

    public user_signed_petition_args deepCopy() {
      return new user_signed_petition_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.p_id = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public user_signed_petition_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getP_id() {
      return this.p_id;
    }

    public user_signed_petition_args setP_id(String p_id) {
      this.p_id = p_id;
      return this;
    }

    public void unsetP_id() {
      this.p_id = null;
    }

    /** Returns true if field p_id is set (has been assigned a value) and false otherwise */
    public boolean isSetP_id() {
      return this.p_id != null;
    }

    public void setP_idIsSet(boolean value) {
      if (!value) {
        this.p_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case P_ID:
        if (value == null) {
          unsetP_id();
        } else {
          setP_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case P_ID:
        return getP_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case P_ID:
        return isSetP_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_signed_petition_args)
        return this.equals((user_signed_petition_args)that);
      return false;
    }

    public boolean equals(user_signed_petition_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_p_id = true && this.isSetP_id();
      boolean that_present_p_id = true && that.isSetP_id();
      if (this_present_p_id || that_present_p_id) {
        if (!(this_present_p_id && that_present_p_id))
          return false;
        if (!this.p_id.equals(that.p_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_signed_petition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_signed_petition_args typedOther = (user_signed_petition_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_id()).compareTo(typedOther.isSetP_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_id, typedOther.p_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_signed_petition_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_id:");
      if (this.p_id == null) {
        sb.append("null");
      } else {
        sb.append(this.p_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_signed_petition_argsStandardSchemeFactory implements SchemeFactory {
      public user_signed_petition_argsStandardScheme getScheme() {
        return new user_signed_petition_argsStandardScheme();
      }
    }

    private static class user_signed_petition_argsStandardScheme extends StandardScheme<user_signed_petition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_signed_petition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.p_id = iprot.readString();
                struct.setP_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_signed_petition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.p_id != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.p_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_signed_petition_argsTupleSchemeFactory implements SchemeFactory {
      public user_signed_petition_argsTupleScheme getScheme() {
        return new user_signed_petition_argsTupleScheme();
      }
    }

    private static class user_signed_petition_argsTupleScheme extends TupleScheme<user_signed_petition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_signed_petition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetP_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetP_id()) {
          oprot.writeString(struct.p_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_signed_petition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p_id = iprot.readString();
          struct.setP_idIsSet(true);
        }
      }
    }

  }

  public static class user_signed_petition_result implements org.apache.thrift.TBase<user_signed_petition_result, user_signed_petition_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("user_signed_petition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new user_signed_petition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new user_signed_petition_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(user_signed_petition_result.class, metaDataMap);
    }

    public user_signed_petition_result() {
    }

    public user_signed_petition_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public user_signed_petition_result(user_signed_petition_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public user_signed_petition_result deepCopy() {
      return new user_signed_petition_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public user_signed_petition_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof user_signed_petition_result)
        return this.equals((user_signed_petition_result)that);
      return false;
    }

    public boolean equals(user_signed_petition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(user_signed_petition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      user_signed_petition_result typedOther = (user_signed_petition_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("user_signed_petition_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class user_signed_petition_resultStandardSchemeFactory implements SchemeFactory {
      public user_signed_petition_resultStandardScheme getScheme() {
        return new user_signed_petition_resultStandardScheme();
      }
    }

    private static class user_signed_petition_resultStandardScheme extends StandardScheme<user_signed_petition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, user_signed_petition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, user_signed_petition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class user_signed_petition_resultTupleSchemeFactory implements SchemeFactory {
      public user_signed_petition_resultTupleScheme getScheme() {
        return new user_signed_petition_resultTupleScheme();
      }
    }

    private static class user_signed_petition_resultTupleScheme extends TupleScheme<user_signed_petition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, user_signed_petition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, user_signed_petition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_debate_args implements org.apache.thrift.TBase<create_debate_args, create_debate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_debate_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField D_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("d_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField D_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("d_title", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField D_TITLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("d_title_id", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField D_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("d_content", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField D_IMG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("d_img_url", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField D_CRITERIA_FIELD_DESC = new org.apache.thrift.protocol.TField("d_criteria", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField D_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("d_duration", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField D_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("d_date", org.apache.thrift.protocol.TType.I32, (short)9);
    private static final org.apache.thrift.protocol.TField D_TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("d_time_created", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField D_SUBCAT_FIELD_DESC = new org.apache.thrift.protocol.TField("d_subcat", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField D_HASHTAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("d_hashtags", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField IS_EDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_edit", org.apache.thrift.protocol.TType.I32, (short)13);
    private static final org.apache.thrift.protocol.TField IS_CLOSED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_closed", org.apache.thrift.protocol.TType.I32, (short)14);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_debate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_debate_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String d_id; // required
    public String d_title; // required
    public String d_title_id; // required
    public String d_content; // required
    public String d_img_url; // required
    public String d_criteria; // required
    public int d_duration; // required
    public int d_date; // required
    public int d_time_created; // required
    public String d_subcat; // required
    public String d_hashtags; // required
    public int is_edit; // required
    public int is_closed; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      D_ID((short)2, "d_id"),
      D_TITLE((short)3, "d_title"),
      D_TITLE_ID((short)4, "d_title_id"),
      D_CONTENT((short)5, "d_content"),
      D_IMG_URL((short)6, "d_img_url"),
      D_CRITERIA((short)7, "d_criteria"),
      D_DURATION((short)8, "d_duration"),
      D_DATE((short)9, "d_date"),
      D_TIME_CREATED((short)10, "d_time_created"),
      D_SUBCAT((short)11, "d_subcat"),
      D_HASHTAGS((short)12, "d_hashtags"),
      IS_EDIT((short)13, "is_edit"),
      IS_CLOSED((short)14, "is_closed");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // D_ID
            return D_ID;
          case 3: // D_TITLE
            return D_TITLE;
          case 4: // D_TITLE_ID
            return D_TITLE_ID;
          case 5: // D_CONTENT
            return D_CONTENT;
          case 6: // D_IMG_URL
            return D_IMG_URL;
          case 7: // D_CRITERIA
            return D_CRITERIA;
          case 8: // D_DURATION
            return D_DURATION;
          case 9: // D_DATE
            return D_DATE;
          case 10: // D_TIME_CREATED
            return D_TIME_CREATED;
          case 11: // D_SUBCAT
            return D_SUBCAT;
          case 12: // D_HASHTAGS
            return D_HASHTAGS;
          case 13: // IS_EDIT
            return IS_EDIT;
          case 14: // IS_CLOSED
            return IS_CLOSED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __D_DURATION_ISSET_ID = 0;
    private static final int __D_DATE_ISSET_ID = 1;
    private static final int __D_TIME_CREATED_ISSET_ID = 2;
    private static final int __IS_EDIT_ISSET_ID = 3;
    private static final int __IS_CLOSED_ISSET_ID = 4;
    private BitSet __isset_bit_vector = new BitSet(5);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.D_ID, new org.apache.thrift.meta_data.FieldMetaData("d_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.D_TITLE, new org.apache.thrift.meta_data.FieldMetaData("d_title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.D_TITLE_ID, new org.apache.thrift.meta_data.FieldMetaData("d_title_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.D_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("d_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.D_IMG_URL, new org.apache.thrift.meta_data.FieldMetaData("d_img_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.D_CRITERIA, new org.apache.thrift.meta_data.FieldMetaData("d_criteria", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.D_DURATION, new org.apache.thrift.meta_data.FieldMetaData("d_duration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.D_DATE, new org.apache.thrift.meta_data.FieldMetaData("d_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.D_TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("d_time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.D_SUBCAT, new org.apache.thrift.meta_data.FieldMetaData("d_subcat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.D_HASHTAGS, new org.apache.thrift.meta_data.FieldMetaData("d_hashtags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_EDIT, new org.apache.thrift.meta_data.FieldMetaData("is_edit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_CLOSED, new org.apache.thrift.meta_data.FieldMetaData("is_closed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_debate_args.class, metaDataMap);
    }

    public create_debate_args() {
    }

    public create_debate_args(
      String user_name,
      String d_id,
      String d_title,
      String d_title_id,
      String d_content,
      String d_img_url,
      String d_criteria,
      int d_duration,
      int d_date,
      int d_time_created,
      String d_subcat,
      String d_hashtags,
      int is_edit,
      int is_closed)
    {
      this();
      this.user_name = user_name;
      this.d_id = d_id;
      this.d_title = d_title;
      this.d_title_id = d_title_id;
      this.d_content = d_content;
      this.d_img_url = d_img_url;
      this.d_criteria = d_criteria;
      this.d_duration = d_duration;
      setD_durationIsSet(true);
      this.d_date = d_date;
      setD_dateIsSet(true);
      this.d_time_created = d_time_created;
      setD_time_createdIsSet(true);
      this.d_subcat = d_subcat;
      this.d_hashtags = d_hashtags;
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      this.is_closed = is_closed;
      setIs_closedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_debate_args(create_debate_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetD_id()) {
        this.d_id = other.d_id;
      }
      if (other.isSetD_title()) {
        this.d_title = other.d_title;
      }
      if (other.isSetD_title_id()) {
        this.d_title_id = other.d_title_id;
      }
      if (other.isSetD_content()) {
        this.d_content = other.d_content;
      }
      if (other.isSetD_img_url()) {
        this.d_img_url = other.d_img_url;
      }
      if (other.isSetD_criteria()) {
        this.d_criteria = other.d_criteria;
      }
      this.d_duration = other.d_duration;
      this.d_date = other.d_date;
      this.d_time_created = other.d_time_created;
      if (other.isSetD_subcat()) {
        this.d_subcat = other.d_subcat;
      }
      if (other.isSetD_hashtags()) {
        this.d_hashtags = other.d_hashtags;
      }
      this.is_edit = other.is_edit;
      this.is_closed = other.is_closed;
    }

    public create_debate_args deepCopy() {
      return new create_debate_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.d_id = null;
      this.d_title = null;
      this.d_title_id = null;
      this.d_content = null;
      this.d_img_url = null;
      this.d_criteria = null;
      setD_durationIsSet(false);
      this.d_duration = 0;
      setD_dateIsSet(false);
      this.d_date = 0;
      setD_time_createdIsSet(false);
      this.d_time_created = 0;
      this.d_subcat = null;
      this.d_hashtags = null;
      setIs_editIsSet(false);
      this.is_edit = 0;
      setIs_closedIsSet(false);
      this.is_closed = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public create_debate_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getD_id() {
      return this.d_id;
    }

    public create_debate_args setD_id(String d_id) {
      this.d_id = d_id;
      return this;
    }

    public void unsetD_id() {
      this.d_id = null;
    }

    /** Returns true if field d_id is set (has been assigned a value) and false otherwise */
    public boolean isSetD_id() {
      return this.d_id != null;
    }

    public void setD_idIsSet(boolean value) {
      if (!value) {
        this.d_id = null;
      }
    }

    public String getD_title() {
      return this.d_title;
    }

    public create_debate_args setD_title(String d_title) {
      this.d_title = d_title;
      return this;
    }

    public void unsetD_title() {
      this.d_title = null;
    }

    /** Returns true if field d_title is set (has been assigned a value) and false otherwise */
    public boolean isSetD_title() {
      return this.d_title != null;
    }

    public void setD_titleIsSet(boolean value) {
      if (!value) {
        this.d_title = null;
      }
    }

    public String getD_title_id() {
      return this.d_title_id;
    }

    public create_debate_args setD_title_id(String d_title_id) {
      this.d_title_id = d_title_id;
      return this;
    }

    public void unsetD_title_id() {
      this.d_title_id = null;
    }

    /** Returns true if field d_title_id is set (has been assigned a value) and false otherwise */
    public boolean isSetD_title_id() {
      return this.d_title_id != null;
    }

    public void setD_title_idIsSet(boolean value) {
      if (!value) {
        this.d_title_id = null;
      }
    }

    public String getD_content() {
      return this.d_content;
    }

    public create_debate_args setD_content(String d_content) {
      this.d_content = d_content;
      return this;
    }

    public void unsetD_content() {
      this.d_content = null;
    }

    /** Returns true if field d_content is set (has been assigned a value) and false otherwise */
    public boolean isSetD_content() {
      return this.d_content != null;
    }

    public void setD_contentIsSet(boolean value) {
      if (!value) {
        this.d_content = null;
      }
    }

    public String getD_img_url() {
      return this.d_img_url;
    }

    public create_debate_args setD_img_url(String d_img_url) {
      this.d_img_url = d_img_url;
      return this;
    }

    public void unsetD_img_url() {
      this.d_img_url = null;
    }

    /** Returns true if field d_img_url is set (has been assigned a value) and false otherwise */
    public boolean isSetD_img_url() {
      return this.d_img_url != null;
    }

    public void setD_img_urlIsSet(boolean value) {
      if (!value) {
        this.d_img_url = null;
      }
    }

    public String getD_criteria() {
      return this.d_criteria;
    }

    public create_debate_args setD_criteria(String d_criteria) {
      this.d_criteria = d_criteria;
      return this;
    }

    public void unsetD_criteria() {
      this.d_criteria = null;
    }

    /** Returns true if field d_criteria is set (has been assigned a value) and false otherwise */
    public boolean isSetD_criteria() {
      return this.d_criteria != null;
    }

    public void setD_criteriaIsSet(boolean value) {
      if (!value) {
        this.d_criteria = null;
      }
    }

    public int getD_duration() {
      return this.d_duration;
    }

    public create_debate_args setD_duration(int d_duration) {
      this.d_duration = d_duration;
      setD_durationIsSet(true);
      return this;
    }

    public void unsetD_duration() {
      __isset_bit_vector.clear(__D_DURATION_ISSET_ID);
    }

    /** Returns true if field d_duration is set (has been assigned a value) and false otherwise */
    public boolean isSetD_duration() {
      return __isset_bit_vector.get(__D_DURATION_ISSET_ID);
    }

    public void setD_durationIsSet(boolean value) {
      __isset_bit_vector.set(__D_DURATION_ISSET_ID, value);
    }

    public int getD_date() {
      return this.d_date;
    }

    public create_debate_args setD_date(int d_date) {
      this.d_date = d_date;
      setD_dateIsSet(true);
      return this;
    }

    public void unsetD_date() {
      __isset_bit_vector.clear(__D_DATE_ISSET_ID);
    }

    /** Returns true if field d_date is set (has been assigned a value) and false otherwise */
    public boolean isSetD_date() {
      return __isset_bit_vector.get(__D_DATE_ISSET_ID);
    }

    public void setD_dateIsSet(boolean value) {
      __isset_bit_vector.set(__D_DATE_ISSET_ID, value);
    }

    public int getD_time_created() {
      return this.d_time_created;
    }

    public create_debate_args setD_time_created(int d_time_created) {
      this.d_time_created = d_time_created;
      setD_time_createdIsSet(true);
      return this;
    }

    public void unsetD_time_created() {
      __isset_bit_vector.clear(__D_TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field d_time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetD_time_created() {
      return __isset_bit_vector.get(__D_TIME_CREATED_ISSET_ID);
    }

    public void setD_time_createdIsSet(boolean value) {
      __isset_bit_vector.set(__D_TIME_CREATED_ISSET_ID, value);
    }

    public String getD_subcat() {
      return this.d_subcat;
    }

    public create_debate_args setD_subcat(String d_subcat) {
      this.d_subcat = d_subcat;
      return this;
    }

    public void unsetD_subcat() {
      this.d_subcat = null;
    }

    /** Returns true if field d_subcat is set (has been assigned a value) and false otherwise */
    public boolean isSetD_subcat() {
      return this.d_subcat != null;
    }

    public void setD_subcatIsSet(boolean value) {
      if (!value) {
        this.d_subcat = null;
      }
    }

    public String getD_hashtags() {
      return this.d_hashtags;
    }

    public create_debate_args setD_hashtags(String d_hashtags) {
      this.d_hashtags = d_hashtags;
      return this;
    }

    public void unsetD_hashtags() {
      this.d_hashtags = null;
    }

    /** Returns true if field d_hashtags is set (has been assigned a value) and false otherwise */
    public boolean isSetD_hashtags() {
      return this.d_hashtags != null;
    }

    public void setD_hashtagsIsSet(boolean value) {
      if (!value) {
        this.d_hashtags = null;
      }
    }

    public int getIs_edit() {
      return this.is_edit;
    }

    public create_debate_args setIs_edit(int is_edit) {
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      return this;
    }

    public void unsetIs_edit() {
      __isset_bit_vector.clear(__IS_EDIT_ISSET_ID);
    }

    /** Returns true if field is_edit is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_edit() {
      return __isset_bit_vector.get(__IS_EDIT_ISSET_ID);
    }

    public void setIs_editIsSet(boolean value) {
      __isset_bit_vector.set(__IS_EDIT_ISSET_ID, value);
    }

    public int getIs_closed() {
      return this.is_closed;
    }

    public create_debate_args setIs_closed(int is_closed) {
      this.is_closed = is_closed;
      setIs_closedIsSet(true);
      return this;
    }

    public void unsetIs_closed() {
      __isset_bit_vector.clear(__IS_CLOSED_ISSET_ID);
    }

    /** Returns true if field is_closed is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_closed() {
      return __isset_bit_vector.get(__IS_CLOSED_ISSET_ID);
    }

    public void setIs_closedIsSet(boolean value) {
      __isset_bit_vector.set(__IS_CLOSED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case D_ID:
        if (value == null) {
          unsetD_id();
        } else {
          setD_id((String)value);
        }
        break;

      case D_TITLE:
        if (value == null) {
          unsetD_title();
        } else {
          setD_title((String)value);
        }
        break;

      case D_TITLE_ID:
        if (value == null) {
          unsetD_title_id();
        } else {
          setD_title_id((String)value);
        }
        break;

      case D_CONTENT:
        if (value == null) {
          unsetD_content();
        } else {
          setD_content((String)value);
        }
        break;

      case D_IMG_URL:
        if (value == null) {
          unsetD_img_url();
        } else {
          setD_img_url((String)value);
        }
        break;

      case D_CRITERIA:
        if (value == null) {
          unsetD_criteria();
        } else {
          setD_criteria((String)value);
        }
        break;

      case D_DURATION:
        if (value == null) {
          unsetD_duration();
        } else {
          setD_duration((Integer)value);
        }
        break;

      case D_DATE:
        if (value == null) {
          unsetD_date();
        } else {
          setD_date((Integer)value);
        }
        break;

      case D_TIME_CREATED:
        if (value == null) {
          unsetD_time_created();
        } else {
          setD_time_created((Integer)value);
        }
        break;

      case D_SUBCAT:
        if (value == null) {
          unsetD_subcat();
        } else {
          setD_subcat((String)value);
        }
        break;

      case D_HASHTAGS:
        if (value == null) {
          unsetD_hashtags();
        } else {
          setD_hashtags((String)value);
        }
        break;

      case IS_EDIT:
        if (value == null) {
          unsetIs_edit();
        } else {
          setIs_edit((Integer)value);
        }
        break;

      case IS_CLOSED:
        if (value == null) {
          unsetIs_closed();
        } else {
          setIs_closed((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case D_ID:
        return getD_id();

      case D_TITLE:
        return getD_title();

      case D_TITLE_ID:
        return getD_title_id();

      case D_CONTENT:
        return getD_content();

      case D_IMG_URL:
        return getD_img_url();

      case D_CRITERIA:
        return getD_criteria();

      case D_DURATION:
        return Integer.valueOf(getD_duration());

      case D_DATE:
        return Integer.valueOf(getD_date());

      case D_TIME_CREATED:
        return Integer.valueOf(getD_time_created());

      case D_SUBCAT:
        return getD_subcat();

      case D_HASHTAGS:
        return getD_hashtags();

      case IS_EDIT:
        return Integer.valueOf(getIs_edit());

      case IS_CLOSED:
        return Integer.valueOf(getIs_closed());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case D_ID:
        return isSetD_id();
      case D_TITLE:
        return isSetD_title();
      case D_TITLE_ID:
        return isSetD_title_id();
      case D_CONTENT:
        return isSetD_content();
      case D_IMG_URL:
        return isSetD_img_url();
      case D_CRITERIA:
        return isSetD_criteria();
      case D_DURATION:
        return isSetD_duration();
      case D_DATE:
        return isSetD_date();
      case D_TIME_CREATED:
        return isSetD_time_created();
      case D_SUBCAT:
        return isSetD_subcat();
      case D_HASHTAGS:
        return isSetD_hashtags();
      case IS_EDIT:
        return isSetIs_edit();
      case IS_CLOSED:
        return isSetIs_closed();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_debate_args)
        return this.equals((create_debate_args)that);
      return false;
    }

    public boolean equals(create_debate_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_d_id = true && this.isSetD_id();
      boolean that_present_d_id = true && that.isSetD_id();
      if (this_present_d_id || that_present_d_id) {
        if (!(this_present_d_id && that_present_d_id))
          return false;
        if (!this.d_id.equals(that.d_id))
          return false;
      }

      boolean this_present_d_title = true && this.isSetD_title();
      boolean that_present_d_title = true && that.isSetD_title();
      if (this_present_d_title || that_present_d_title) {
        if (!(this_present_d_title && that_present_d_title))
          return false;
        if (!this.d_title.equals(that.d_title))
          return false;
      }

      boolean this_present_d_title_id = true && this.isSetD_title_id();
      boolean that_present_d_title_id = true && that.isSetD_title_id();
      if (this_present_d_title_id || that_present_d_title_id) {
        if (!(this_present_d_title_id && that_present_d_title_id))
          return false;
        if (!this.d_title_id.equals(that.d_title_id))
          return false;
      }

      boolean this_present_d_content = true && this.isSetD_content();
      boolean that_present_d_content = true && that.isSetD_content();
      if (this_present_d_content || that_present_d_content) {
        if (!(this_present_d_content && that_present_d_content))
          return false;
        if (!this.d_content.equals(that.d_content))
          return false;
      }

      boolean this_present_d_img_url = true && this.isSetD_img_url();
      boolean that_present_d_img_url = true && that.isSetD_img_url();
      if (this_present_d_img_url || that_present_d_img_url) {
        if (!(this_present_d_img_url && that_present_d_img_url))
          return false;
        if (!this.d_img_url.equals(that.d_img_url))
          return false;
      }

      boolean this_present_d_criteria = true && this.isSetD_criteria();
      boolean that_present_d_criteria = true && that.isSetD_criteria();
      if (this_present_d_criteria || that_present_d_criteria) {
        if (!(this_present_d_criteria && that_present_d_criteria))
          return false;
        if (!this.d_criteria.equals(that.d_criteria))
          return false;
      }

      boolean this_present_d_duration = true;
      boolean that_present_d_duration = true;
      if (this_present_d_duration || that_present_d_duration) {
        if (!(this_present_d_duration && that_present_d_duration))
          return false;
        if (this.d_duration != that.d_duration)
          return false;
      }

      boolean this_present_d_date = true;
      boolean that_present_d_date = true;
      if (this_present_d_date || that_present_d_date) {
        if (!(this_present_d_date && that_present_d_date))
          return false;
        if (this.d_date != that.d_date)
          return false;
      }

      boolean this_present_d_time_created = true;
      boolean that_present_d_time_created = true;
      if (this_present_d_time_created || that_present_d_time_created) {
        if (!(this_present_d_time_created && that_present_d_time_created))
          return false;
        if (this.d_time_created != that.d_time_created)
          return false;
      }

      boolean this_present_d_subcat = true && this.isSetD_subcat();
      boolean that_present_d_subcat = true && that.isSetD_subcat();
      if (this_present_d_subcat || that_present_d_subcat) {
        if (!(this_present_d_subcat && that_present_d_subcat))
          return false;
        if (!this.d_subcat.equals(that.d_subcat))
          return false;
      }

      boolean this_present_d_hashtags = true && this.isSetD_hashtags();
      boolean that_present_d_hashtags = true && that.isSetD_hashtags();
      if (this_present_d_hashtags || that_present_d_hashtags) {
        if (!(this_present_d_hashtags && that_present_d_hashtags))
          return false;
        if (!this.d_hashtags.equals(that.d_hashtags))
          return false;
      }

      boolean this_present_is_edit = true;
      boolean that_present_is_edit = true;
      if (this_present_is_edit || that_present_is_edit) {
        if (!(this_present_is_edit && that_present_is_edit))
          return false;
        if (this.is_edit != that.is_edit)
          return false;
      }

      boolean this_present_is_closed = true;
      boolean that_present_is_closed = true;
      if (this_present_is_closed || that_present_is_closed) {
        if (!(this_present_is_closed && that_present_is_closed))
          return false;
        if (this.is_closed != that.is_closed)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_debate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_debate_args typedOther = (create_debate_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD_id()).compareTo(typedOther.isSetD_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_id, typedOther.d_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD_title()).compareTo(typedOther.isSetD_title());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_title()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_title, typedOther.d_title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD_title_id()).compareTo(typedOther.isSetD_title_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_title_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_title_id, typedOther.d_title_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD_content()).compareTo(typedOther.isSetD_content());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_content()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_content, typedOther.d_content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD_img_url()).compareTo(typedOther.isSetD_img_url());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_img_url()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_img_url, typedOther.d_img_url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD_criteria()).compareTo(typedOther.isSetD_criteria());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_criteria()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_criteria, typedOther.d_criteria);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD_duration()).compareTo(typedOther.isSetD_duration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_duration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_duration, typedOther.d_duration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD_date()).compareTo(typedOther.isSetD_date());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_date()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_date, typedOther.d_date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD_time_created()).compareTo(typedOther.isSetD_time_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_time_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_time_created, typedOther.d_time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD_subcat()).compareTo(typedOther.isSetD_subcat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_subcat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_subcat, typedOther.d_subcat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD_hashtags()).compareTo(typedOther.isSetD_hashtags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_hashtags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_hashtags, typedOther.d_hashtags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_edit()).compareTo(typedOther.isSetIs_edit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_edit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_edit, typedOther.is_edit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_closed()).compareTo(typedOther.isSetIs_closed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_closed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_closed, typedOther.is_closed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_debate_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d_id:");
      if (this.d_id == null) {
        sb.append("null");
      } else {
        sb.append(this.d_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d_title:");
      if (this.d_title == null) {
        sb.append("null");
      } else {
        sb.append(this.d_title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d_title_id:");
      if (this.d_title_id == null) {
        sb.append("null");
      } else {
        sb.append(this.d_title_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d_content:");
      if (this.d_content == null) {
        sb.append("null");
      } else {
        sb.append(this.d_content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d_img_url:");
      if (this.d_img_url == null) {
        sb.append("null");
      } else {
        sb.append(this.d_img_url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d_criteria:");
      if (this.d_criteria == null) {
        sb.append("null");
      } else {
        sb.append(this.d_criteria);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d_duration:");
      sb.append(this.d_duration);
      first = false;
      if (!first) sb.append(", ");
      sb.append("d_date:");
      sb.append(this.d_date);
      first = false;
      if (!first) sb.append(", ");
      sb.append("d_time_created:");
      sb.append(this.d_time_created);
      first = false;
      if (!first) sb.append(", ");
      sb.append("d_subcat:");
      if (this.d_subcat == null) {
        sb.append("null");
      } else {
        sb.append(this.d_subcat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d_hashtags:");
      if (this.d_hashtags == null) {
        sb.append("null");
      } else {
        sb.append(this.d_hashtags);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_edit:");
      sb.append(this.is_edit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_closed:");
      sb.append(this.is_closed);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_debate_argsStandardSchemeFactory implements SchemeFactory {
      public create_debate_argsStandardScheme getScheme() {
        return new create_debate_argsStandardScheme();
      }
    }

    private static class create_debate_argsStandardScheme extends StandardScheme<create_debate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_debate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // D_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d_id = iprot.readString();
                struct.setD_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // D_TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d_title = iprot.readString();
                struct.setD_titleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // D_TITLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d_title_id = iprot.readString();
                struct.setD_title_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // D_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d_content = iprot.readString();
                struct.setD_contentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // D_IMG_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d_img_url = iprot.readString();
                struct.setD_img_urlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // D_CRITERIA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d_criteria = iprot.readString();
                struct.setD_criteriaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // D_DURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.d_duration = iprot.readI32();
                struct.setD_durationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // D_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.d_date = iprot.readI32();
                struct.setD_dateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // D_TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.d_time_created = iprot.readI32();
                struct.setD_time_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // D_SUBCAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d_subcat = iprot.readString();
                struct.setD_subcatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // D_HASHTAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d_hashtags = iprot.readString();
                struct.setD_hashtagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // IS_EDIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_edit = iprot.readI32();
                struct.setIs_editIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // IS_CLOSED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_closed = iprot.readI32();
                struct.setIs_closedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_debate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.d_id != null) {
          oprot.writeFieldBegin(D_ID_FIELD_DESC);
          oprot.writeString(struct.d_id);
          oprot.writeFieldEnd();
        }
        if (struct.d_title != null) {
          oprot.writeFieldBegin(D_TITLE_FIELD_DESC);
          oprot.writeString(struct.d_title);
          oprot.writeFieldEnd();
        }
        if (struct.d_title_id != null) {
          oprot.writeFieldBegin(D_TITLE_ID_FIELD_DESC);
          oprot.writeString(struct.d_title_id);
          oprot.writeFieldEnd();
        }
        if (struct.d_content != null) {
          oprot.writeFieldBegin(D_CONTENT_FIELD_DESC);
          oprot.writeString(struct.d_content);
          oprot.writeFieldEnd();
        }
        if (struct.d_img_url != null) {
          oprot.writeFieldBegin(D_IMG_URL_FIELD_DESC);
          oprot.writeString(struct.d_img_url);
          oprot.writeFieldEnd();
        }
        if (struct.d_criteria != null) {
          oprot.writeFieldBegin(D_CRITERIA_FIELD_DESC);
          oprot.writeString(struct.d_criteria);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(D_DURATION_FIELD_DESC);
        oprot.writeI32(struct.d_duration);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(D_DATE_FIELD_DESC);
        oprot.writeI32(struct.d_date);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(D_TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.d_time_created);
        oprot.writeFieldEnd();
        if (struct.d_subcat != null) {
          oprot.writeFieldBegin(D_SUBCAT_FIELD_DESC);
          oprot.writeString(struct.d_subcat);
          oprot.writeFieldEnd();
        }
        if (struct.d_hashtags != null) {
          oprot.writeFieldBegin(D_HASHTAGS_FIELD_DESC);
          oprot.writeString(struct.d_hashtags);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_EDIT_FIELD_DESC);
        oprot.writeI32(struct.is_edit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_CLOSED_FIELD_DESC);
        oprot.writeI32(struct.is_closed);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_debate_argsTupleSchemeFactory implements SchemeFactory {
      public create_debate_argsTupleScheme getScheme() {
        return new create_debate_argsTupleScheme();
      }
    }

    private static class create_debate_argsTupleScheme extends TupleScheme<create_debate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_debate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetD_id()) {
          optionals.set(1);
        }
        if (struct.isSetD_title()) {
          optionals.set(2);
        }
        if (struct.isSetD_title_id()) {
          optionals.set(3);
        }
        if (struct.isSetD_content()) {
          optionals.set(4);
        }
        if (struct.isSetD_img_url()) {
          optionals.set(5);
        }
        if (struct.isSetD_criteria()) {
          optionals.set(6);
        }
        if (struct.isSetD_duration()) {
          optionals.set(7);
        }
        if (struct.isSetD_date()) {
          optionals.set(8);
        }
        if (struct.isSetD_time_created()) {
          optionals.set(9);
        }
        if (struct.isSetD_subcat()) {
          optionals.set(10);
        }
        if (struct.isSetD_hashtags()) {
          optionals.set(11);
        }
        if (struct.isSetIs_edit()) {
          optionals.set(12);
        }
        if (struct.isSetIs_closed()) {
          optionals.set(13);
        }
        oprot.writeBitSet(optionals, 14);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetD_id()) {
          oprot.writeString(struct.d_id);
        }
        if (struct.isSetD_title()) {
          oprot.writeString(struct.d_title);
        }
        if (struct.isSetD_title_id()) {
          oprot.writeString(struct.d_title_id);
        }
        if (struct.isSetD_content()) {
          oprot.writeString(struct.d_content);
        }
        if (struct.isSetD_img_url()) {
          oprot.writeString(struct.d_img_url);
        }
        if (struct.isSetD_criteria()) {
          oprot.writeString(struct.d_criteria);
        }
        if (struct.isSetD_duration()) {
          oprot.writeI32(struct.d_duration);
        }
        if (struct.isSetD_date()) {
          oprot.writeI32(struct.d_date);
        }
        if (struct.isSetD_time_created()) {
          oprot.writeI32(struct.d_time_created);
        }
        if (struct.isSetD_subcat()) {
          oprot.writeString(struct.d_subcat);
        }
        if (struct.isSetD_hashtags()) {
          oprot.writeString(struct.d_hashtags);
        }
        if (struct.isSetIs_edit()) {
          oprot.writeI32(struct.is_edit);
        }
        if (struct.isSetIs_closed()) {
          oprot.writeI32(struct.is_closed);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_debate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(14);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.d_id = iprot.readString();
          struct.setD_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.d_title = iprot.readString();
          struct.setD_titleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.d_title_id = iprot.readString();
          struct.setD_title_idIsSet(true);
        }
        if (incoming.get(4)) {
          struct.d_content = iprot.readString();
          struct.setD_contentIsSet(true);
        }
        if (incoming.get(5)) {
          struct.d_img_url = iprot.readString();
          struct.setD_img_urlIsSet(true);
        }
        if (incoming.get(6)) {
          struct.d_criteria = iprot.readString();
          struct.setD_criteriaIsSet(true);
        }
        if (incoming.get(7)) {
          struct.d_duration = iprot.readI32();
          struct.setD_durationIsSet(true);
        }
        if (incoming.get(8)) {
          struct.d_date = iprot.readI32();
          struct.setD_dateIsSet(true);
        }
        if (incoming.get(9)) {
          struct.d_time_created = iprot.readI32();
          struct.setD_time_createdIsSet(true);
        }
        if (incoming.get(10)) {
          struct.d_subcat = iprot.readString();
          struct.setD_subcatIsSet(true);
        }
        if (incoming.get(11)) {
          struct.d_hashtags = iprot.readString();
          struct.setD_hashtagsIsSet(true);
        }
        if (incoming.get(12)) {
          struct.is_edit = iprot.readI32();
          struct.setIs_editIsSet(true);
        }
        if (incoming.get(13)) {
          struct.is_closed = iprot.readI32();
          struct.setIs_closedIsSet(true);
        }
      }
    }

  }

  public static class create_debate_result implements org.apache.thrift.TBase<create_debate_result, create_debate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_debate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_debate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_debate_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_debate_result.class, metaDataMap);
    }

    public create_debate_result() {
    }

    public create_debate_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_debate_result(create_debate_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public create_debate_result deepCopy() {
      return new create_debate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public create_debate_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_debate_result)
        return this.equals((create_debate_result)that);
      return false;
    }

    public boolean equals(create_debate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_debate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_debate_result typedOther = (create_debate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_debate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_debate_resultStandardSchemeFactory implements SchemeFactory {
      public create_debate_resultStandardScheme getScheme() {
        return new create_debate_resultStandardScheme();
      }
    }

    private static class create_debate_resultStandardScheme extends StandardScheme<create_debate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_debate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_debate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_debate_resultTupleSchemeFactory implements SchemeFactory {
      public create_debate_resultTupleScheme getScheme() {
        return new create_debate_resultTupleScheme();
      }
    }

    private static class create_debate_resultTupleScheme extends TupleScheme<create_debate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_debate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_debate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class debate_action_args implements org.apache.thrift.TBase<debate_action_args, debate_action_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("debate_action_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField D_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("d_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("action_type", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField QTN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("qtn_id", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField QTN_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("qtn_content", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new debate_action_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new debate_action_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String d_id; // required
    public String action_type; // required
    public String qtn_id; // required
    public String qtn_content; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      D_ID((short)2, "d_id"),
      ACTION_TYPE((short)3, "action_type"),
      QTN_ID((short)4, "qtn_id"),
      QTN_CONTENT((short)5, "qtn_content"),
      TIME((short)6, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // D_ID
            return D_ID;
          case 3: // ACTION_TYPE
            return ACTION_TYPE;
          case 4: // QTN_ID
            return QTN_ID;
          case 5: // QTN_CONTENT
            return QTN_CONTENT;
          case 6: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.D_ID, new org.apache.thrift.meta_data.FieldMetaData("d_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("action_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QTN_ID, new org.apache.thrift.meta_data.FieldMetaData("qtn_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QTN_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("qtn_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(debate_action_args.class, metaDataMap);
    }

    public debate_action_args() {
    }

    public debate_action_args(
      String user_name,
      String d_id,
      String action_type,
      String qtn_id,
      String qtn_content,
      int time)
    {
      this();
      this.user_name = user_name;
      this.d_id = d_id;
      this.action_type = action_type;
      this.qtn_id = qtn_id;
      this.qtn_content = qtn_content;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public debate_action_args(debate_action_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetD_id()) {
        this.d_id = other.d_id;
      }
      if (other.isSetAction_type()) {
        this.action_type = other.action_type;
      }
      if (other.isSetQtn_id()) {
        this.qtn_id = other.qtn_id;
      }
      if (other.isSetQtn_content()) {
        this.qtn_content = other.qtn_content;
      }
      this.time = other.time;
    }

    public debate_action_args deepCopy() {
      return new debate_action_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.d_id = null;
      this.action_type = null;
      this.qtn_id = null;
      this.qtn_content = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public debate_action_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getD_id() {
      return this.d_id;
    }

    public debate_action_args setD_id(String d_id) {
      this.d_id = d_id;
      return this;
    }

    public void unsetD_id() {
      this.d_id = null;
    }

    /** Returns true if field d_id is set (has been assigned a value) and false otherwise */
    public boolean isSetD_id() {
      return this.d_id != null;
    }

    public void setD_idIsSet(boolean value) {
      if (!value) {
        this.d_id = null;
      }
    }

    public String getAction_type() {
      return this.action_type;
    }

    public debate_action_args setAction_type(String action_type) {
      this.action_type = action_type;
      return this;
    }

    public void unsetAction_type() {
      this.action_type = null;
    }

    /** Returns true if field action_type is set (has been assigned a value) and false otherwise */
    public boolean isSetAction_type() {
      return this.action_type != null;
    }

    public void setAction_typeIsSet(boolean value) {
      if (!value) {
        this.action_type = null;
      }
    }

    public String getQtn_id() {
      return this.qtn_id;
    }

    public debate_action_args setQtn_id(String qtn_id) {
      this.qtn_id = qtn_id;
      return this;
    }

    public void unsetQtn_id() {
      this.qtn_id = null;
    }

    /** Returns true if field qtn_id is set (has been assigned a value) and false otherwise */
    public boolean isSetQtn_id() {
      return this.qtn_id != null;
    }

    public void setQtn_idIsSet(boolean value) {
      if (!value) {
        this.qtn_id = null;
      }
    }

    public String getQtn_content() {
      return this.qtn_content;
    }

    public debate_action_args setQtn_content(String qtn_content) {
      this.qtn_content = qtn_content;
      return this;
    }

    public void unsetQtn_content() {
      this.qtn_content = null;
    }

    /** Returns true if field qtn_content is set (has been assigned a value) and false otherwise */
    public boolean isSetQtn_content() {
      return this.qtn_content != null;
    }

    public void setQtn_contentIsSet(boolean value) {
      if (!value) {
        this.qtn_content = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public debate_action_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case D_ID:
        if (value == null) {
          unsetD_id();
        } else {
          setD_id((String)value);
        }
        break;

      case ACTION_TYPE:
        if (value == null) {
          unsetAction_type();
        } else {
          setAction_type((String)value);
        }
        break;

      case QTN_ID:
        if (value == null) {
          unsetQtn_id();
        } else {
          setQtn_id((String)value);
        }
        break;

      case QTN_CONTENT:
        if (value == null) {
          unsetQtn_content();
        } else {
          setQtn_content((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case D_ID:
        return getD_id();

      case ACTION_TYPE:
        return getAction_type();

      case QTN_ID:
        return getQtn_id();

      case QTN_CONTENT:
        return getQtn_content();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case D_ID:
        return isSetD_id();
      case ACTION_TYPE:
        return isSetAction_type();
      case QTN_ID:
        return isSetQtn_id();
      case QTN_CONTENT:
        return isSetQtn_content();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof debate_action_args)
        return this.equals((debate_action_args)that);
      return false;
    }

    public boolean equals(debate_action_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_d_id = true && this.isSetD_id();
      boolean that_present_d_id = true && that.isSetD_id();
      if (this_present_d_id || that_present_d_id) {
        if (!(this_present_d_id && that_present_d_id))
          return false;
        if (!this.d_id.equals(that.d_id))
          return false;
      }

      boolean this_present_action_type = true && this.isSetAction_type();
      boolean that_present_action_type = true && that.isSetAction_type();
      if (this_present_action_type || that_present_action_type) {
        if (!(this_present_action_type && that_present_action_type))
          return false;
        if (!this.action_type.equals(that.action_type))
          return false;
      }

      boolean this_present_qtn_id = true && this.isSetQtn_id();
      boolean that_present_qtn_id = true && that.isSetQtn_id();
      if (this_present_qtn_id || that_present_qtn_id) {
        if (!(this_present_qtn_id && that_present_qtn_id))
          return false;
        if (!this.qtn_id.equals(that.qtn_id))
          return false;
      }

      boolean this_present_qtn_content = true && this.isSetQtn_content();
      boolean that_present_qtn_content = true && that.isSetQtn_content();
      if (this_present_qtn_content || that_present_qtn_content) {
        if (!(this_present_qtn_content && that_present_qtn_content))
          return false;
        if (!this.qtn_content.equals(that.qtn_content))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(debate_action_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      debate_action_args typedOther = (debate_action_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD_id()).compareTo(typedOther.isSetD_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_id, typedOther.d_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction_type()).compareTo(typedOther.isSetAction_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_type, typedOther.action_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQtn_id()).compareTo(typedOther.isSetQtn_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQtn_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qtn_id, typedOther.qtn_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQtn_content()).compareTo(typedOther.isSetQtn_content());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQtn_content()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qtn_content, typedOther.qtn_content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("debate_action_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d_id:");
      if (this.d_id == null) {
        sb.append("null");
      } else {
        sb.append(this.d_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action_type:");
      if (this.action_type == null) {
        sb.append("null");
      } else {
        sb.append(this.action_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qtn_id:");
      if (this.qtn_id == null) {
        sb.append("null");
      } else {
        sb.append(this.qtn_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qtn_content:");
      if (this.qtn_content == null) {
        sb.append("null");
      } else {
        sb.append(this.qtn_content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class debate_action_argsStandardSchemeFactory implements SchemeFactory {
      public debate_action_argsStandardScheme getScheme() {
        return new debate_action_argsStandardScheme();
      }
    }

    private static class debate_action_argsStandardScheme extends StandardScheme<debate_action_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, debate_action_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // D_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d_id = iprot.readString();
                struct.setD_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.action_type = iprot.readString();
                struct.setAction_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // QTN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.qtn_id = iprot.readString();
                struct.setQtn_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // QTN_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.qtn_content = iprot.readString();
                struct.setQtn_contentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, debate_action_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.d_id != null) {
          oprot.writeFieldBegin(D_ID_FIELD_DESC);
          oprot.writeString(struct.d_id);
          oprot.writeFieldEnd();
        }
        if (struct.action_type != null) {
          oprot.writeFieldBegin(ACTION_TYPE_FIELD_DESC);
          oprot.writeString(struct.action_type);
          oprot.writeFieldEnd();
        }
        if (struct.qtn_id != null) {
          oprot.writeFieldBegin(QTN_ID_FIELD_DESC);
          oprot.writeString(struct.qtn_id);
          oprot.writeFieldEnd();
        }
        if (struct.qtn_content != null) {
          oprot.writeFieldBegin(QTN_CONTENT_FIELD_DESC);
          oprot.writeString(struct.qtn_content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class debate_action_argsTupleSchemeFactory implements SchemeFactory {
      public debate_action_argsTupleScheme getScheme() {
        return new debate_action_argsTupleScheme();
      }
    }

    private static class debate_action_argsTupleScheme extends TupleScheme<debate_action_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, debate_action_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetD_id()) {
          optionals.set(1);
        }
        if (struct.isSetAction_type()) {
          optionals.set(2);
        }
        if (struct.isSetQtn_id()) {
          optionals.set(3);
        }
        if (struct.isSetQtn_content()) {
          optionals.set(4);
        }
        if (struct.isSetTime()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetD_id()) {
          oprot.writeString(struct.d_id);
        }
        if (struct.isSetAction_type()) {
          oprot.writeString(struct.action_type);
        }
        if (struct.isSetQtn_id()) {
          oprot.writeString(struct.qtn_id);
        }
        if (struct.isSetQtn_content()) {
          oprot.writeString(struct.qtn_content);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, debate_action_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.d_id = iprot.readString();
          struct.setD_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.action_type = iprot.readString();
          struct.setAction_typeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.qtn_id = iprot.readString();
          struct.setQtn_idIsSet(true);
        }
        if (incoming.get(4)) {
          struct.qtn_content = iprot.readString();
          struct.setQtn_contentIsSet(true);
        }
        if (incoming.get(5)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class debate_action_result implements org.apache.thrift.TBase<debate_action_result, debate_action_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("debate_action_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new debate_action_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new debate_action_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(debate_action_result.class, metaDataMap);
    }

    public debate_action_result() {
    }

    public debate_action_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public debate_action_result(debate_action_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public debate_action_result deepCopy() {
      return new debate_action_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public debate_action_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof debate_action_result)
        return this.equals((debate_action_result)that);
      return false;
    }

    public boolean equals(debate_action_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(debate_action_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      debate_action_result typedOther = (debate_action_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("debate_action_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class debate_action_resultStandardSchemeFactory implements SchemeFactory {
      public debate_action_resultStandardScheme getScheme() {
        return new debate_action_resultStandardScheme();
      }
    }

    private static class debate_action_resultStandardScheme extends StandardScheme<debate_action_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, debate_action_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, debate_action_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class debate_action_resultTupleSchemeFactory implements SchemeFactory {
      public debate_action_resultTupleScheme getScheme() {
        return new debate_action_resultTupleScheme();
      }
    }

    private static class debate_action_resultTupleScheme extends TupleScheme<debate_action_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, debate_action_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, debate_action_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class debate_comment_args implements org.apache.thrift.TBase<debate_comment_args, debate_comment_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("debate_comment_args");

    private static final org.apache.thrift.protocol.TField D_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("d_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new debate_comment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new debate_comment_argsTupleSchemeFactory());
    }

    public String d_id; // required
    public String user_name; // required
    public String comment; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      D_ID((short)1, "d_id"),
      USER_NAME((short)2, "user_name"),
      COMMENT((short)3, "comment"),
      TIME((short)4, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // D_ID
            return D_ID;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // COMMENT
            return COMMENT;
          case 4: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.D_ID, new org.apache.thrift.meta_data.FieldMetaData("d_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(debate_comment_args.class, metaDataMap);
    }

    public debate_comment_args() {
    }

    public debate_comment_args(
      String d_id,
      String user_name,
      String comment,
      int time)
    {
      this();
      this.d_id = d_id;
      this.user_name = user_name;
      this.comment = comment;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public debate_comment_args(debate_comment_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetD_id()) {
        this.d_id = other.d_id;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetComment()) {
        this.comment = other.comment;
      }
      this.time = other.time;
    }

    public debate_comment_args deepCopy() {
      return new debate_comment_args(this);
    }

    @Override
    public void clear() {
      this.d_id = null;
      this.user_name = null;
      this.comment = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getD_id() {
      return this.d_id;
    }

    public debate_comment_args setD_id(String d_id) {
      this.d_id = d_id;
      return this;
    }

    public void unsetD_id() {
      this.d_id = null;
    }

    /** Returns true if field d_id is set (has been assigned a value) and false otherwise */
    public boolean isSetD_id() {
      return this.d_id != null;
    }

    public void setD_idIsSet(boolean value) {
      if (!value) {
        this.d_id = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public debate_comment_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getComment() {
      return this.comment;
    }

    public debate_comment_args setComment(String comment) {
      this.comment = comment;
      return this;
    }

    public void unsetComment() {
      this.comment = null;
    }

    /** Returns true if field comment is set (has been assigned a value) and false otherwise */
    public boolean isSetComment() {
      return this.comment != null;
    }

    public void setCommentIsSet(boolean value) {
      if (!value) {
        this.comment = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public debate_comment_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case D_ID:
        if (value == null) {
          unsetD_id();
        } else {
          setD_id((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case COMMENT:
        if (value == null) {
          unsetComment();
        } else {
          setComment((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case D_ID:
        return getD_id();

      case USER_NAME:
        return getUser_name();

      case COMMENT:
        return getComment();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case D_ID:
        return isSetD_id();
      case USER_NAME:
        return isSetUser_name();
      case COMMENT:
        return isSetComment();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof debate_comment_args)
        return this.equals((debate_comment_args)that);
      return false;
    }

    public boolean equals(debate_comment_args that) {
      if (that == null)
        return false;

      boolean this_present_d_id = true && this.isSetD_id();
      boolean that_present_d_id = true && that.isSetD_id();
      if (this_present_d_id || that_present_d_id) {
        if (!(this_present_d_id && that_present_d_id))
          return false;
        if (!this.d_id.equals(that.d_id))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_comment = true && this.isSetComment();
      boolean that_present_comment = true && that.isSetComment();
      if (this_present_comment || that_present_comment) {
        if (!(this_present_comment && that_present_comment))
          return false;
        if (!this.comment.equals(that.comment))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(debate_comment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      debate_comment_args typedOther = (debate_comment_args)other;

      lastComparison = Boolean.valueOf(isSetD_id()).compareTo(typedOther.isSetD_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_id, typedOther.d_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("debate_comment_args(");
      boolean first = true;

      sb.append("d_id:");
      if (this.d_id == null) {
        sb.append("null");
      } else {
        sb.append(this.d_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class debate_comment_argsStandardSchemeFactory implements SchemeFactory {
      public debate_comment_argsStandardScheme getScheme() {
        return new debate_comment_argsStandardScheme();
      }
    }

    private static class debate_comment_argsStandardScheme extends StandardScheme<debate_comment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, debate_comment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // D_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d_id = iprot.readString();
                struct.setD_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.comment = iprot.readString();
                struct.setCommentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, debate_comment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.d_id != null) {
          oprot.writeFieldBegin(D_ID_FIELD_DESC);
          oprot.writeString(struct.d_id);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.comment != null) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class debate_comment_argsTupleSchemeFactory implements SchemeFactory {
      public debate_comment_argsTupleScheme getScheme() {
        return new debate_comment_argsTupleScheme();
      }
    }

    private static class debate_comment_argsTupleScheme extends TupleScheme<debate_comment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, debate_comment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetD_id()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name()) {
          optionals.set(1);
        }
        if (struct.isSetComment()) {
          optionals.set(2);
        }
        if (struct.isSetTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetD_id()) {
          oprot.writeString(struct.d_id);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetComment()) {
          oprot.writeString(struct.comment);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, debate_comment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.d_id = iprot.readString();
          struct.setD_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.comment = iprot.readString();
          struct.setCommentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class debate_comment_result implements org.apache.thrift.TBase<debate_comment_result, debate_comment_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("debate_comment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new debate_comment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new debate_comment_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(debate_comment_result.class, metaDataMap);
    }

    public debate_comment_result() {
    }

    public debate_comment_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public debate_comment_result(debate_comment_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public debate_comment_result deepCopy() {
      return new debate_comment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public debate_comment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof debate_comment_result)
        return this.equals((debate_comment_result)that);
      return false;
    }

    public boolean equals(debate_comment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(debate_comment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      debate_comment_result typedOther = (debate_comment_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("debate_comment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class debate_comment_resultStandardSchemeFactory implements SchemeFactory {
      public debate_comment_resultStandardScheme getScheme() {
        return new debate_comment_resultStandardScheme();
      }
    }

    private static class debate_comment_resultStandardScheme extends StandardScheme<debate_comment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, debate_comment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, debate_comment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class debate_comment_resultTupleSchemeFactory implements SchemeFactory {
      public debate_comment_resultTupleScheme getScheme() {
        return new debate_comment_resultTupleScheme();
      }
    }

    private static class debate_comment_resultTupleScheme extends TupleScheme<debate_comment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, debate_comment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, debate_comment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class debate_participate_args implements org.apache.thrift.TBase<debate_participate_args, debate_participate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("debate_participate_args");

    private static final org.apache.thrift.protocol.TField D_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("d_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GRP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("grp_name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new debate_participate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new debate_participate_argsTupleSchemeFactory());
    }

    public String d_id; // required
    public String user_name; // required
    public String grp_name; // required
    public String message; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      D_ID((short)1, "d_id"),
      USER_NAME((short)2, "user_name"),
      GRP_NAME((short)3, "grp_name"),
      MESSAGE((short)4, "message"),
      TIME((short)5, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // D_ID
            return D_ID;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // GRP_NAME
            return GRP_NAME;
          case 4: // MESSAGE
            return MESSAGE;
          case 5: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.D_ID, new org.apache.thrift.meta_data.FieldMetaData("d_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GRP_NAME, new org.apache.thrift.meta_data.FieldMetaData("grp_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(debate_participate_args.class, metaDataMap);
    }

    public debate_participate_args() {
    }

    public debate_participate_args(
      String d_id,
      String user_name,
      String grp_name,
      String message,
      int time)
    {
      this();
      this.d_id = d_id;
      this.user_name = user_name;
      this.grp_name = grp_name;
      this.message = message;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public debate_participate_args(debate_participate_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetD_id()) {
        this.d_id = other.d_id;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetGrp_name()) {
        this.grp_name = other.grp_name;
      }
      if (other.isSetMessage()) {
        this.message = other.message;
      }
      this.time = other.time;
    }

    public debate_participate_args deepCopy() {
      return new debate_participate_args(this);
    }

    @Override
    public void clear() {
      this.d_id = null;
      this.user_name = null;
      this.grp_name = null;
      this.message = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getD_id() {
      return this.d_id;
    }

    public debate_participate_args setD_id(String d_id) {
      this.d_id = d_id;
      return this;
    }

    public void unsetD_id() {
      this.d_id = null;
    }

    /** Returns true if field d_id is set (has been assigned a value) and false otherwise */
    public boolean isSetD_id() {
      return this.d_id != null;
    }

    public void setD_idIsSet(boolean value) {
      if (!value) {
        this.d_id = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public debate_participate_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getGrp_name() {
      return this.grp_name;
    }

    public debate_participate_args setGrp_name(String grp_name) {
      this.grp_name = grp_name;
      return this;
    }

    public void unsetGrp_name() {
      this.grp_name = null;
    }

    /** Returns true if field grp_name is set (has been assigned a value) and false otherwise */
    public boolean isSetGrp_name() {
      return this.grp_name != null;
    }

    public void setGrp_nameIsSet(boolean value) {
      if (!value) {
        this.grp_name = null;
      }
    }

    public String getMessage() {
      return this.message;
    }

    public debate_participate_args setMessage(String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public debate_participate_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case D_ID:
        if (value == null) {
          unsetD_id();
        } else {
          setD_id((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case GRP_NAME:
        if (value == null) {
          unsetGrp_name();
        } else {
          setGrp_name((String)value);
        }
        break;

      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case D_ID:
        return getD_id();

      case USER_NAME:
        return getUser_name();

      case GRP_NAME:
        return getGrp_name();

      case MESSAGE:
        return getMessage();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case D_ID:
        return isSetD_id();
      case USER_NAME:
        return isSetUser_name();
      case GRP_NAME:
        return isSetGrp_name();
      case MESSAGE:
        return isSetMessage();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof debate_participate_args)
        return this.equals((debate_participate_args)that);
      return false;
    }

    public boolean equals(debate_participate_args that) {
      if (that == null)
        return false;

      boolean this_present_d_id = true && this.isSetD_id();
      boolean that_present_d_id = true && that.isSetD_id();
      if (this_present_d_id || that_present_d_id) {
        if (!(this_present_d_id && that_present_d_id))
          return false;
        if (!this.d_id.equals(that.d_id))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_grp_name = true && this.isSetGrp_name();
      boolean that_present_grp_name = true && that.isSetGrp_name();
      if (this_present_grp_name || that_present_grp_name) {
        if (!(this_present_grp_name && that_present_grp_name))
          return false;
        if (!this.grp_name.equals(that.grp_name))
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(debate_participate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      debate_participate_args typedOther = (debate_participate_args)other;

      lastComparison = Boolean.valueOf(isSetD_id()).compareTo(typedOther.isSetD_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_id, typedOther.d_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGrp_name()).compareTo(typedOther.isSetGrp_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGrp_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grp_name, typedOther.grp_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("debate_participate_args(");
      boolean first = true;

      sb.append("d_id:");
      if (this.d_id == null) {
        sb.append("null");
      } else {
        sb.append(this.d_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("grp_name:");
      if (this.grp_name == null) {
        sb.append("null");
      } else {
        sb.append(this.grp_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class debate_participate_argsStandardSchemeFactory implements SchemeFactory {
      public debate_participate_argsStandardScheme getScheme() {
        return new debate_participate_argsStandardScheme();
      }
    }

    private static class debate_participate_argsStandardScheme extends StandardScheme<debate_participate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, debate_participate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // D_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d_id = iprot.readString();
                struct.setD_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GRP_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.grp_name = iprot.readString();
                struct.setGrp_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, debate_participate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.d_id != null) {
          oprot.writeFieldBegin(D_ID_FIELD_DESC);
          oprot.writeString(struct.d_id);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.grp_name != null) {
          oprot.writeFieldBegin(GRP_NAME_FIELD_DESC);
          oprot.writeString(struct.grp_name);
          oprot.writeFieldEnd();
        }
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class debate_participate_argsTupleSchemeFactory implements SchemeFactory {
      public debate_participate_argsTupleScheme getScheme() {
        return new debate_participate_argsTupleScheme();
      }
    }

    private static class debate_participate_argsTupleScheme extends TupleScheme<debate_participate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, debate_participate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetD_id()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name()) {
          optionals.set(1);
        }
        if (struct.isSetGrp_name()) {
          optionals.set(2);
        }
        if (struct.isSetMessage()) {
          optionals.set(3);
        }
        if (struct.isSetTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetD_id()) {
          oprot.writeString(struct.d_id);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetGrp_name()) {
          oprot.writeString(struct.grp_name);
        }
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, debate_participate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.d_id = iprot.readString();
          struct.setD_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.grp_name = iprot.readString();
          struct.setGrp_nameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
        if (incoming.get(4)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class debate_participate_result implements org.apache.thrift.TBase<debate_participate_result, debate_participate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("debate_participate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new debate_participate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new debate_participate_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(debate_participate_result.class, metaDataMap);
    }

    public debate_participate_result() {
    }

    public debate_participate_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public debate_participate_result(debate_participate_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public debate_participate_result deepCopy() {
      return new debate_participate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public debate_participate_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof debate_participate_result)
        return this.equals((debate_participate_result)that);
      return false;
    }

    public boolean equals(debate_participate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(debate_participate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      debate_participate_result typedOther = (debate_participate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("debate_participate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class debate_participate_resultStandardSchemeFactory implements SchemeFactory {
      public debate_participate_resultStandardScheme getScheme() {
        return new debate_participate_resultStandardScheme();
      }
    }

    private static class debate_participate_resultStandardScheme extends StandardScheme<debate_participate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, debate_participate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, debate_participate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class debate_participate_resultTupleSchemeFactory implements SchemeFactory {
      public debate_participate_resultTupleScheme getScheme() {
        return new debate_participate_resultTupleScheme();
      }
    }

    private static class debate_participate_resultTupleScheme extends TupleScheme<debate_participate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, debate_participate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, debate_participate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class debate_shortlist_guests_args implements org.apache.thrift.TBase<debate_shortlist_guests_args, debate_shortlist_guests_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("debate_shortlist_guests_args");

    private static final org.apache.thrift.protocol.TField D_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("d_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GRP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("grp_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("user_names", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new debate_shortlist_guests_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new debate_shortlist_guests_argsTupleSchemeFactory());
    }

    public String d_id; // required
    public String grp_name; // required
    public String user_names; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      D_ID((short)1, "d_id"),
      GRP_NAME((short)2, "grp_name"),
      USER_NAMES((short)3, "user_names");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // D_ID
            return D_ID;
          case 2: // GRP_NAME
            return GRP_NAME;
          case 3: // USER_NAMES
            return USER_NAMES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.D_ID, new org.apache.thrift.meta_data.FieldMetaData("d_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GRP_NAME, new org.apache.thrift.meta_data.FieldMetaData("grp_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAMES, new org.apache.thrift.meta_data.FieldMetaData("user_names", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(debate_shortlist_guests_args.class, metaDataMap);
    }

    public debate_shortlist_guests_args() {
    }

    public debate_shortlist_guests_args(
      String d_id,
      String grp_name,
      String user_names)
    {
      this();
      this.d_id = d_id;
      this.grp_name = grp_name;
      this.user_names = user_names;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public debate_shortlist_guests_args(debate_shortlist_guests_args other) {
      if (other.isSetD_id()) {
        this.d_id = other.d_id;
      }
      if (other.isSetGrp_name()) {
        this.grp_name = other.grp_name;
      }
      if (other.isSetUser_names()) {
        this.user_names = other.user_names;
      }
    }

    public debate_shortlist_guests_args deepCopy() {
      return new debate_shortlist_guests_args(this);
    }

    @Override
    public void clear() {
      this.d_id = null;
      this.grp_name = null;
      this.user_names = null;
    }

    public String getD_id() {
      return this.d_id;
    }

    public debate_shortlist_guests_args setD_id(String d_id) {
      this.d_id = d_id;
      return this;
    }

    public void unsetD_id() {
      this.d_id = null;
    }

    /** Returns true if field d_id is set (has been assigned a value) and false otherwise */
    public boolean isSetD_id() {
      return this.d_id != null;
    }

    public void setD_idIsSet(boolean value) {
      if (!value) {
        this.d_id = null;
      }
    }

    public String getGrp_name() {
      return this.grp_name;
    }

    public debate_shortlist_guests_args setGrp_name(String grp_name) {
      this.grp_name = grp_name;
      return this;
    }

    public void unsetGrp_name() {
      this.grp_name = null;
    }

    /** Returns true if field grp_name is set (has been assigned a value) and false otherwise */
    public boolean isSetGrp_name() {
      return this.grp_name != null;
    }

    public void setGrp_nameIsSet(boolean value) {
      if (!value) {
        this.grp_name = null;
      }
    }

    public String getUser_names() {
      return this.user_names;
    }

    public debate_shortlist_guests_args setUser_names(String user_names) {
      this.user_names = user_names;
      return this;
    }

    public void unsetUser_names() {
      this.user_names = null;
    }

    /** Returns true if field user_names is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_names() {
      return this.user_names != null;
    }

    public void setUser_namesIsSet(boolean value) {
      if (!value) {
        this.user_names = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case D_ID:
        if (value == null) {
          unsetD_id();
        } else {
          setD_id((String)value);
        }
        break;

      case GRP_NAME:
        if (value == null) {
          unsetGrp_name();
        } else {
          setGrp_name((String)value);
        }
        break;

      case USER_NAMES:
        if (value == null) {
          unsetUser_names();
        } else {
          setUser_names((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case D_ID:
        return getD_id();

      case GRP_NAME:
        return getGrp_name();

      case USER_NAMES:
        return getUser_names();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case D_ID:
        return isSetD_id();
      case GRP_NAME:
        return isSetGrp_name();
      case USER_NAMES:
        return isSetUser_names();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof debate_shortlist_guests_args)
        return this.equals((debate_shortlist_guests_args)that);
      return false;
    }

    public boolean equals(debate_shortlist_guests_args that) {
      if (that == null)
        return false;

      boolean this_present_d_id = true && this.isSetD_id();
      boolean that_present_d_id = true && that.isSetD_id();
      if (this_present_d_id || that_present_d_id) {
        if (!(this_present_d_id && that_present_d_id))
          return false;
        if (!this.d_id.equals(that.d_id))
          return false;
      }

      boolean this_present_grp_name = true && this.isSetGrp_name();
      boolean that_present_grp_name = true && that.isSetGrp_name();
      if (this_present_grp_name || that_present_grp_name) {
        if (!(this_present_grp_name && that_present_grp_name))
          return false;
        if (!this.grp_name.equals(that.grp_name))
          return false;
      }

      boolean this_present_user_names = true && this.isSetUser_names();
      boolean that_present_user_names = true && that.isSetUser_names();
      if (this_present_user_names || that_present_user_names) {
        if (!(this_present_user_names && that_present_user_names))
          return false;
        if (!this.user_names.equals(that.user_names))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(debate_shortlist_guests_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      debate_shortlist_guests_args typedOther = (debate_shortlist_guests_args)other;

      lastComparison = Boolean.valueOf(isSetD_id()).compareTo(typedOther.isSetD_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_id, typedOther.d_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGrp_name()).compareTo(typedOther.isSetGrp_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGrp_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grp_name, typedOther.grp_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_names()).compareTo(typedOther.isSetUser_names());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_names()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_names, typedOther.user_names);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("debate_shortlist_guests_args(");
      boolean first = true;

      sb.append("d_id:");
      if (this.d_id == null) {
        sb.append("null");
      } else {
        sb.append(this.d_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("grp_name:");
      if (this.grp_name == null) {
        sb.append("null");
      } else {
        sb.append(this.grp_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_names:");
      if (this.user_names == null) {
        sb.append("null");
      } else {
        sb.append(this.user_names);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class debate_shortlist_guests_argsStandardSchemeFactory implements SchemeFactory {
      public debate_shortlist_guests_argsStandardScheme getScheme() {
        return new debate_shortlist_guests_argsStandardScheme();
      }
    }

    private static class debate_shortlist_guests_argsStandardScheme extends StandardScheme<debate_shortlist_guests_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, debate_shortlist_guests_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // D_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d_id = iprot.readString();
                struct.setD_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GRP_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.grp_name = iprot.readString();
                struct.setGrp_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_names = iprot.readString();
                struct.setUser_namesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, debate_shortlist_guests_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.d_id != null) {
          oprot.writeFieldBegin(D_ID_FIELD_DESC);
          oprot.writeString(struct.d_id);
          oprot.writeFieldEnd();
        }
        if (struct.grp_name != null) {
          oprot.writeFieldBegin(GRP_NAME_FIELD_DESC);
          oprot.writeString(struct.grp_name);
          oprot.writeFieldEnd();
        }
        if (struct.user_names != null) {
          oprot.writeFieldBegin(USER_NAMES_FIELD_DESC);
          oprot.writeString(struct.user_names);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class debate_shortlist_guests_argsTupleSchemeFactory implements SchemeFactory {
      public debate_shortlist_guests_argsTupleScheme getScheme() {
        return new debate_shortlist_guests_argsTupleScheme();
      }
    }

    private static class debate_shortlist_guests_argsTupleScheme extends TupleScheme<debate_shortlist_guests_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, debate_shortlist_guests_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetD_id()) {
          optionals.set(0);
        }
        if (struct.isSetGrp_name()) {
          optionals.set(1);
        }
        if (struct.isSetUser_names()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetD_id()) {
          oprot.writeString(struct.d_id);
        }
        if (struct.isSetGrp_name()) {
          oprot.writeString(struct.grp_name);
        }
        if (struct.isSetUser_names()) {
          oprot.writeString(struct.user_names);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, debate_shortlist_guests_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.d_id = iprot.readString();
          struct.setD_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.grp_name = iprot.readString();
          struct.setGrp_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_names = iprot.readString();
          struct.setUser_namesIsSet(true);
        }
      }
    }

  }

  public static class debate_shortlist_guests_result implements org.apache.thrift.TBase<debate_shortlist_guests_result, debate_shortlist_guests_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("debate_shortlist_guests_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new debate_shortlist_guests_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new debate_shortlist_guests_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(debate_shortlist_guests_result.class, metaDataMap);
    }

    public debate_shortlist_guests_result() {
    }

    public debate_shortlist_guests_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public debate_shortlist_guests_result(debate_shortlist_guests_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public debate_shortlist_guests_result deepCopy() {
      return new debate_shortlist_guests_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public debate_shortlist_guests_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof debate_shortlist_guests_result)
        return this.equals((debate_shortlist_guests_result)that);
      return false;
    }

    public boolean equals(debate_shortlist_guests_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(debate_shortlist_guests_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      debate_shortlist_guests_result typedOther = (debate_shortlist_guests_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("debate_shortlist_guests_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class debate_shortlist_guests_resultStandardSchemeFactory implements SchemeFactory {
      public debate_shortlist_guests_resultStandardScheme getScheme() {
        return new debate_shortlist_guests_resultStandardScheme();
      }
    }

    private static class debate_shortlist_guests_resultStandardScheme extends StandardScheme<debate_shortlist_guests_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, debate_shortlist_guests_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, debate_shortlist_guests_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class debate_shortlist_guests_resultTupleSchemeFactory implements SchemeFactory {
      public debate_shortlist_guests_resultTupleScheme getScheme() {
        return new debate_shortlist_guests_resultTupleScheme();
      }
    }

    private static class debate_shortlist_guests_resultTupleScheme extends TupleScheme<debate_shortlist_guests_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, debate_shortlist_guests_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, debate_shortlist_guests_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class debate_change_moderator_args implements org.apache.thrift.TBase<debate_change_moderator_args, debate_change_moderator_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("debate_change_moderator_args");

    private static final org.apache.thrift.protocol.TField D_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("d_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField D_MODERATORS_FIELD_DESC = new org.apache.thrift.protocol.TField("d_moderators", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new debate_change_moderator_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new debate_change_moderator_argsTupleSchemeFactory());
    }

    public String d_id; // required
    public String d_moderators; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      D_ID((short)1, "d_id"),
      D_MODERATORS((short)2, "d_moderators"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // D_ID
            return D_ID;
          case 2: // D_MODERATORS
            return D_MODERATORS;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.D_ID, new org.apache.thrift.meta_data.FieldMetaData("d_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.D_MODERATORS, new org.apache.thrift.meta_data.FieldMetaData("d_moderators", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(debate_change_moderator_args.class, metaDataMap);
    }

    public debate_change_moderator_args() {
    }

    public debate_change_moderator_args(
      String d_id,
      String d_moderators,
      int time)
    {
      this();
      this.d_id = d_id;
      this.d_moderators = d_moderators;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public debate_change_moderator_args(debate_change_moderator_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetD_id()) {
        this.d_id = other.d_id;
      }
      if (other.isSetD_moderators()) {
        this.d_moderators = other.d_moderators;
      }
      this.time = other.time;
    }

    public debate_change_moderator_args deepCopy() {
      return new debate_change_moderator_args(this);
    }

    @Override
    public void clear() {
      this.d_id = null;
      this.d_moderators = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getD_id() {
      return this.d_id;
    }

    public debate_change_moderator_args setD_id(String d_id) {
      this.d_id = d_id;
      return this;
    }

    public void unsetD_id() {
      this.d_id = null;
    }

    /** Returns true if field d_id is set (has been assigned a value) and false otherwise */
    public boolean isSetD_id() {
      return this.d_id != null;
    }

    public void setD_idIsSet(boolean value) {
      if (!value) {
        this.d_id = null;
      }
    }

    public String getD_moderators() {
      return this.d_moderators;
    }

    public debate_change_moderator_args setD_moderators(String d_moderators) {
      this.d_moderators = d_moderators;
      return this;
    }

    public void unsetD_moderators() {
      this.d_moderators = null;
    }

    /** Returns true if field d_moderators is set (has been assigned a value) and false otherwise */
    public boolean isSetD_moderators() {
      return this.d_moderators != null;
    }

    public void setD_moderatorsIsSet(boolean value) {
      if (!value) {
        this.d_moderators = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public debate_change_moderator_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case D_ID:
        if (value == null) {
          unsetD_id();
        } else {
          setD_id((String)value);
        }
        break;

      case D_MODERATORS:
        if (value == null) {
          unsetD_moderators();
        } else {
          setD_moderators((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case D_ID:
        return getD_id();

      case D_MODERATORS:
        return getD_moderators();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case D_ID:
        return isSetD_id();
      case D_MODERATORS:
        return isSetD_moderators();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof debate_change_moderator_args)
        return this.equals((debate_change_moderator_args)that);
      return false;
    }

    public boolean equals(debate_change_moderator_args that) {
      if (that == null)
        return false;

      boolean this_present_d_id = true && this.isSetD_id();
      boolean that_present_d_id = true && that.isSetD_id();
      if (this_present_d_id || that_present_d_id) {
        if (!(this_present_d_id && that_present_d_id))
          return false;
        if (!this.d_id.equals(that.d_id))
          return false;
      }

      boolean this_present_d_moderators = true && this.isSetD_moderators();
      boolean that_present_d_moderators = true && that.isSetD_moderators();
      if (this_present_d_moderators || that_present_d_moderators) {
        if (!(this_present_d_moderators && that_present_d_moderators))
          return false;
        if (!this.d_moderators.equals(that.d_moderators))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(debate_change_moderator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      debate_change_moderator_args typedOther = (debate_change_moderator_args)other;

      lastComparison = Boolean.valueOf(isSetD_id()).compareTo(typedOther.isSetD_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_id, typedOther.d_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD_moderators()).compareTo(typedOther.isSetD_moderators());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD_moderators()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d_moderators, typedOther.d_moderators);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("debate_change_moderator_args(");
      boolean first = true;

      sb.append("d_id:");
      if (this.d_id == null) {
        sb.append("null");
      } else {
        sb.append(this.d_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d_moderators:");
      if (this.d_moderators == null) {
        sb.append("null");
      } else {
        sb.append(this.d_moderators);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class debate_change_moderator_argsStandardSchemeFactory implements SchemeFactory {
      public debate_change_moderator_argsStandardScheme getScheme() {
        return new debate_change_moderator_argsStandardScheme();
      }
    }

    private static class debate_change_moderator_argsStandardScheme extends StandardScheme<debate_change_moderator_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, debate_change_moderator_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // D_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d_id = iprot.readString();
                struct.setD_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // D_MODERATORS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d_moderators = iprot.readString();
                struct.setD_moderatorsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, debate_change_moderator_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.d_id != null) {
          oprot.writeFieldBegin(D_ID_FIELD_DESC);
          oprot.writeString(struct.d_id);
          oprot.writeFieldEnd();
        }
        if (struct.d_moderators != null) {
          oprot.writeFieldBegin(D_MODERATORS_FIELD_DESC);
          oprot.writeString(struct.d_moderators);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class debate_change_moderator_argsTupleSchemeFactory implements SchemeFactory {
      public debate_change_moderator_argsTupleScheme getScheme() {
        return new debate_change_moderator_argsTupleScheme();
      }
    }

    private static class debate_change_moderator_argsTupleScheme extends TupleScheme<debate_change_moderator_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, debate_change_moderator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetD_id()) {
          optionals.set(0);
        }
        if (struct.isSetD_moderators()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetD_id()) {
          oprot.writeString(struct.d_id);
        }
        if (struct.isSetD_moderators()) {
          oprot.writeString(struct.d_moderators);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, debate_change_moderator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.d_id = iprot.readString();
          struct.setD_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.d_moderators = iprot.readString();
          struct.setD_moderatorsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class debate_change_moderator_result implements org.apache.thrift.TBase<debate_change_moderator_result, debate_change_moderator_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("debate_change_moderator_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new debate_change_moderator_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new debate_change_moderator_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(debate_change_moderator_result.class, metaDataMap);
    }

    public debate_change_moderator_result() {
    }

    public debate_change_moderator_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public debate_change_moderator_result(debate_change_moderator_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public debate_change_moderator_result deepCopy() {
      return new debate_change_moderator_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public debate_change_moderator_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof debate_change_moderator_result)
        return this.equals((debate_change_moderator_result)that);
      return false;
    }

    public boolean equals(debate_change_moderator_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(debate_change_moderator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      debate_change_moderator_result typedOther = (debate_change_moderator_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("debate_change_moderator_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class debate_change_moderator_resultStandardSchemeFactory implements SchemeFactory {
      public debate_change_moderator_resultStandardScheme getScheme() {
        return new debate_change_moderator_resultStandardScheme();
      }
    }

    private static class debate_change_moderator_resultStandardScheme extends StandardScheme<debate_change_moderator_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, debate_change_moderator_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, debate_change_moderator_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class debate_change_moderator_resultTupleSchemeFactory implements SchemeFactory {
      public debate_change_moderator_resultTupleScheme getScheme() {
        return new debate_change_moderator_resultTupleScheme();
      }
    }

    private static class debate_change_moderator_resultTupleScheme extends TupleScheme<debate_change_moderator_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, debate_change_moderator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, debate_change_moderator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_townhall_args implements org.apache.thrift.TBase<create_townhall_args, create_townhall_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_townhall_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField T_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("t_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField T_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("t_title", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField T_TITLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("t_title_id", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField T_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("t_content", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField T_IMG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("t_img_url", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField T_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("t_date", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField T_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("t_duration", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField T_TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("t_time_created", org.apache.thrift.protocol.TType.I32, (short)9);
    private static final org.apache.thrift.protocol.TField T_CELEB_FIELD_DESC = new org.apache.thrift.protocol.TField("t_celeb", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField T_MODERATORS_FIELD_DESC = new org.apache.thrift.protocol.TField("t_moderators", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField T_SUBCAT_FIELD_DESC = new org.apache.thrift.protocol.TField("t_subcat", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField T_HASHTAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("t_hashtags", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField IS_EDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_edit", org.apache.thrift.protocol.TType.I32, (short)14);
    private static final org.apache.thrift.protocol.TField IS_CLOSED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_closed", org.apache.thrift.protocol.TType.I32, (short)15);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_townhall_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_townhall_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String t_id; // required
    public String t_title; // required
    public String t_title_id; // required
    public String t_content; // required
    public String t_img_url; // required
    public int t_date; // required
    public int t_duration; // required
    public int t_time_created; // required
    public String t_celeb; // required
    public String t_moderators; // required
    public String t_subcat; // required
    public String t_hashtags; // required
    public int is_edit; // required
    public int is_closed; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      T_ID((short)2, "t_id"),
      T_TITLE((short)3, "t_title"),
      T_TITLE_ID((short)4, "t_title_id"),
      T_CONTENT((short)5, "t_content"),
      T_IMG_URL((short)6, "t_img_url"),
      T_DATE((short)7, "t_date"),
      T_DURATION((short)8, "t_duration"),
      T_TIME_CREATED((short)9, "t_time_created"),
      T_CELEB((short)10, "t_celeb"),
      T_MODERATORS((short)11, "t_moderators"),
      T_SUBCAT((short)12, "t_subcat"),
      T_HASHTAGS((short)13, "t_hashtags"),
      IS_EDIT((short)14, "is_edit"),
      IS_CLOSED((short)15, "is_closed");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // T_ID
            return T_ID;
          case 3: // T_TITLE
            return T_TITLE;
          case 4: // T_TITLE_ID
            return T_TITLE_ID;
          case 5: // T_CONTENT
            return T_CONTENT;
          case 6: // T_IMG_URL
            return T_IMG_URL;
          case 7: // T_DATE
            return T_DATE;
          case 8: // T_DURATION
            return T_DURATION;
          case 9: // T_TIME_CREATED
            return T_TIME_CREATED;
          case 10: // T_CELEB
            return T_CELEB;
          case 11: // T_MODERATORS
            return T_MODERATORS;
          case 12: // T_SUBCAT
            return T_SUBCAT;
          case 13: // T_HASHTAGS
            return T_HASHTAGS;
          case 14: // IS_EDIT
            return IS_EDIT;
          case 15: // IS_CLOSED
            return IS_CLOSED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __T_DATE_ISSET_ID = 0;
    private static final int __T_DURATION_ISSET_ID = 1;
    private static final int __T_TIME_CREATED_ISSET_ID = 2;
    private static final int __IS_EDIT_ISSET_ID = 3;
    private static final int __IS_CLOSED_ISSET_ID = 4;
    private BitSet __isset_bit_vector = new BitSet(5);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.T_ID, new org.apache.thrift.meta_data.FieldMetaData("t_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.T_TITLE, new org.apache.thrift.meta_data.FieldMetaData("t_title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.T_TITLE_ID, new org.apache.thrift.meta_data.FieldMetaData("t_title_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.T_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("t_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.T_IMG_URL, new org.apache.thrift.meta_data.FieldMetaData("t_img_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.T_DATE, new org.apache.thrift.meta_data.FieldMetaData("t_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.T_DURATION, new org.apache.thrift.meta_data.FieldMetaData("t_duration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.T_TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("t_time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.T_CELEB, new org.apache.thrift.meta_data.FieldMetaData("t_celeb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.T_MODERATORS, new org.apache.thrift.meta_data.FieldMetaData("t_moderators", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.T_SUBCAT, new org.apache.thrift.meta_data.FieldMetaData("t_subcat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.T_HASHTAGS, new org.apache.thrift.meta_data.FieldMetaData("t_hashtags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_EDIT, new org.apache.thrift.meta_data.FieldMetaData("is_edit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_CLOSED, new org.apache.thrift.meta_data.FieldMetaData("is_closed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_townhall_args.class, metaDataMap);
    }

    public create_townhall_args() {
    }

    public create_townhall_args(
      String user_name,
      String t_id,
      String t_title,
      String t_title_id,
      String t_content,
      String t_img_url,
      int t_date,
      int t_duration,
      int t_time_created,
      String t_celeb,
      String t_moderators,
      String t_subcat,
      String t_hashtags,
      int is_edit,
      int is_closed)
    {
      this();
      this.user_name = user_name;
      this.t_id = t_id;
      this.t_title = t_title;
      this.t_title_id = t_title_id;
      this.t_content = t_content;
      this.t_img_url = t_img_url;
      this.t_date = t_date;
      setT_dateIsSet(true);
      this.t_duration = t_duration;
      setT_durationIsSet(true);
      this.t_time_created = t_time_created;
      setT_time_createdIsSet(true);
      this.t_celeb = t_celeb;
      this.t_moderators = t_moderators;
      this.t_subcat = t_subcat;
      this.t_hashtags = t_hashtags;
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      this.is_closed = is_closed;
      setIs_closedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_townhall_args(create_townhall_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetT_id()) {
        this.t_id = other.t_id;
      }
      if (other.isSetT_title()) {
        this.t_title = other.t_title;
      }
      if (other.isSetT_title_id()) {
        this.t_title_id = other.t_title_id;
      }
      if (other.isSetT_content()) {
        this.t_content = other.t_content;
      }
      if (other.isSetT_img_url()) {
        this.t_img_url = other.t_img_url;
      }
      this.t_date = other.t_date;
      this.t_duration = other.t_duration;
      this.t_time_created = other.t_time_created;
      if (other.isSetT_celeb()) {
        this.t_celeb = other.t_celeb;
      }
      if (other.isSetT_moderators()) {
        this.t_moderators = other.t_moderators;
      }
      if (other.isSetT_subcat()) {
        this.t_subcat = other.t_subcat;
      }
      if (other.isSetT_hashtags()) {
        this.t_hashtags = other.t_hashtags;
      }
      this.is_edit = other.is_edit;
      this.is_closed = other.is_closed;
    }

    public create_townhall_args deepCopy() {
      return new create_townhall_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.t_id = null;
      this.t_title = null;
      this.t_title_id = null;
      this.t_content = null;
      this.t_img_url = null;
      setT_dateIsSet(false);
      this.t_date = 0;
      setT_durationIsSet(false);
      this.t_duration = 0;
      setT_time_createdIsSet(false);
      this.t_time_created = 0;
      this.t_celeb = null;
      this.t_moderators = null;
      this.t_subcat = null;
      this.t_hashtags = null;
      setIs_editIsSet(false);
      this.is_edit = 0;
      setIs_closedIsSet(false);
      this.is_closed = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public create_townhall_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getT_id() {
      return this.t_id;
    }

    public create_townhall_args setT_id(String t_id) {
      this.t_id = t_id;
      return this;
    }

    public void unsetT_id() {
      this.t_id = null;
    }

    /** Returns true if field t_id is set (has been assigned a value) and false otherwise */
    public boolean isSetT_id() {
      return this.t_id != null;
    }

    public void setT_idIsSet(boolean value) {
      if (!value) {
        this.t_id = null;
      }
    }

    public String getT_title() {
      return this.t_title;
    }

    public create_townhall_args setT_title(String t_title) {
      this.t_title = t_title;
      return this;
    }

    public void unsetT_title() {
      this.t_title = null;
    }

    /** Returns true if field t_title is set (has been assigned a value) and false otherwise */
    public boolean isSetT_title() {
      return this.t_title != null;
    }

    public void setT_titleIsSet(boolean value) {
      if (!value) {
        this.t_title = null;
      }
    }

    public String getT_title_id() {
      return this.t_title_id;
    }

    public create_townhall_args setT_title_id(String t_title_id) {
      this.t_title_id = t_title_id;
      return this;
    }

    public void unsetT_title_id() {
      this.t_title_id = null;
    }

    /** Returns true if field t_title_id is set (has been assigned a value) and false otherwise */
    public boolean isSetT_title_id() {
      return this.t_title_id != null;
    }

    public void setT_title_idIsSet(boolean value) {
      if (!value) {
        this.t_title_id = null;
      }
    }

    public String getT_content() {
      return this.t_content;
    }

    public create_townhall_args setT_content(String t_content) {
      this.t_content = t_content;
      return this;
    }

    public void unsetT_content() {
      this.t_content = null;
    }

    /** Returns true if field t_content is set (has been assigned a value) and false otherwise */
    public boolean isSetT_content() {
      return this.t_content != null;
    }

    public void setT_contentIsSet(boolean value) {
      if (!value) {
        this.t_content = null;
      }
    }

    public String getT_img_url() {
      return this.t_img_url;
    }

    public create_townhall_args setT_img_url(String t_img_url) {
      this.t_img_url = t_img_url;
      return this;
    }

    public void unsetT_img_url() {
      this.t_img_url = null;
    }

    /** Returns true if field t_img_url is set (has been assigned a value) and false otherwise */
    public boolean isSetT_img_url() {
      return this.t_img_url != null;
    }

    public void setT_img_urlIsSet(boolean value) {
      if (!value) {
        this.t_img_url = null;
      }
    }

    public int getT_date() {
      return this.t_date;
    }

    public create_townhall_args setT_date(int t_date) {
      this.t_date = t_date;
      setT_dateIsSet(true);
      return this;
    }

    public void unsetT_date() {
      __isset_bit_vector.clear(__T_DATE_ISSET_ID);
    }

    /** Returns true if field t_date is set (has been assigned a value) and false otherwise */
    public boolean isSetT_date() {
      return __isset_bit_vector.get(__T_DATE_ISSET_ID);
    }

    public void setT_dateIsSet(boolean value) {
      __isset_bit_vector.set(__T_DATE_ISSET_ID, value);
    }

    public int getT_duration() {
      return this.t_duration;
    }

    public create_townhall_args setT_duration(int t_duration) {
      this.t_duration = t_duration;
      setT_durationIsSet(true);
      return this;
    }

    public void unsetT_duration() {
      __isset_bit_vector.clear(__T_DURATION_ISSET_ID);
    }

    /** Returns true if field t_duration is set (has been assigned a value) and false otherwise */
    public boolean isSetT_duration() {
      return __isset_bit_vector.get(__T_DURATION_ISSET_ID);
    }

    public void setT_durationIsSet(boolean value) {
      __isset_bit_vector.set(__T_DURATION_ISSET_ID, value);
    }

    public int getT_time_created() {
      return this.t_time_created;
    }

    public create_townhall_args setT_time_created(int t_time_created) {
      this.t_time_created = t_time_created;
      setT_time_createdIsSet(true);
      return this;
    }

    public void unsetT_time_created() {
      __isset_bit_vector.clear(__T_TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field t_time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetT_time_created() {
      return __isset_bit_vector.get(__T_TIME_CREATED_ISSET_ID);
    }

    public void setT_time_createdIsSet(boolean value) {
      __isset_bit_vector.set(__T_TIME_CREATED_ISSET_ID, value);
    }

    public String getT_celeb() {
      return this.t_celeb;
    }

    public create_townhall_args setT_celeb(String t_celeb) {
      this.t_celeb = t_celeb;
      return this;
    }

    public void unsetT_celeb() {
      this.t_celeb = null;
    }

    /** Returns true if field t_celeb is set (has been assigned a value) and false otherwise */
    public boolean isSetT_celeb() {
      return this.t_celeb != null;
    }

    public void setT_celebIsSet(boolean value) {
      if (!value) {
        this.t_celeb = null;
      }
    }

    public String getT_moderators() {
      return this.t_moderators;
    }

    public create_townhall_args setT_moderators(String t_moderators) {
      this.t_moderators = t_moderators;
      return this;
    }

    public void unsetT_moderators() {
      this.t_moderators = null;
    }

    /** Returns true if field t_moderators is set (has been assigned a value) and false otherwise */
    public boolean isSetT_moderators() {
      return this.t_moderators != null;
    }

    public void setT_moderatorsIsSet(boolean value) {
      if (!value) {
        this.t_moderators = null;
      }
    }

    public String getT_subcat() {
      return this.t_subcat;
    }

    public create_townhall_args setT_subcat(String t_subcat) {
      this.t_subcat = t_subcat;
      return this;
    }

    public void unsetT_subcat() {
      this.t_subcat = null;
    }

    /** Returns true if field t_subcat is set (has been assigned a value) and false otherwise */
    public boolean isSetT_subcat() {
      return this.t_subcat != null;
    }

    public void setT_subcatIsSet(boolean value) {
      if (!value) {
        this.t_subcat = null;
      }
    }

    public String getT_hashtags() {
      return this.t_hashtags;
    }

    public create_townhall_args setT_hashtags(String t_hashtags) {
      this.t_hashtags = t_hashtags;
      return this;
    }

    public void unsetT_hashtags() {
      this.t_hashtags = null;
    }

    /** Returns true if field t_hashtags is set (has been assigned a value) and false otherwise */
    public boolean isSetT_hashtags() {
      return this.t_hashtags != null;
    }

    public void setT_hashtagsIsSet(boolean value) {
      if (!value) {
        this.t_hashtags = null;
      }
    }

    public int getIs_edit() {
      return this.is_edit;
    }

    public create_townhall_args setIs_edit(int is_edit) {
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      return this;
    }

    public void unsetIs_edit() {
      __isset_bit_vector.clear(__IS_EDIT_ISSET_ID);
    }

    /** Returns true if field is_edit is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_edit() {
      return __isset_bit_vector.get(__IS_EDIT_ISSET_ID);
    }

    public void setIs_editIsSet(boolean value) {
      __isset_bit_vector.set(__IS_EDIT_ISSET_ID, value);
    }

    public int getIs_closed() {
      return this.is_closed;
    }

    public create_townhall_args setIs_closed(int is_closed) {
      this.is_closed = is_closed;
      setIs_closedIsSet(true);
      return this;
    }

    public void unsetIs_closed() {
      __isset_bit_vector.clear(__IS_CLOSED_ISSET_ID);
    }

    /** Returns true if field is_closed is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_closed() {
      return __isset_bit_vector.get(__IS_CLOSED_ISSET_ID);
    }

    public void setIs_closedIsSet(boolean value) {
      __isset_bit_vector.set(__IS_CLOSED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case T_ID:
        if (value == null) {
          unsetT_id();
        } else {
          setT_id((String)value);
        }
        break;

      case T_TITLE:
        if (value == null) {
          unsetT_title();
        } else {
          setT_title((String)value);
        }
        break;

      case T_TITLE_ID:
        if (value == null) {
          unsetT_title_id();
        } else {
          setT_title_id((String)value);
        }
        break;

      case T_CONTENT:
        if (value == null) {
          unsetT_content();
        } else {
          setT_content((String)value);
        }
        break;

      case T_IMG_URL:
        if (value == null) {
          unsetT_img_url();
        } else {
          setT_img_url((String)value);
        }
        break;

      case T_DATE:
        if (value == null) {
          unsetT_date();
        } else {
          setT_date((Integer)value);
        }
        break;

      case T_DURATION:
        if (value == null) {
          unsetT_duration();
        } else {
          setT_duration((Integer)value);
        }
        break;

      case T_TIME_CREATED:
        if (value == null) {
          unsetT_time_created();
        } else {
          setT_time_created((Integer)value);
        }
        break;

      case T_CELEB:
        if (value == null) {
          unsetT_celeb();
        } else {
          setT_celeb((String)value);
        }
        break;

      case T_MODERATORS:
        if (value == null) {
          unsetT_moderators();
        } else {
          setT_moderators((String)value);
        }
        break;

      case T_SUBCAT:
        if (value == null) {
          unsetT_subcat();
        } else {
          setT_subcat((String)value);
        }
        break;

      case T_HASHTAGS:
        if (value == null) {
          unsetT_hashtags();
        } else {
          setT_hashtags((String)value);
        }
        break;

      case IS_EDIT:
        if (value == null) {
          unsetIs_edit();
        } else {
          setIs_edit((Integer)value);
        }
        break;

      case IS_CLOSED:
        if (value == null) {
          unsetIs_closed();
        } else {
          setIs_closed((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case T_ID:
        return getT_id();

      case T_TITLE:
        return getT_title();

      case T_TITLE_ID:
        return getT_title_id();

      case T_CONTENT:
        return getT_content();

      case T_IMG_URL:
        return getT_img_url();

      case T_DATE:
        return Integer.valueOf(getT_date());

      case T_DURATION:
        return Integer.valueOf(getT_duration());

      case T_TIME_CREATED:
        return Integer.valueOf(getT_time_created());

      case T_CELEB:
        return getT_celeb();

      case T_MODERATORS:
        return getT_moderators();

      case T_SUBCAT:
        return getT_subcat();

      case T_HASHTAGS:
        return getT_hashtags();

      case IS_EDIT:
        return Integer.valueOf(getIs_edit());

      case IS_CLOSED:
        return Integer.valueOf(getIs_closed());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case T_ID:
        return isSetT_id();
      case T_TITLE:
        return isSetT_title();
      case T_TITLE_ID:
        return isSetT_title_id();
      case T_CONTENT:
        return isSetT_content();
      case T_IMG_URL:
        return isSetT_img_url();
      case T_DATE:
        return isSetT_date();
      case T_DURATION:
        return isSetT_duration();
      case T_TIME_CREATED:
        return isSetT_time_created();
      case T_CELEB:
        return isSetT_celeb();
      case T_MODERATORS:
        return isSetT_moderators();
      case T_SUBCAT:
        return isSetT_subcat();
      case T_HASHTAGS:
        return isSetT_hashtags();
      case IS_EDIT:
        return isSetIs_edit();
      case IS_CLOSED:
        return isSetIs_closed();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_townhall_args)
        return this.equals((create_townhall_args)that);
      return false;
    }

    public boolean equals(create_townhall_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_t_id = true && this.isSetT_id();
      boolean that_present_t_id = true && that.isSetT_id();
      if (this_present_t_id || that_present_t_id) {
        if (!(this_present_t_id && that_present_t_id))
          return false;
        if (!this.t_id.equals(that.t_id))
          return false;
      }

      boolean this_present_t_title = true && this.isSetT_title();
      boolean that_present_t_title = true && that.isSetT_title();
      if (this_present_t_title || that_present_t_title) {
        if (!(this_present_t_title && that_present_t_title))
          return false;
        if (!this.t_title.equals(that.t_title))
          return false;
      }

      boolean this_present_t_title_id = true && this.isSetT_title_id();
      boolean that_present_t_title_id = true && that.isSetT_title_id();
      if (this_present_t_title_id || that_present_t_title_id) {
        if (!(this_present_t_title_id && that_present_t_title_id))
          return false;
        if (!this.t_title_id.equals(that.t_title_id))
          return false;
      }

      boolean this_present_t_content = true && this.isSetT_content();
      boolean that_present_t_content = true && that.isSetT_content();
      if (this_present_t_content || that_present_t_content) {
        if (!(this_present_t_content && that_present_t_content))
          return false;
        if (!this.t_content.equals(that.t_content))
          return false;
      }

      boolean this_present_t_img_url = true && this.isSetT_img_url();
      boolean that_present_t_img_url = true && that.isSetT_img_url();
      if (this_present_t_img_url || that_present_t_img_url) {
        if (!(this_present_t_img_url && that_present_t_img_url))
          return false;
        if (!this.t_img_url.equals(that.t_img_url))
          return false;
      }

      boolean this_present_t_date = true;
      boolean that_present_t_date = true;
      if (this_present_t_date || that_present_t_date) {
        if (!(this_present_t_date && that_present_t_date))
          return false;
        if (this.t_date != that.t_date)
          return false;
      }

      boolean this_present_t_duration = true;
      boolean that_present_t_duration = true;
      if (this_present_t_duration || that_present_t_duration) {
        if (!(this_present_t_duration && that_present_t_duration))
          return false;
        if (this.t_duration != that.t_duration)
          return false;
      }

      boolean this_present_t_time_created = true;
      boolean that_present_t_time_created = true;
      if (this_present_t_time_created || that_present_t_time_created) {
        if (!(this_present_t_time_created && that_present_t_time_created))
          return false;
        if (this.t_time_created != that.t_time_created)
          return false;
      }

      boolean this_present_t_celeb = true && this.isSetT_celeb();
      boolean that_present_t_celeb = true && that.isSetT_celeb();
      if (this_present_t_celeb || that_present_t_celeb) {
        if (!(this_present_t_celeb && that_present_t_celeb))
          return false;
        if (!this.t_celeb.equals(that.t_celeb))
          return false;
      }

      boolean this_present_t_moderators = true && this.isSetT_moderators();
      boolean that_present_t_moderators = true && that.isSetT_moderators();
      if (this_present_t_moderators || that_present_t_moderators) {
        if (!(this_present_t_moderators && that_present_t_moderators))
          return false;
        if (!this.t_moderators.equals(that.t_moderators))
          return false;
      }

      boolean this_present_t_subcat = true && this.isSetT_subcat();
      boolean that_present_t_subcat = true && that.isSetT_subcat();
      if (this_present_t_subcat || that_present_t_subcat) {
        if (!(this_present_t_subcat && that_present_t_subcat))
          return false;
        if (!this.t_subcat.equals(that.t_subcat))
          return false;
      }

      boolean this_present_t_hashtags = true && this.isSetT_hashtags();
      boolean that_present_t_hashtags = true && that.isSetT_hashtags();
      if (this_present_t_hashtags || that_present_t_hashtags) {
        if (!(this_present_t_hashtags && that_present_t_hashtags))
          return false;
        if (!this.t_hashtags.equals(that.t_hashtags))
          return false;
      }

      boolean this_present_is_edit = true;
      boolean that_present_is_edit = true;
      if (this_present_is_edit || that_present_is_edit) {
        if (!(this_present_is_edit && that_present_is_edit))
          return false;
        if (this.is_edit != that.is_edit)
          return false;
      }

      boolean this_present_is_closed = true;
      boolean that_present_is_closed = true;
      if (this_present_is_closed || that_present_is_closed) {
        if (!(this_present_is_closed && that_present_is_closed))
          return false;
        if (this.is_closed != that.is_closed)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_townhall_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_townhall_args typedOther = (create_townhall_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetT_id()).compareTo(typedOther.isSetT_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_id, typedOther.t_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetT_title()).compareTo(typedOther.isSetT_title());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_title()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_title, typedOther.t_title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetT_title_id()).compareTo(typedOther.isSetT_title_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_title_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_title_id, typedOther.t_title_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetT_content()).compareTo(typedOther.isSetT_content());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_content()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_content, typedOther.t_content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetT_img_url()).compareTo(typedOther.isSetT_img_url());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_img_url()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_img_url, typedOther.t_img_url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetT_date()).compareTo(typedOther.isSetT_date());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_date()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_date, typedOther.t_date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetT_duration()).compareTo(typedOther.isSetT_duration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_duration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_duration, typedOther.t_duration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetT_time_created()).compareTo(typedOther.isSetT_time_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_time_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_time_created, typedOther.t_time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetT_celeb()).compareTo(typedOther.isSetT_celeb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_celeb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_celeb, typedOther.t_celeb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetT_moderators()).compareTo(typedOther.isSetT_moderators());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_moderators()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_moderators, typedOther.t_moderators);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetT_subcat()).compareTo(typedOther.isSetT_subcat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_subcat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_subcat, typedOther.t_subcat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetT_hashtags()).compareTo(typedOther.isSetT_hashtags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_hashtags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_hashtags, typedOther.t_hashtags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_edit()).compareTo(typedOther.isSetIs_edit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_edit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_edit, typedOther.is_edit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_closed()).compareTo(typedOther.isSetIs_closed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_closed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_closed, typedOther.is_closed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_townhall_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("t_id:");
      if (this.t_id == null) {
        sb.append("null");
      } else {
        sb.append(this.t_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("t_title:");
      if (this.t_title == null) {
        sb.append("null");
      } else {
        sb.append(this.t_title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("t_title_id:");
      if (this.t_title_id == null) {
        sb.append("null");
      } else {
        sb.append(this.t_title_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("t_content:");
      if (this.t_content == null) {
        sb.append("null");
      } else {
        sb.append(this.t_content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("t_img_url:");
      if (this.t_img_url == null) {
        sb.append("null");
      } else {
        sb.append(this.t_img_url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("t_date:");
      sb.append(this.t_date);
      first = false;
      if (!first) sb.append(", ");
      sb.append("t_duration:");
      sb.append(this.t_duration);
      first = false;
      if (!first) sb.append(", ");
      sb.append("t_time_created:");
      sb.append(this.t_time_created);
      first = false;
      if (!first) sb.append(", ");
      sb.append("t_celeb:");
      if (this.t_celeb == null) {
        sb.append("null");
      } else {
        sb.append(this.t_celeb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("t_moderators:");
      if (this.t_moderators == null) {
        sb.append("null");
      } else {
        sb.append(this.t_moderators);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("t_subcat:");
      if (this.t_subcat == null) {
        sb.append("null");
      } else {
        sb.append(this.t_subcat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("t_hashtags:");
      if (this.t_hashtags == null) {
        sb.append("null");
      } else {
        sb.append(this.t_hashtags);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_edit:");
      sb.append(this.is_edit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_closed:");
      sb.append(this.is_closed);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_townhall_argsStandardSchemeFactory implements SchemeFactory {
      public create_townhall_argsStandardScheme getScheme() {
        return new create_townhall_argsStandardScheme();
      }
    }

    private static class create_townhall_argsStandardScheme extends StandardScheme<create_townhall_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_townhall_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.t_id = iprot.readString();
                struct.setT_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.t_title = iprot.readString();
                struct.setT_titleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // T_TITLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.t_title_id = iprot.readString();
                struct.setT_title_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // T_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.t_content = iprot.readString();
                struct.setT_contentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // T_IMG_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.t_img_url = iprot.readString();
                struct.setT_img_urlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // T_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.t_date = iprot.readI32();
                struct.setT_dateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // T_DURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.t_duration = iprot.readI32();
                struct.setT_durationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // T_TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.t_time_created = iprot.readI32();
                struct.setT_time_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // T_CELEB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.t_celeb = iprot.readString();
                struct.setT_celebIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // T_MODERATORS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.t_moderators = iprot.readString();
                struct.setT_moderatorsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // T_SUBCAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.t_subcat = iprot.readString();
                struct.setT_subcatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // T_HASHTAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.t_hashtags = iprot.readString();
                struct.setT_hashtagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // IS_EDIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_edit = iprot.readI32();
                struct.setIs_editIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // IS_CLOSED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_closed = iprot.readI32();
                struct.setIs_closedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_townhall_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.t_id != null) {
          oprot.writeFieldBegin(T_ID_FIELD_DESC);
          oprot.writeString(struct.t_id);
          oprot.writeFieldEnd();
        }
        if (struct.t_title != null) {
          oprot.writeFieldBegin(T_TITLE_FIELD_DESC);
          oprot.writeString(struct.t_title);
          oprot.writeFieldEnd();
        }
        if (struct.t_title_id != null) {
          oprot.writeFieldBegin(T_TITLE_ID_FIELD_DESC);
          oprot.writeString(struct.t_title_id);
          oprot.writeFieldEnd();
        }
        if (struct.t_content != null) {
          oprot.writeFieldBegin(T_CONTENT_FIELD_DESC);
          oprot.writeString(struct.t_content);
          oprot.writeFieldEnd();
        }
        if (struct.t_img_url != null) {
          oprot.writeFieldBegin(T_IMG_URL_FIELD_DESC);
          oprot.writeString(struct.t_img_url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(T_DATE_FIELD_DESC);
        oprot.writeI32(struct.t_date);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(T_DURATION_FIELD_DESC);
        oprot.writeI32(struct.t_duration);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(T_TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.t_time_created);
        oprot.writeFieldEnd();
        if (struct.t_celeb != null) {
          oprot.writeFieldBegin(T_CELEB_FIELD_DESC);
          oprot.writeString(struct.t_celeb);
          oprot.writeFieldEnd();
        }
        if (struct.t_moderators != null) {
          oprot.writeFieldBegin(T_MODERATORS_FIELD_DESC);
          oprot.writeString(struct.t_moderators);
          oprot.writeFieldEnd();
        }
        if (struct.t_subcat != null) {
          oprot.writeFieldBegin(T_SUBCAT_FIELD_DESC);
          oprot.writeString(struct.t_subcat);
          oprot.writeFieldEnd();
        }
        if (struct.t_hashtags != null) {
          oprot.writeFieldBegin(T_HASHTAGS_FIELD_DESC);
          oprot.writeString(struct.t_hashtags);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_EDIT_FIELD_DESC);
        oprot.writeI32(struct.is_edit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_CLOSED_FIELD_DESC);
        oprot.writeI32(struct.is_closed);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_townhall_argsTupleSchemeFactory implements SchemeFactory {
      public create_townhall_argsTupleScheme getScheme() {
        return new create_townhall_argsTupleScheme();
      }
    }

    private static class create_townhall_argsTupleScheme extends TupleScheme<create_townhall_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_townhall_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetT_id()) {
          optionals.set(1);
        }
        if (struct.isSetT_title()) {
          optionals.set(2);
        }
        if (struct.isSetT_title_id()) {
          optionals.set(3);
        }
        if (struct.isSetT_content()) {
          optionals.set(4);
        }
        if (struct.isSetT_img_url()) {
          optionals.set(5);
        }
        if (struct.isSetT_date()) {
          optionals.set(6);
        }
        if (struct.isSetT_duration()) {
          optionals.set(7);
        }
        if (struct.isSetT_time_created()) {
          optionals.set(8);
        }
        if (struct.isSetT_celeb()) {
          optionals.set(9);
        }
        if (struct.isSetT_moderators()) {
          optionals.set(10);
        }
        if (struct.isSetT_subcat()) {
          optionals.set(11);
        }
        if (struct.isSetT_hashtags()) {
          optionals.set(12);
        }
        if (struct.isSetIs_edit()) {
          optionals.set(13);
        }
        if (struct.isSetIs_closed()) {
          optionals.set(14);
        }
        oprot.writeBitSet(optionals, 15);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetT_id()) {
          oprot.writeString(struct.t_id);
        }
        if (struct.isSetT_title()) {
          oprot.writeString(struct.t_title);
        }
        if (struct.isSetT_title_id()) {
          oprot.writeString(struct.t_title_id);
        }
        if (struct.isSetT_content()) {
          oprot.writeString(struct.t_content);
        }
        if (struct.isSetT_img_url()) {
          oprot.writeString(struct.t_img_url);
        }
        if (struct.isSetT_date()) {
          oprot.writeI32(struct.t_date);
        }
        if (struct.isSetT_duration()) {
          oprot.writeI32(struct.t_duration);
        }
        if (struct.isSetT_time_created()) {
          oprot.writeI32(struct.t_time_created);
        }
        if (struct.isSetT_celeb()) {
          oprot.writeString(struct.t_celeb);
        }
        if (struct.isSetT_moderators()) {
          oprot.writeString(struct.t_moderators);
        }
        if (struct.isSetT_subcat()) {
          oprot.writeString(struct.t_subcat);
        }
        if (struct.isSetT_hashtags()) {
          oprot.writeString(struct.t_hashtags);
        }
        if (struct.isSetIs_edit()) {
          oprot.writeI32(struct.is_edit);
        }
        if (struct.isSetIs_closed()) {
          oprot.writeI32(struct.is_closed);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_townhall_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(15);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.t_id = iprot.readString();
          struct.setT_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.t_title = iprot.readString();
          struct.setT_titleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.t_title_id = iprot.readString();
          struct.setT_title_idIsSet(true);
        }
        if (incoming.get(4)) {
          struct.t_content = iprot.readString();
          struct.setT_contentIsSet(true);
        }
        if (incoming.get(5)) {
          struct.t_img_url = iprot.readString();
          struct.setT_img_urlIsSet(true);
        }
        if (incoming.get(6)) {
          struct.t_date = iprot.readI32();
          struct.setT_dateIsSet(true);
        }
        if (incoming.get(7)) {
          struct.t_duration = iprot.readI32();
          struct.setT_durationIsSet(true);
        }
        if (incoming.get(8)) {
          struct.t_time_created = iprot.readI32();
          struct.setT_time_createdIsSet(true);
        }
        if (incoming.get(9)) {
          struct.t_celeb = iprot.readString();
          struct.setT_celebIsSet(true);
        }
        if (incoming.get(10)) {
          struct.t_moderators = iprot.readString();
          struct.setT_moderatorsIsSet(true);
        }
        if (incoming.get(11)) {
          struct.t_subcat = iprot.readString();
          struct.setT_subcatIsSet(true);
        }
        if (incoming.get(12)) {
          struct.t_hashtags = iprot.readString();
          struct.setT_hashtagsIsSet(true);
        }
        if (incoming.get(13)) {
          struct.is_edit = iprot.readI32();
          struct.setIs_editIsSet(true);
        }
        if (incoming.get(14)) {
          struct.is_closed = iprot.readI32();
          struct.setIs_closedIsSet(true);
        }
      }
    }

  }

  public static class create_townhall_result implements org.apache.thrift.TBase<create_townhall_result, create_townhall_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_townhall_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_townhall_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_townhall_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_townhall_result.class, metaDataMap);
    }

    public create_townhall_result() {
    }

    public create_townhall_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_townhall_result(create_townhall_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public create_townhall_result deepCopy() {
      return new create_townhall_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public create_townhall_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_townhall_result)
        return this.equals((create_townhall_result)that);
      return false;
    }

    public boolean equals(create_townhall_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_townhall_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_townhall_result typedOther = (create_townhall_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_townhall_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_townhall_resultStandardSchemeFactory implements SchemeFactory {
      public create_townhall_resultStandardScheme getScheme() {
        return new create_townhall_resultStandardScheme();
      }
    }

    private static class create_townhall_resultStandardScheme extends StandardScheme<create_townhall_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_townhall_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_townhall_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_townhall_resultTupleSchemeFactory implements SchemeFactory {
      public create_townhall_resultTupleScheme getScheme() {
        return new create_townhall_resultTupleScheme();
      }
    }

    private static class create_townhall_resultTupleScheme extends TupleScheme<create_townhall_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_townhall_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_townhall_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class townhall_action_args implements org.apache.thrift.TBase<townhall_action_args, townhall_action_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("townhall_action_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField T_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("t_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("action_type", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField QTN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("qtn_id", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField QTN_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("qtn_content", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new townhall_action_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new townhall_action_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String t_id; // required
    public String action_type; // required
    public String qtn_id; // required
    public String qtn_content; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      T_ID((short)2, "t_id"),
      ACTION_TYPE((short)3, "action_type"),
      QTN_ID((short)4, "qtn_id"),
      QTN_CONTENT((short)5, "qtn_content"),
      TIME((short)6, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // T_ID
            return T_ID;
          case 3: // ACTION_TYPE
            return ACTION_TYPE;
          case 4: // QTN_ID
            return QTN_ID;
          case 5: // QTN_CONTENT
            return QTN_CONTENT;
          case 6: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.T_ID, new org.apache.thrift.meta_data.FieldMetaData("t_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("action_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QTN_ID, new org.apache.thrift.meta_data.FieldMetaData("qtn_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QTN_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("qtn_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(townhall_action_args.class, metaDataMap);
    }

    public townhall_action_args() {
    }

    public townhall_action_args(
      String user_name,
      String t_id,
      String action_type,
      String qtn_id,
      String qtn_content,
      int time)
    {
      this();
      this.user_name = user_name;
      this.t_id = t_id;
      this.action_type = action_type;
      this.qtn_id = qtn_id;
      this.qtn_content = qtn_content;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public townhall_action_args(townhall_action_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetT_id()) {
        this.t_id = other.t_id;
      }
      if (other.isSetAction_type()) {
        this.action_type = other.action_type;
      }
      if (other.isSetQtn_id()) {
        this.qtn_id = other.qtn_id;
      }
      if (other.isSetQtn_content()) {
        this.qtn_content = other.qtn_content;
      }
      this.time = other.time;
    }

    public townhall_action_args deepCopy() {
      return new townhall_action_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.t_id = null;
      this.action_type = null;
      this.qtn_id = null;
      this.qtn_content = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public townhall_action_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getT_id() {
      return this.t_id;
    }

    public townhall_action_args setT_id(String t_id) {
      this.t_id = t_id;
      return this;
    }

    public void unsetT_id() {
      this.t_id = null;
    }

    /** Returns true if field t_id is set (has been assigned a value) and false otherwise */
    public boolean isSetT_id() {
      return this.t_id != null;
    }

    public void setT_idIsSet(boolean value) {
      if (!value) {
        this.t_id = null;
      }
    }

    public String getAction_type() {
      return this.action_type;
    }

    public townhall_action_args setAction_type(String action_type) {
      this.action_type = action_type;
      return this;
    }

    public void unsetAction_type() {
      this.action_type = null;
    }

    /** Returns true if field action_type is set (has been assigned a value) and false otherwise */
    public boolean isSetAction_type() {
      return this.action_type != null;
    }

    public void setAction_typeIsSet(boolean value) {
      if (!value) {
        this.action_type = null;
      }
    }

    public String getQtn_id() {
      return this.qtn_id;
    }

    public townhall_action_args setQtn_id(String qtn_id) {
      this.qtn_id = qtn_id;
      return this;
    }

    public void unsetQtn_id() {
      this.qtn_id = null;
    }

    /** Returns true if field qtn_id is set (has been assigned a value) and false otherwise */
    public boolean isSetQtn_id() {
      return this.qtn_id != null;
    }

    public void setQtn_idIsSet(boolean value) {
      if (!value) {
        this.qtn_id = null;
      }
    }

    public String getQtn_content() {
      return this.qtn_content;
    }

    public townhall_action_args setQtn_content(String qtn_content) {
      this.qtn_content = qtn_content;
      return this;
    }

    public void unsetQtn_content() {
      this.qtn_content = null;
    }

    /** Returns true if field qtn_content is set (has been assigned a value) and false otherwise */
    public boolean isSetQtn_content() {
      return this.qtn_content != null;
    }

    public void setQtn_contentIsSet(boolean value) {
      if (!value) {
        this.qtn_content = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public townhall_action_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case T_ID:
        if (value == null) {
          unsetT_id();
        } else {
          setT_id((String)value);
        }
        break;

      case ACTION_TYPE:
        if (value == null) {
          unsetAction_type();
        } else {
          setAction_type((String)value);
        }
        break;

      case QTN_ID:
        if (value == null) {
          unsetQtn_id();
        } else {
          setQtn_id((String)value);
        }
        break;

      case QTN_CONTENT:
        if (value == null) {
          unsetQtn_content();
        } else {
          setQtn_content((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case T_ID:
        return getT_id();

      case ACTION_TYPE:
        return getAction_type();

      case QTN_ID:
        return getQtn_id();

      case QTN_CONTENT:
        return getQtn_content();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case T_ID:
        return isSetT_id();
      case ACTION_TYPE:
        return isSetAction_type();
      case QTN_ID:
        return isSetQtn_id();
      case QTN_CONTENT:
        return isSetQtn_content();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof townhall_action_args)
        return this.equals((townhall_action_args)that);
      return false;
    }

    public boolean equals(townhall_action_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_t_id = true && this.isSetT_id();
      boolean that_present_t_id = true && that.isSetT_id();
      if (this_present_t_id || that_present_t_id) {
        if (!(this_present_t_id && that_present_t_id))
          return false;
        if (!this.t_id.equals(that.t_id))
          return false;
      }

      boolean this_present_action_type = true && this.isSetAction_type();
      boolean that_present_action_type = true && that.isSetAction_type();
      if (this_present_action_type || that_present_action_type) {
        if (!(this_present_action_type && that_present_action_type))
          return false;
        if (!this.action_type.equals(that.action_type))
          return false;
      }

      boolean this_present_qtn_id = true && this.isSetQtn_id();
      boolean that_present_qtn_id = true && that.isSetQtn_id();
      if (this_present_qtn_id || that_present_qtn_id) {
        if (!(this_present_qtn_id && that_present_qtn_id))
          return false;
        if (!this.qtn_id.equals(that.qtn_id))
          return false;
      }

      boolean this_present_qtn_content = true && this.isSetQtn_content();
      boolean that_present_qtn_content = true && that.isSetQtn_content();
      if (this_present_qtn_content || that_present_qtn_content) {
        if (!(this_present_qtn_content && that_present_qtn_content))
          return false;
        if (!this.qtn_content.equals(that.qtn_content))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(townhall_action_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      townhall_action_args typedOther = (townhall_action_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetT_id()).compareTo(typedOther.isSetT_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_id, typedOther.t_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction_type()).compareTo(typedOther.isSetAction_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_type, typedOther.action_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQtn_id()).compareTo(typedOther.isSetQtn_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQtn_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qtn_id, typedOther.qtn_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQtn_content()).compareTo(typedOther.isSetQtn_content());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQtn_content()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qtn_content, typedOther.qtn_content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("townhall_action_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("t_id:");
      if (this.t_id == null) {
        sb.append("null");
      } else {
        sb.append(this.t_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action_type:");
      if (this.action_type == null) {
        sb.append("null");
      } else {
        sb.append(this.action_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qtn_id:");
      if (this.qtn_id == null) {
        sb.append("null");
      } else {
        sb.append(this.qtn_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qtn_content:");
      if (this.qtn_content == null) {
        sb.append("null");
      } else {
        sb.append(this.qtn_content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class townhall_action_argsStandardSchemeFactory implements SchemeFactory {
      public townhall_action_argsStandardScheme getScheme() {
        return new townhall_action_argsStandardScheme();
      }
    }

    private static class townhall_action_argsStandardScheme extends StandardScheme<townhall_action_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, townhall_action_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.t_id = iprot.readString();
                struct.setT_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.action_type = iprot.readString();
                struct.setAction_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // QTN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.qtn_id = iprot.readString();
                struct.setQtn_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // QTN_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.qtn_content = iprot.readString();
                struct.setQtn_contentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, townhall_action_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.t_id != null) {
          oprot.writeFieldBegin(T_ID_FIELD_DESC);
          oprot.writeString(struct.t_id);
          oprot.writeFieldEnd();
        }
        if (struct.action_type != null) {
          oprot.writeFieldBegin(ACTION_TYPE_FIELD_DESC);
          oprot.writeString(struct.action_type);
          oprot.writeFieldEnd();
        }
        if (struct.qtn_id != null) {
          oprot.writeFieldBegin(QTN_ID_FIELD_DESC);
          oprot.writeString(struct.qtn_id);
          oprot.writeFieldEnd();
        }
        if (struct.qtn_content != null) {
          oprot.writeFieldBegin(QTN_CONTENT_FIELD_DESC);
          oprot.writeString(struct.qtn_content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class townhall_action_argsTupleSchemeFactory implements SchemeFactory {
      public townhall_action_argsTupleScheme getScheme() {
        return new townhall_action_argsTupleScheme();
      }
    }

    private static class townhall_action_argsTupleScheme extends TupleScheme<townhall_action_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, townhall_action_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetT_id()) {
          optionals.set(1);
        }
        if (struct.isSetAction_type()) {
          optionals.set(2);
        }
        if (struct.isSetQtn_id()) {
          optionals.set(3);
        }
        if (struct.isSetQtn_content()) {
          optionals.set(4);
        }
        if (struct.isSetTime()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetT_id()) {
          oprot.writeString(struct.t_id);
        }
        if (struct.isSetAction_type()) {
          oprot.writeString(struct.action_type);
        }
        if (struct.isSetQtn_id()) {
          oprot.writeString(struct.qtn_id);
        }
        if (struct.isSetQtn_content()) {
          oprot.writeString(struct.qtn_content);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, townhall_action_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.t_id = iprot.readString();
          struct.setT_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.action_type = iprot.readString();
          struct.setAction_typeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.qtn_id = iprot.readString();
          struct.setQtn_idIsSet(true);
        }
        if (incoming.get(4)) {
          struct.qtn_content = iprot.readString();
          struct.setQtn_contentIsSet(true);
        }
        if (incoming.get(5)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class townhall_action_result implements org.apache.thrift.TBase<townhall_action_result, townhall_action_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("townhall_action_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new townhall_action_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new townhall_action_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(townhall_action_result.class, metaDataMap);
    }

    public townhall_action_result() {
    }

    public townhall_action_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public townhall_action_result(townhall_action_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public townhall_action_result deepCopy() {
      return new townhall_action_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public townhall_action_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof townhall_action_result)
        return this.equals((townhall_action_result)that);
      return false;
    }

    public boolean equals(townhall_action_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(townhall_action_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      townhall_action_result typedOther = (townhall_action_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("townhall_action_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class townhall_action_resultStandardSchemeFactory implements SchemeFactory {
      public townhall_action_resultStandardScheme getScheme() {
        return new townhall_action_resultStandardScheme();
      }
    }

    private static class townhall_action_resultStandardScheme extends StandardScheme<townhall_action_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, townhall_action_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, townhall_action_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class townhall_action_resultTupleSchemeFactory implements SchemeFactory {
      public townhall_action_resultTupleScheme getScheme() {
        return new townhall_action_resultTupleScheme();
      }
    }

    private static class townhall_action_resultTupleScheme extends TupleScheme<townhall_action_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, townhall_action_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, townhall_action_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class townhall_comment_args implements org.apache.thrift.TBase<townhall_comment_args, townhall_comment_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("townhall_comment_args");

    private static final org.apache.thrift.protocol.TField T_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("t_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new townhall_comment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new townhall_comment_argsTupleSchemeFactory());
    }

    public String t_id; // required
    public String user_name; // required
    public String comment; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_ID((short)1, "t_id"),
      USER_NAME((short)2, "user_name"),
      COMMENT((short)3, "comment"),
      TIME((short)4, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_ID
            return T_ID;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // COMMENT
            return COMMENT;
          case 4: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_ID, new org.apache.thrift.meta_data.FieldMetaData("t_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(townhall_comment_args.class, metaDataMap);
    }

    public townhall_comment_args() {
    }

    public townhall_comment_args(
      String t_id,
      String user_name,
      String comment,
      int time)
    {
      this();
      this.t_id = t_id;
      this.user_name = user_name;
      this.comment = comment;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public townhall_comment_args(townhall_comment_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetT_id()) {
        this.t_id = other.t_id;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetComment()) {
        this.comment = other.comment;
      }
      this.time = other.time;
    }

    public townhall_comment_args deepCopy() {
      return new townhall_comment_args(this);
    }

    @Override
    public void clear() {
      this.t_id = null;
      this.user_name = null;
      this.comment = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getT_id() {
      return this.t_id;
    }

    public townhall_comment_args setT_id(String t_id) {
      this.t_id = t_id;
      return this;
    }

    public void unsetT_id() {
      this.t_id = null;
    }

    /** Returns true if field t_id is set (has been assigned a value) and false otherwise */
    public boolean isSetT_id() {
      return this.t_id != null;
    }

    public void setT_idIsSet(boolean value) {
      if (!value) {
        this.t_id = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public townhall_comment_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getComment() {
      return this.comment;
    }

    public townhall_comment_args setComment(String comment) {
      this.comment = comment;
      return this;
    }

    public void unsetComment() {
      this.comment = null;
    }

    /** Returns true if field comment is set (has been assigned a value) and false otherwise */
    public boolean isSetComment() {
      return this.comment != null;
    }

    public void setCommentIsSet(boolean value) {
      if (!value) {
        this.comment = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public townhall_comment_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case T_ID:
        if (value == null) {
          unsetT_id();
        } else {
          setT_id((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case COMMENT:
        if (value == null) {
          unsetComment();
        } else {
          setComment((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case T_ID:
        return getT_id();

      case USER_NAME:
        return getUser_name();

      case COMMENT:
        return getComment();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case T_ID:
        return isSetT_id();
      case USER_NAME:
        return isSetUser_name();
      case COMMENT:
        return isSetComment();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof townhall_comment_args)
        return this.equals((townhall_comment_args)that);
      return false;
    }

    public boolean equals(townhall_comment_args that) {
      if (that == null)
        return false;

      boolean this_present_t_id = true && this.isSetT_id();
      boolean that_present_t_id = true && that.isSetT_id();
      if (this_present_t_id || that_present_t_id) {
        if (!(this_present_t_id && that_present_t_id))
          return false;
        if (!this.t_id.equals(that.t_id))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_comment = true && this.isSetComment();
      boolean that_present_comment = true && that.isSetComment();
      if (this_present_comment || that_present_comment) {
        if (!(this_present_comment && that_present_comment))
          return false;
        if (!this.comment.equals(that.comment))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(townhall_comment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      townhall_comment_args typedOther = (townhall_comment_args)other;

      lastComparison = Boolean.valueOf(isSetT_id()).compareTo(typedOther.isSetT_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_id, typedOther.t_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("townhall_comment_args(");
      boolean first = true;

      sb.append("t_id:");
      if (this.t_id == null) {
        sb.append("null");
      } else {
        sb.append(this.t_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class townhall_comment_argsStandardSchemeFactory implements SchemeFactory {
      public townhall_comment_argsStandardScheme getScheme() {
        return new townhall_comment_argsStandardScheme();
      }
    }

    private static class townhall_comment_argsStandardScheme extends StandardScheme<townhall_comment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, townhall_comment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.t_id = iprot.readString();
                struct.setT_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.comment = iprot.readString();
                struct.setCommentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, townhall_comment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.t_id != null) {
          oprot.writeFieldBegin(T_ID_FIELD_DESC);
          oprot.writeString(struct.t_id);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.comment != null) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class townhall_comment_argsTupleSchemeFactory implements SchemeFactory {
      public townhall_comment_argsTupleScheme getScheme() {
        return new townhall_comment_argsTupleScheme();
      }
    }

    private static class townhall_comment_argsTupleScheme extends TupleScheme<townhall_comment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, townhall_comment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetT_id()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name()) {
          optionals.set(1);
        }
        if (struct.isSetComment()) {
          optionals.set(2);
        }
        if (struct.isSetTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetT_id()) {
          oprot.writeString(struct.t_id);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetComment()) {
          oprot.writeString(struct.comment);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, townhall_comment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.t_id = iprot.readString();
          struct.setT_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.comment = iprot.readString();
          struct.setCommentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class townhall_comment_result implements org.apache.thrift.TBase<townhall_comment_result, townhall_comment_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("townhall_comment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new townhall_comment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new townhall_comment_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(townhall_comment_result.class, metaDataMap);
    }

    public townhall_comment_result() {
    }

    public townhall_comment_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public townhall_comment_result(townhall_comment_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public townhall_comment_result deepCopy() {
      return new townhall_comment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public townhall_comment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof townhall_comment_result)
        return this.equals((townhall_comment_result)that);
      return false;
    }

    public boolean equals(townhall_comment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(townhall_comment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      townhall_comment_result typedOther = (townhall_comment_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("townhall_comment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class townhall_comment_resultStandardSchemeFactory implements SchemeFactory {
      public townhall_comment_resultStandardScheme getScheme() {
        return new townhall_comment_resultStandardScheme();
      }
    }

    private static class townhall_comment_resultStandardScheme extends StandardScheme<townhall_comment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, townhall_comment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, townhall_comment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class townhall_comment_resultTupleSchemeFactory implements SchemeFactory {
      public townhall_comment_resultTupleScheme getScheme() {
        return new townhall_comment_resultTupleScheme();
      }
    }

    private static class townhall_comment_resultTupleScheme extends TupleScheme<townhall_comment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, townhall_comment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, townhall_comment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class townhall_approve_question_args implements org.apache.thrift.TBase<townhall_approve_question_args, townhall_approve_question_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("townhall_approve_question_args");

    private static final org.apache.thrift.protocol.TField T_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("t_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QTN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("qtn_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new townhall_approve_question_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new townhall_approve_question_argsTupleSchemeFactory());
    }

    public String t_id; // required
    public String qtn_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_ID((short)1, "t_id"),
      QTN_ID((short)2, "qtn_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_ID
            return T_ID;
          case 2: // QTN_ID
            return QTN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_ID, new org.apache.thrift.meta_data.FieldMetaData("t_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QTN_ID, new org.apache.thrift.meta_data.FieldMetaData("qtn_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(townhall_approve_question_args.class, metaDataMap);
    }

    public townhall_approve_question_args() {
    }

    public townhall_approve_question_args(
      String t_id,
      String qtn_id)
    {
      this();
      this.t_id = t_id;
      this.qtn_id = qtn_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public townhall_approve_question_args(townhall_approve_question_args other) {
      if (other.isSetT_id()) {
        this.t_id = other.t_id;
      }
      if (other.isSetQtn_id()) {
        this.qtn_id = other.qtn_id;
      }
    }

    public townhall_approve_question_args deepCopy() {
      return new townhall_approve_question_args(this);
    }

    @Override
    public void clear() {
      this.t_id = null;
      this.qtn_id = null;
    }

    public String getT_id() {
      return this.t_id;
    }

    public townhall_approve_question_args setT_id(String t_id) {
      this.t_id = t_id;
      return this;
    }

    public void unsetT_id() {
      this.t_id = null;
    }

    /** Returns true if field t_id is set (has been assigned a value) and false otherwise */
    public boolean isSetT_id() {
      return this.t_id != null;
    }

    public void setT_idIsSet(boolean value) {
      if (!value) {
        this.t_id = null;
      }
    }

    public String getQtn_id() {
      return this.qtn_id;
    }

    public townhall_approve_question_args setQtn_id(String qtn_id) {
      this.qtn_id = qtn_id;
      return this;
    }

    public void unsetQtn_id() {
      this.qtn_id = null;
    }

    /** Returns true if field qtn_id is set (has been assigned a value) and false otherwise */
    public boolean isSetQtn_id() {
      return this.qtn_id != null;
    }

    public void setQtn_idIsSet(boolean value) {
      if (!value) {
        this.qtn_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case T_ID:
        if (value == null) {
          unsetT_id();
        } else {
          setT_id((String)value);
        }
        break;

      case QTN_ID:
        if (value == null) {
          unsetQtn_id();
        } else {
          setQtn_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case T_ID:
        return getT_id();

      case QTN_ID:
        return getQtn_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case T_ID:
        return isSetT_id();
      case QTN_ID:
        return isSetQtn_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof townhall_approve_question_args)
        return this.equals((townhall_approve_question_args)that);
      return false;
    }

    public boolean equals(townhall_approve_question_args that) {
      if (that == null)
        return false;

      boolean this_present_t_id = true && this.isSetT_id();
      boolean that_present_t_id = true && that.isSetT_id();
      if (this_present_t_id || that_present_t_id) {
        if (!(this_present_t_id && that_present_t_id))
          return false;
        if (!this.t_id.equals(that.t_id))
          return false;
      }

      boolean this_present_qtn_id = true && this.isSetQtn_id();
      boolean that_present_qtn_id = true && that.isSetQtn_id();
      if (this_present_qtn_id || that_present_qtn_id) {
        if (!(this_present_qtn_id && that_present_qtn_id))
          return false;
        if (!this.qtn_id.equals(that.qtn_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(townhall_approve_question_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      townhall_approve_question_args typedOther = (townhall_approve_question_args)other;

      lastComparison = Boolean.valueOf(isSetT_id()).compareTo(typedOther.isSetT_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_id, typedOther.t_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQtn_id()).compareTo(typedOther.isSetQtn_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQtn_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qtn_id, typedOther.qtn_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("townhall_approve_question_args(");
      boolean first = true;

      sb.append("t_id:");
      if (this.t_id == null) {
        sb.append("null");
      } else {
        sb.append(this.t_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qtn_id:");
      if (this.qtn_id == null) {
        sb.append("null");
      } else {
        sb.append(this.qtn_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class townhall_approve_question_argsStandardSchemeFactory implements SchemeFactory {
      public townhall_approve_question_argsStandardScheme getScheme() {
        return new townhall_approve_question_argsStandardScheme();
      }
    }

    private static class townhall_approve_question_argsStandardScheme extends StandardScheme<townhall_approve_question_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, townhall_approve_question_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.t_id = iprot.readString();
                struct.setT_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QTN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.qtn_id = iprot.readString();
                struct.setQtn_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, townhall_approve_question_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.t_id != null) {
          oprot.writeFieldBegin(T_ID_FIELD_DESC);
          oprot.writeString(struct.t_id);
          oprot.writeFieldEnd();
        }
        if (struct.qtn_id != null) {
          oprot.writeFieldBegin(QTN_ID_FIELD_DESC);
          oprot.writeString(struct.qtn_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class townhall_approve_question_argsTupleSchemeFactory implements SchemeFactory {
      public townhall_approve_question_argsTupleScheme getScheme() {
        return new townhall_approve_question_argsTupleScheme();
      }
    }

    private static class townhall_approve_question_argsTupleScheme extends TupleScheme<townhall_approve_question_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, townhall_approve_question_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetT_id()) {
          optionals.set(0);
        }
        if (struct.isSetQtn_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetT_id()) {
          oprot.writeString(struct.t_id);
        }
        if (struct.isSetQtn_id()) {
          oprot.writeString(struct.qtn_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, townhall_approve_question_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.t_id = iprot.readString();
          struct.setT_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.qtn_id = iprot.readString();
          struct.setQtn_idIsSet(true);
        }
      }
    }

  }

  public static class townhall_approve_question_result implements org.apache.thrift.TBase<townhall_approve_question_result, townhall_approve_question_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("townhall_approve_question_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new townhall_approve_question_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new townhall_approve_question_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(townhall_approve_question_result.class, metaDataMap);
    }

    public townhall_approve_question_result() {
    }

    public townhall_approve_question_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public townhall_approve_question_result(townhall_approve_question_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public townhall_approve_question_result deepCopy() {
      return new townhall_approve_question_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public townhall_approve_question_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof townhall_approve_question_result)
        return this.equals((townhall_approve_question_result)that);
      return false;
    }

    public boolean equals(townhall_approve_question_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(townhall_approve_question_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      townhall_approve_question_result typedOther = (townhall_approve_question_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("townhall_approve_question_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class townhall_approve_question_resultStandardSchemeFactory implements SchemeFactory {
      public townhall_approve_question_resultStandardScheme getScheme() {
        return new townhall_approve_question_resultStandardScheme();
      }
    }

    private static class townhall_approve_question_resultStandardScheme extends StandardScheme<townhall_approve_question_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, townhall_approve_question_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, townhall_approve_question_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class townhall_approve_question_resultTupleSchemeFactory implements SchemeFactory {
      public townhall_approve_question_resultTupleScheme getScheme() {
        return new townhall_approve_question_resultTupleScheme();
      }
    }

    private static class townhall_approve_question_resultTupleScheme extends TupleScheme<townhall_approve_question_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, townhall_approve_question_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, townhall_approve_question_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class townhall_change_moderator_args implements org.apache.thrift.TBase<townhall_change_moderator_args, townhall_change_moderator_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("townhall_change_moderator_args");

    private static final org.apache.thrift.protocol.TField T_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("t_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField T_MODERATORS_FIELD_DESC = new org.apache.thrift.protocol.TField("t_moderators", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new townhall_change_moderator_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new townhall_change_moderator_argsTupleSchemeFactory());
    }

    public String t_id; // required
    public String t_moderators; // required
    public int time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T_ID((short)1, "t_id"),
      T_MODERATORS((short)2, "t_moderators"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T_ID
            return T_ID;
          case 2: // T_MODERATORS
            return T_MODERATORS;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T_ID, new org.apache.thrift.meta_data.FieldMetaData("t_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.T_MODERATORS, new org.apache.thrift.meta_data.FieldMetaData("t_moderators", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(townhall_change_moderator_args.class, metaDataMap);
    }

    public townhall_change_moderator_args() {
    }

    public townhall_change_moderator_args(
      String t_id,
      String t_moderators,
      int time)
    {
      this();
      this.t_id = t_id;
      this.t_moderators = t_moderators;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public townhall_change_moderator_args(townhall_change_moderator_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetT_id()) {
        this.t_id = other.t_id;
      }
      if (other.isSetT_moderators()) {
        this.t_moderators = other.t_moderators;
      }
      this.time = other.time;
    }

    public townhall_change_moderator_args deepCopy() {
      return new townhall_change_moderator_args(this);
    }

    @Override
    public void clear() {
      this.t_id = null;
      this.t_moderators = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getT_id() {
      return this.t_id;
    }

    public townhall_change_moderator_args setT_id(String t_id) {
      this.t_id = t_id;
      return this;
    }

    public void unsetT_id() {
      this.t_id = null;
    }

    /** Returns true if field t_id is set (has been assigned a value) and false otherwise */
    public boolean isSetT_id() {
      return this.t_id != null;
    }

    public void setT_idIsSet(boolean value) {
      if (!value) {
        this.t_id = null;
      }
    }

    public String getT_moderators() {
      return this.t_moderators;
    }

    public townhall_change_moderator_args setT_moderators(String t_moderators) {
      this.t_moderators = t_moderators;
      return this;
    }

    public void unsetT_moderators() {
      this.t_moderators = null;
    }

    /** Returns true if field t_moderators is set (has been assigned a value) and false otherwise */
    public boolean isSetT_moderators() {
      return this.t_moderators != null;
    }

    public void setT_moderatorsIsSet(boolean value) {
      if (!value) {
        this.t_moderators = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public townhall_change_moderator_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case T_ID:
        if (value == null) {
          unsetT_id();
        } else {
          setT_id((String)value);
        }
        break;

      case T_MODERATORS:
        if (value == null) {
          unsetT_moderators();
        } else {
          setT_moderators((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case T_ID:
        return getT_id();

      case T_MODERATORS:
        return getT_moderators();

      case TIME:
        return Integer.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case T_ID:
        return isSetT_id();
      case T_MODERATORS:
        return isSetT_moderators();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof townhall_change_moderator_args)
        return this.equals((townhall_change_moderator_args)that);
      return false;
    }

    public boolean equals(townhall_change_moderator_args that) {
      if (that == null)
        return false;

      boolean this_present_t_id = true && this.isSetT_id();
      boolean that_present_t_id = true && that.isSetT_id();
      if (this_present_t_id || that_present_t_id) {
        if (!(this_present_t_id && that_present_t_id))
          return false;
        if (!this.t_id.equals(that.t_id))
          return false;
      }

      boolean this_present_t_moderators = true && this.isSetT_moderators();
      boolean that_present_t_moderators = true && that.isSetT_moderators();
      if (this_present_t_moderators || that_present_t_moderators) {
        if (!(this_present_t_moderators && that_present_t_moderators))
          return false;
        if (!this.t_moderators.equals(that.t_moderators))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(townhall_change_moderator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      townhall_change_moderator_args typedOther = (townhall_change_moderator_args)other;

      lastComparison = Boolean.valueOf(isSetT_id()).compareTo(typedOther.isSetT_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_id, typedOther.t_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetT_moderators()).compareTo(typedOther.isSetT_moderators());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT_moderators()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_moderators, typedOther.t_moderators);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("townhall_change_moderator_args(");
      boolean first = true;

      sb.append("t_id:");
      if (this.t_id == null) {
        sb.append("null");
      } else {
        sb.append(this.t_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("t_moderators:");
      if (this.t_moderators == null) {
        sb.append("null");
      } else {
        sb.append(this.t_moderators);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class townhall_change_moderator_argsStandardSchemeFactory implements SchemeFactory {
      public townhall_change_moderator_argsStandardScheme getScheme() {
        return new townhall_change_moderator_argsStandardScheme();
      }
    }

    private static class townhall_change_moderator_argsStandardScheme extends StandardScheme<townhall_change_moderator_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, townhall_change_moderator_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.t_id = iprot.readString();
                struct.setT_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // T_MODERATORS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.t_moderators = iprot.readString();
                struct.setT_moderatorsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, townhall_change_moderator_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.t_id != null) {
          oprot.writeFieldBegin(T_ID_FIELD_DESC);
          oprot.writeString(struct.t_id);
          oprot.writeFieldEnd();
        }
        if (struct.t_moderators != null) {
          oprot.writeFieldBegin(T_MODERATORS_FIELD_DESC);
          oprot.writeString(struct.t_moderators);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class townhall_change_moderator_argsTupleSchemeFactory implements SchemeFactory {
      public townhall_change_moderator_argsTupleScheme getScheme() {
        return new townhall_change_moderator_argsTupleScheme();
      }
    }

    private static class townhall_change_moderator_argsTupleScheme extends TupleScheme<townhall_change_moderator_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, townhall_change_moderator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetT_id()) {
          optionals.set(0);
        }
        if (struct.isSetT_moderators()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetT_id()) {
          oprot.writeString(struct.t_id);
        }
        if (struct.isSetT_moderators()) {
          oprot.writeString(struct.t_moderators);
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, townhall_change_moderator_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.t_id = iprot.readString();
          struct.setT_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.t_moderators = iprot.readString();
          struct.setT_moderatorsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class townhall_change_moderator_result implements org.apache.thrift.TBase<townhall_change_moderator_result, townhall_change_moderator_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("townhall_change_moderator_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new townhall_change_moderator_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new townhall_change_moderator_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(townhall_change_moderator_result.class, metaDataMap);
    }

    public townhall_change_moderator_result() {
    }

    public townhall_change_moderator_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public townhall_change_moderator_result(townhall_change_moderator_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public townhall_change_moderator_result deepCopy() {
      return new townhall_change_moderator_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public townhall_change_moderator_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof townhall_change_moderator_result)
        return this.equals((townhall_change_moderator_result)that);
      return false;
    }

    public boolean equals(townhall_change_moderator_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(townhall_change_moderator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      townhall_change_moderator_result typedOther = (townhall_change_moderator_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("townhall_change_moderator_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class townhall_change_moderator_resultStandardSchemeFactory implements SchemeFactory {
      public townhall_change_moderator_resultStandardScheme getScheme() {
        return new townhall_change_moderator_resultStandardScheme();
      }
    }

    private static class townhall_change_moderator_resultStandardScheme extends StandardScheme<townhall_change_moderator_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, townhall_change_moderator_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, townhall_change_moderator_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class townhall_change_moderator_resultTupleSchemeFactory implements SchemeFactory {
      public townhall_change_moderator_resultTupleScheme getScheme() {
        return new townhall_change_moderator_resultTupleScheme();
      }
    }

    private static class townhall_change_moderator_resultTupleScheme extends TupleScheme<townhall_change_moderator_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, townhall_change_moderator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, townhall_change_moderator_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_petition_args implements org.apache.thrift.TBase<delete_petition_args, delete_petition_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_petition_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_petition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_petition_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_petition_args.class, metaDataMap);
    }

    public delete_petition_args() {
    }

    public delete_petition_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_petition_args(delete_petition_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public delete_petition_args deepCopy() {
      return new delete_petition_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public delete_petition_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_petition_args)
        return this.equals((delete_petition_args)that);
      return false;
    }

    public boolean equals(delete_petition_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_petition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_petition_args typedOther = (delete_petition_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_petition_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_petition_argsStandardSchemeFactory implements SchemeFactory {
      public delete_petition_argsStandardScheme getScheme() {
        return new delete_petition_argsStandardScheme();
      }
    }

    private static class delete_petition_argsStandardScheme extends StandardScheme<delete_petition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_petition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_petition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_petition_argsTupleSchemeFactory implements SchemeFactory {
      public delete_petition_argsTupleScheme getScheme() {
        return new delete_petition_argsTupleScheme();
      }
    }

    private static class delete_petition_argsTupleScheme extends TupleScheme<delete_petition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_petition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_petition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class delete_petition_result implements org.apache.thrift.TBase<delete_petition_result, delete_petition_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_petition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_petition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_petition_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_petition_result.class, metaDataMap);
    }

    public delete_petition_result() {
    }

    public delete_petition_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_petition_result(delete_petition_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public delete_petition_result deepCopy() {
      return new delete_petition_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delete_petition_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_petition_result)
        return this.equals((delete_petition_result)that);
      return false;
    }

    public boolean equals(delete_petition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_petition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_petition_result typedOther = (delete_petition_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_petition_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_petition_resultStandardSchemeFactory implements SchemeFactory {
      public delete_petition_resultStandardScheme getScheme() {
        return new delete_petition_resultStandardScheme();
      }
    }

    private static class delete_petition_resultStandardScheme extends StandardScheme<delete_petition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_petition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_petition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_petition_resultTupleSchemeFactory implements SchemeFactory {
      public delete_petition_resultTupleScheme getScheme() {
        return new delete_petition_resultTupleScheme();
      }
    }

    private static class delete_petition_resultTupleScheme extends TupleScheme<delete_petition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_petition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_petition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_debate_args implements org.apache.thrift.TBase<delete_debate_args, delete_debate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_debate_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_debate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_debate_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_debate_args.class, metaDataMap);
    }

    public delete_debate_args() {
    }

    public delete_debate_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_debate_args(delete_debate_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public delete_debate_args deepCopy() {
      return new delete_debate_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public delete_debate_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_debate_args)
        return this.equals((delete_debate_args)that);
      return false;
    }

    public boolean equals(delete_debate_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_debate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_debate_args typedOther = (delete_debate_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_debate_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_debate_argsStandardSchemeFactory implements SchemeFactory {
      public delete_debate_argsStandardScheme getScheme() {
        return new delete_debate_argsStandardScheme();
      }
    }

    private static class delete_debate_argsStandardScheme extends StandardScheme<delete_debate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_debate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_debate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_debate_argsTupleSchemeFactory implements SchemeFactory {
      public delete_debate_argsTupleScheme getScheme() {
        return new delete_debate_argsTupleScheme();
      }
    }

    private static class delete_debate_argsTupleScheme extends TupleScheme<delete_debate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_debate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_debate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class delete_debate_result implements org.apache.thrift.TBase<delete_debate_result, delete_debate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_debate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_debate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_debate_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_debate_result.class, metaDataMap);
    }

    public delete_debate_result() {
    }

    public delete_debate_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_debate_result(delete_debate_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public delete_debate_result deepCopy() {
      return new delete_debate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delete_debate_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_debate_result)
        return this.equals((delete_debate_result)that);
      return false;
    }

    public boolean equals(delete_debate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_debate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_debate_result typedOther = (delete_debate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_debate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_debate_resultStandardSchemeFactory implements SchemeFactory {
      public delete_debate_resultStandardScheme getScheme() {
        return new delete_debate_resultStandardScheme();
      }
    }

    private static class delete_debate_resultStandardScheme extends StandardScheme<delete_debate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_debate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_debate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_debate_resultTupleSchemeFactory implements SchemeFactory {
      public delete_debate_resultTupleScheme getScheme() {
        return new delete_debate_resultTupleScheme();
      }
    }

    private static class delete_debate_resultTupleScheme extends TupleScheme<delete_debate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_debate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_debate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_townhall_args implements org.apache.thrift.TBase<delete_townhall_args, delete_townhall_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_townhall_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_townhall_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_townhall_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_townhall_args.class, metaDataMap);
    }

    public delete_townhall_args() {
    }

    public delete_townhall_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_townhall_args(delete_townhall_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public delete_townhall_args deepCopy() {
      return new delete_townhall_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public delete_townhall_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_townhall_args)
        return this.equals((delete_townhall_args)that);
      return false;
    }

    public boolean equals(delete_townhall_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_townhall_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_townhall_args typedOther = (delete_townhall_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_townhall_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_townhall_argsStandardSchemeFactory implements SchemeFactory {
      public delete_townhall_argsStandardScheme getScheme() {
        return new delete_townhall_argsStandardScheme();
      }
    }

    private static class delete_townhall_argsStandardScheme extends StandardScheme<delete_townhall_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_townhall_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_townhall_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_townhall_argsTupleSchemeFactory implements SchemeFactory {
      public delete_townhall_argsTupleScheme getScheme() {
        return new delete_townhall_argsTupleScheme();
      }
    }

    private static class delete_townhall_argsTupleScheme extends TupleScheme<delete_townhall_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_townhall_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_townhall_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class delete_townhall_result implements org.apache.thrift.TBase<delete_townhall_result, delete_townhall_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_townhall_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_townhall_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_townhall_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_townhall_result.class, metaDataMap);
    }

    public delete_townhall_result() {
    }

    public delete_townhall_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_townhall_result(delete_townhall_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public delete_townhall_result deepCopy() {
      return new delete_townhall_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delete_townhall_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_townhall_result)
        return this.equals((delete_townhall_result)that);
      return false;
    }

    public boolean equals(delete_townhall_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_townhall_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_townhall_result typedOther = (delete_townhall_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_townhall_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_townhall_resultStandardSchemeFactory implements SchemeFactory {
      public delete_townhall_resultStandardScheme getScheme() {
        return new delete_townhall_resultStandardScheme();
      }
    }

    private static class delete_townhall_resultStandardScheme extends StandardScheme<delete_townhall_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_townhall_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_townhall_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_townhall_resultTupleSchemeFactory implements SchemeFactory {
      public delete_townhall_resultTupleScheme getScheme() {
        return new delete_townhall_resultTupleScheme();
      }
    }

    private static class delete_townhall_resultTupleScheme extends TupleScheme<delete_townhall_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_townhall_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_townhall_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_debate_townhall_suggestion_args implements org.apache.thrift.TBase<delete_debate_townhall_suggestion_args, delete_debate_townhall_suggestion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_debate_townhall_suggestion_args");

    private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("item_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_debate_townhall_suggestion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_debate_townhall_suggestion_argsTupleSchemeFactory());
    }

    public String item_type; // required
    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_TYPE((short)1, "item_type"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_TYPE
            return ITEM_TYPE;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("item_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_debate_townhall_suggestion_args.class, metaDataMap);
    }

    public delete_debate_townhall_suggestion_args() {
    }

    public delete_debate_townhall_suggestion_args(
      String item_type,
      String id)
    {
      this();
      this.item_type = item_type;
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_debate_townhall_suggestion_args(delete_debate_townhall_suggestion_args other) {
      if (other.isSetItem_type()) {
        this.item_type = other.item_type;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public delete_debate_townhall_suggestion_args deepCopy() {
      return new delete_debate_townhall_suggestion_args(this);
    }

    @Override
    public void clear() {
      this.item_type = null;
      this.id = null;
    }

    public String getItem_type() {
      return this.item_type;
    }

    public delete_debate_townhall_suggestion_args setItem_type(String item_type) {
      this.item_type = item_type;
      return this;
    }

    public void unsetItem_type() {
      this.item_type = null;
    }

    /** Returns true if field item_type is set (has been assigned a value) and false otherwise */
    public boolean isSetItem_type() {
      return this.item_type != null;
    }

    public void setItem_typeIsSet(boolean value) {
      if (!value) {
        this.item_type = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public delete_debate_townhall_suggestion_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          setItem_type((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_TYPE:
        return getItem_type();

      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_TYPE:
        return isSetItem_type();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_debate_townhall_suggestion_args)
        return this.equals((delete_debate_townhall_suggestion_args)that);
      return false;
    }

    public boolean equals(delete_debate_townhall_suggestion_args that) {
      if (that == null)
        return false;

      boolean this_present_item_type = true && this.isSetItem_type();
      boolean that_present_item_type = true && that.isSetItem_type();
      if (this_present_item_type || that_present_item_type) {
        if (!(this_present_item_type && that_present_item_type))
          return false;
        if (!this.item_type.equals(that.item_type))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_debate_townhall_suggestion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_debate_townhall_suggestion_args typedOther = (delete_debate_townhall_suggestion_args)other;

      lastComparison = Boolean.valueOf(isSetItem_type()).compareTo(typedOther.isSetItem_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_type, typedOther.item_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_debate_townhall_suggestion_args(");
      boolean first = true;

      sb.append("item_type:");
      if (this.item_type == null) {
        sb.append("null");
      } else {
        sb.append(this.item_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_debate_townhall_suggestion_argsStandardSchemeFactory implements SchemeFactory {
      public delete_debate_townhall_suggestion_argsStandardScheme getScheme() {
        return new delete_debate_townhall_suggestion_argsStandardScheme();
      }
    }

    private static class delete_debate_townhall_suggestion_argsStandardScheme extends StandardScheme<delete_debate_townhall_suggestion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_debate_townhall_suggestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.item_type = iprot.readString();
                struct.setItem_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_debate_townhall_suggestion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.item_type != null) {
          oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
          oprot.writeString(struct.item_type);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_debate_townhall_suggestion_argsTupleSchemeFactory implements SchemeFactory {
      public delete_debate_townhall_suggestion_argsTupleScheme getScheme() {
        return new delete_debate_townhall_suggestion_argsTupleScheme();
      }
    }

    private static class delete_debate_townhall_suggestion_argsTupleScheme extends TupleScheme<delete_debate_townhall_suggestion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_debate_townhall_suggestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItem_type()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetItem_type()) {
          oprot.writeString(struct.item_type);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_debate_townhall_suggestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.item_type = iprot.readString();
          struct.setItem_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class delete_debate_townhall_suggestion_result implements org.apache.thrift.TBase<delete_debate_townhall_suggestion_result, delete_debate_townhall_suggestion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_debate_townhall_suggestion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_debate_townhall_suggestion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_debate_townhall_suggestion_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_debate_townhall_suggestion_result.class, metaDataMap);
    }

    public delete_debate_townhall_suggestion_result() {
    }

    public delete_debate_townhall_suggestion_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_debate_townhall_suggestion_result(delete_debate_townhall_suggestion_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public delete_debate_townhall_suggestion_result deepCopy() {
      return new delete_debate_townhall_suggestion_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delete_debate_townhall_suggestion_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_debate_townhall_suggestion_result)
        return this.equals((delete_debate_townhall_suggestion_result)that);
      return false;
    }

    public boolean equals(delete_debate_townhall_suggestion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delete_debate_townhall_suggestion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delete_debate_townhall_suggestion_result typedOther = (delete_debate_townhall_suggestion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_debate_townhall_suggestion_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_debate_townhall_suggestion_resultStandardSchemeFactory implements SchemeFactory {
      public delete_debate_townhall_suggestion_resultStandardScheme getScheme() {
        return new delete_debate_townhall_suggestion_resultStandardScheme();
      }
    }

    private static class delete_debate_townhall_suggestion_resultStandardScheme extends StandardScheme<delete_debate_townhall_suggestion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_debate_townhall_suggestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_debate_townhall_suggestion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_debate_townhall_suggestion_resultTupleSchemeFactory implements SchemeFactory {
      public delete_debate_townhall_suggestion_resultTupleScheme getScheme() {
        return new delete_debate_townhall_suggestion_resultTupleScheme();
      }
    }

    private static class delete_debate_townhall_suggestion_resultTupleScheme extends TupleScheme<delete_debate_townhall_suggestion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_debate_townhall_suggestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_debate_townhall_suggestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class jar_check_args implements org.apache.thrift.TBase<jar_check_args, jar_check_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("jar_check_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new jar_check_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new jar_check_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(jar_check_args.class, metaDataMap);
    }

    public jar_check_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public jar_check_args(jar_check_args other) {
    }

    public jar_check_args deepCopy() {
      return new jar_check_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof jar_check_args)
        return this.equals((jar_check_args)that);
      return false;
    }

    public boolean equals(jar_check_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(jar_check_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      jar_check_args typedOther = (jar_check_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("jar_check_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class jar_check_argsStandardSchemeFactory implements SchemeFactory {
      public jar_check_argsStandardScheme getScheme() {
        return new jar_check_argsStandardScheme();
      }
    }

    private static class jar_check_argsStandardScheme extends StandardScheme<jar_check_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, jar_check_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, jar_check_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class jar_check_argsTupleSchemeFactory implements SchemeFactory {
      public jar_check_argsTupleScheme getScheme() {
        return new jar_check_argsTupleScheme();
      }
    }

    private static class jar_check_argsTupleScheme extends TupleScheme<jar_check_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, jar_check_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, jar_check_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class jar_check_result implements org.apache.thrift.TBase<jar_check_result, jar_check_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("jar_check_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new jar_check_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new jar_check_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(jar_check_result.class, metaDataMap);
    }

    public jar_check_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public jar_check_result(jar_check_result other) {
    }

    public jar_check_result deepCopy() {
      return new jar_check_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof jar_check_result)
        return this.equals((jar_check_result)that);
      return false;
    }

    public boolean equals(jar_check_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(jar_check_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      jar_check_result typedOther = (jar_check_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("jar_check_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class jar_check_resultStandardSchemeFactory implements SchemeFactory {
      public jar_check_resultStandardScheme getScheme() {
        return new jar_check_resultStandardScheme();
      }
    }

    private static class jar_check_resultStandardScheme extends StandardScheme<jar_check_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, jar_check_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, jar_check_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class jar_check_resultTupleSchemeFactory implements SchemeFactory {
      public jar_check_resultTupleScheme getScheme() {
        return new jar_check_resultTupleScheme();
      }
    }

    private static class jar_check_resultTupleScheme extends TupleScheme<jar_check_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, jar_check_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, jar_check_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class tweet_sentiment_args implements org.apache.thrift.TBase<tweet_sentiment_args, tweet_sentiment_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tweet_sentiment_args");

    private static final org.apache.thrift.protocol.TField HASHTAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("hashtags", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tweet_sentiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tweet_sentiment_argsTupleSchemeFactory());
    }

    public String hashtags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HASHTAGS((short)1, "hashtags");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HASHTAGS
            return HASHTAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HASHTAGS, new org.apache.thrift.meta_data.FieldMetaData("hashtags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tweet_sentiment_args.class, metaDataMap);
    }

    public tweet_sentiment_args() {
    }

    public tweet_sentiment_args(
      String hashtags)
    {
      this();
      this.hashtags = hashtags;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tweet_sentiment_args(tweet_sentiment_args other) {
      if (other.isSetHashtags()) {
        this.hashtags = other.hashtags;
      }
    }

    public tweet_sentiment_args deepCopy() {
      return new tweet_sentiment_args(this);
    }

    @Override
    public void clear() {
      this.hashtags = null;
    }

    public String getHashtags() {
      return this.hashtags;
    }

    public tweet_sentiment_args setHashtags(String hashtags) {
      this.hashtags = hashtags;
      return this;
    }

    public void unsetHashtags() {
      this.hashtags = null;
    }

    /** Returns true if field hashtags is set (has been assigned a value) and false otherwise */
    public boolean isSetHashtags() {
      return this.hashtags != null;
    }

    public void setHashtagsIsSet(boolean value) {
      if (!value) {
        this.hashtags = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HASHTAGS:
        if (value == null) {
          unsetHashtags();
        } else {
          setHashtags((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HASHTAGS:
        return getHashtags();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HASHTAGS:
        return isSetHashtags();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tweet_sentiment_args)
        return this.equals((tweet_sentiment_args)that);
      return false;
    }

    public boolean equals(tweet_sentiment_args that) {
      if (that == null)
        return false;

      boolean this_present_hashtags = true && this.isSetHashtags();
      boolean that_present_hashtags = true && that.isSetHashtags();
      if (this_present_hashtags || that_present_hashtags) {
        if (!(this_present_hashtags && that_present_hashtags))
          return false;
        if (!this.hashtags.equals(that.hashtags))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tweet_sentiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tweet_sentiment_args typedOther = (tweet_sentiment_args)other;

      lastComparison = Boolean.valueOf(isSetHashtags()).compareTo(typedOther.isSetHashtags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHashtags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashtags, typedOther.hashtags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tweet_sentiment_args(");
      boolean first = true;

      sb.append("hashtags:");
      if (this.hashtags == null) {
        sb.append("null");
      } else {
        sb.append(this.hashtags);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tweet_sentiment_argsStandardSchemeFactory implements SchemeFactory {
      public tweet_sentiment_argsStandardScheme getScheme() {
        return new tweet_sentiment_argsStandardScheme();
      }
    }

    private static class tweet_sentiment_argsStandardScheme extends StandardScheme<tweet_sentiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tweet_sentiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HASHTAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hashtags = iprot.readString();
                struct.setHashtagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tweet_sentiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hashtags != null) {
          oprot.writeFieldBegin(HASHTAGS_FIELD_DESC);
          oprot.writeString(struct.hashtags);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tweet_sentiment_argsTupleSchemeFactory implements SchemeFactory {
      public tweet_sentiment_argsTupleScheme getScheme() {
        return new tweet_sentiment_argsTupleScheme();
      }
    }

    private static class tweet_sentiment_argsTupleScheme extends TupleScheme<tweet_sentiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tweet_sentiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHashtags()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHashtags()) {
          oprot.writeString(struct.hashtags);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tweet_sentiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hashtags = iprot.readString();
          struct.setHashtagsIsSet(true);
        }
      }
    }

  }

  public static class tweet_sentiment_result implements org.apache.thrift.TBase<tweet_sentiment_result, tweet_sentiment_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tweet_sentiment_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tweet_sentiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tweet_sentiment_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tweet_sentiment_result.class, metaDataMap);
    }

    public tweet_sentiment_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tweet_sentiment_result(tweet_sentiment_result other) {
    }

    public tweet_sentiment_result deepCopy() {
      return new tweet_sentiment_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tweet_sentiment_result)
        return this.equals((tweet_sentiment_result)that);
      return false;
    }

    public boolean equals(tweet_sentiment_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(tweet_sentiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      tweet_sentiment_result typedOther = (tweet_sentiment_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tweet_sentiment_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tweet_sentiment_resultStandardSchemeFactory implements SchemeFactory {
      public tweet_sentiment_resultStandardScheme getScheme() {
        return new tweet_sentiment_resultStandardScheme();
      }
    }

    private static class tweet_sentiment_resultStandardScheme extends StandardScheme<tweet_sentiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tweet_sentiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tweet_sentiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tweet_sentiment_resultTupleSchemeFactory implements SchemeFactory {
      public tweet_sentiment_resultTupleScheme getScheme() {
        return new tweet_sentiment_resultTupleScheme();
      }
    }

    private static class tweet_sentiment_resultTupleScheme extends TupleScheme<tweet_sentiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tweet_sentiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tweet_sentiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sentiment_analysis_args implements org.apache.thrift.TBase<sentiment_analysis_args, sentiment_analysis_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sentiment_analysis_args");

    private static final org.apache.thrift.protocol.TField HASHTAG_FIELD_DESC = new org.apache.thrift.protocol.TField("hashtag", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sentiment_analysis_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sentiment_analysis_argsTupleSchemeFactory());
    }

    public String hashtag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HASHTAG((short)1, "hashtag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HASHTAG
            return HASHTAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HASHTAG, new org.apache.thrift.meta_data.FieldMetaData("hashtag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sentiment_analysis_args.class, metaDataMap);
    }

    public sentiment_analysis_args() {
    }

    public sentiment_analysis_args(
      String hashtag)
    {
      this();
      this.hashtag = hashtag;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sentiment_analysis_args(sentiment_analysis_args other) {
      if (other.isSetHashtag()) {
        this.hashtag = other.hashtag;
      }
    }

    public sentiment_analysis_args deepCopy() {
      return new sentiment_analysis_args(this);
    }

    @Override
    public void clear() {
      this.hashtag = null;
    }

    public String getHashtag() {
      return this.hashtag;
    }

    public sentiment_analysis_args setHashtag(String hashtag) {
      this.hashtag = hashtag;
      return this;
    }

    public void unsetHashtag() {
      this.hashtag = null;
    }

    /** Returns true if field hashtag is set (has been assigned a value) and false otherwise */
    public boolean isSetHashtag() {
      return this.hashtag != null;
    }

    public void setHashtagIsSet(boolean value) {
      if (!value) {
        this.hashtag = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HASHTAG:
        if (value == null) {
          unsetHashtag();
        } else {
          setHashtag((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HASHTAG:
        return getHashtag();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HASHTAG:
        return isSetHashtag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sentiment_analysis_args)
        return this.equals((sentiment_analysis_args)that);
      return false;
    }

    public boolean equals(sentiment_analysis_args that) {
      if (that == null)
        return false;

      boolean this_present_hashtag = true && this.isSetHashtag();
      boolean that_present_hashtag = true && that.isSetHashtag();
      if (this_present_hashtag || that_present_hashtag) {
        if (!(this_present_hashtag && that_present_hashtag))
          return false;
        if (!this.hashtag.equals(that.hashtag))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sentiment_analysis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sentiment_analysis_args typedOther = (sentiment_analysis_args)other;

      lastComparison = Boolean.valueOf(isSetHashtag()).compareTo(typedOther.isSetHashtag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHashtag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashtag, typedOther.hashtag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sentiment_analysis_args(");
      boolean first = true;

      sb.append("hashtag:");
      if (this.hashtag == null) {
        sb.append("null");
      } else {
        sb.append(this.hashtag);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sentiment_analysis_argsStandardSchemeFactory implements SchemeFactory {
      public sentiment_analysis_argsStandardScheme getScheme() {
        return new sentiment_analysis_argsStandardScheme();
      }
    }

    private static class sentiment_analysis_argsStandardScheme extends StandardScheme<sentiment_analysis_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sentiment_analysis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HASHTAG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hashtag = iprot.readString();
                struct.setHashtagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sentiment_analysis_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hashtag != null) {
          oprot.writeFieldBegin(HASHTAG_FIELD_DESC);
          oprot.writeString(struct.hashtag);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sentiment_analysis_argsTupleSchemeFactory implements SchemeFactory {
      public sentiment_analysis_argsTupleScheme getScheme() {
        return new sentiment_analysis_argsTupleScheme();
      }
    }

    private static class sentiment_analysis_argsTupleScheme extends TupleScheme<sentiment_analysis_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sentiment_analysis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHashtag()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHashtag()) {
          oprot.writeString(struct.hashtag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sentiment_analysis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hashtag = iprot.readString();
          struct.setHashtagIsSet(true);
        }
      }
    }

  }

  public static class sentiment_analysis_result implements org.apache.thrift.TBase<sentiment_analysis_result, sentiment_analysis_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sentiment_analysis_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sentiment_analysis_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sentiment_analysis_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sentiment_analysis_result.class, metaDataMap);
    }

    public sentiment_analysis_result() {
    }

    public sentiment_analysis_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sentiment_analysis_result(sentiment_analysis_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public sentiment_analysis_result deepCopy() {
      return new sentiment_analysis_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public sentiment_analysis_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sentiment_analysis_result)
        return this.equals((sentiment_analysis_result)that);
      return false;
    }

    public boolean equals(sentiment_analysis_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sentiment_analysis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sentiment_analysis_result typedOther = (sentiment_analysis_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sentiment_analysis_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sentiment_analysis_resultStandardSchemeFactory implements SchemeFactory {
      public sentiment_analysis_resultStandardScheme getScheme() {
        return new sentiment_analysis_resultStandardScheme();
      }
    }

    private static class sentiment_analysis_resultStandardScheme extends StandardScheme<sentiment_analysis_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sentiment_analysis_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sentiment_analysis_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sentiment_analysis_resultTupleSchemeFactory implements SchemeFactory {
      public sentiment_analysis_resultTupleScheme getScheme() {
        return new sentiment_analysis_resultTupleScheme();
      }
    }

    private static class sentiment_analysis_resultTupleScheme extends TupleScheme<sentiment_analysis_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sentiment_analysis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sentiment_analysis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_space_args implements org.apache.thrift.TBase<create_space_args, create_space_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_space_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SPACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("space_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SPACE_TITLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("space_title_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SPACE_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("space_title", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SPACE_TAGLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("space_tagline", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField SPACE_FUT_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("space_fut_image", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SPACE_TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("space_time_created", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField IS_EDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_edit", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField IS_CLOSED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_closed", org.apache.thrift.protocol.TType.I32, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_space_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_space_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String space_id; // required
    public String space_title_id; // required
    public String space_title; // required
    public String space_tagline; // required
    public String space_fut_image; // required
    public int space_time_created; // required
    public int is_edit; // required
    public int is_closed; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      SPACE_ID((short)2, "space_id"),
      SPACE_TITLE_ID((short)3, "space_title_id"),
      SPACE_TITLE((short)4, "space_title"),
      SPACE_TAGLINE((short)5, "space_tagline"),
      SPACE_FUT_IMAGE((short)6, "space_fut_image"),
      SPACE_TIME_CREATED((short)7, "space_time_created"),
      IS_EDIT((short)8, "is_edit"),
      IS_CLOSED((short)9, "is_closed");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // SPACE_ID
            return SPACE_ID;
          case 3: // SPACE_TITLE_ID
            return SPACE_TITLE_ID;
          case 4: // SPACE_TITLE
            return SPACE_TITLE;
          case 5: // SPACE_TAGLINE
            return SPACE_TAGLINE;
          case 6: // SPACE_FUT_IMAGE
            return SPACE_FUT_IMAGE;
          case 7: // SPACE_TIME_CREATED
            return SPACE_TIME_CREATED;
          case 8: // IS_EDIT
            return IS_EDIT;
          case 9: // IS_CLOSED
            return IS_CLOSED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPACE_TIME_CREATED_ISSET_ID = 0;
    private static final int __IS_EDIT_ISSET_ID = 1;
    private static final int __IS_CLOSED_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPACE_ID, new org.apache.thrift.meta_data.FieldMetaData("space_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPACE_TITLE_ID, new org.apache.thrift.meta_data.FieldMetaData("space_title_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPACE_TITLE, new org.apache.thrift.meta_data.FieldMetaData("space_title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPACE_TAGLINE, new org.apache.thrift.meta_data.FieldMetaData("space_tagline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPACE_FUT_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("space_fut_image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPACE_TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("space_time_created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_EDIT, new org.apache.thrift.meta_data.FieldMetaData("is_edit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_CLOSED, new org.apache.thrift.meta_data.FieldMetaData("is_closed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_space_args.class, metaDataMap);
    }

    public create_space_args() {
    }

    public create_space_args(
      String user_name,
      String space_id,
      String space_title_id,
      String space_title,
      String space_tagline,
      String space_fut_image,
      int space_time_created,
      int is_edit,
      int is_closed)
    {
      this();
      this.user_name = user_name;
      this.space_id = space_id;
      this.space_title_id = space_title_id;
      this.space_title = space_title;
      this.space_tagline = space_tagline;
      this.space_fut_image = space_fut_image;
      this.space_time_created = space_time_created;
      setSpace_time_createdIsSet(true);
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      this.is_closed = is_closed;
      setIs_closedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_space_args(create_space_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetSpace_id()) {
        this.space_id = other.space_id;
      }
      if (other.isSetSpace_title_id()) {
        this.space_title_id = other.space_title_id;
      }
      if (other.isSetSpace_title()) {
        this.space_title = other.space_title;
      }
      if (other.isSetSpace_tagline()) {
        this.space_tagline = other.space_tagline;
      }
      if (other.isSetSpace_fut_image()) {
        this.space_fut_image = other.space_fut_image;
      }
      this.space_time_created = other.space_time_created;
      this.is_edit = other.is_edit;
      this.is_closed = other.is_closed;
    }

    public create_space_args deepCopy() {
      return new create_space_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.space_id = null;
      this.space_title_id = null;
      this.space_title = null;
      this.space_tagline = null;
      this.space_fut_image = null;
      setSpace_time_createdIsSet(false);
      this.space_time_created = 0;
      setIs_editIsSet(false);
      this.is_edit = 0;
      setIs_closedIsSet(false);
      this.is_closed = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public create_space_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getSpace_id() {
      return this.space_id;
    }

    public create_space_args setSpace_id(String space_id) {
      this.space_id = space_id;
      return this;
    }

    public void unsetSpace_id() {
      this.space_id = null;
    }

    /** Returns true if field space_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSpace_id() {
      return this.space_id != null;
    }

    public void setSpace_idIsSet(boolean value) {
      if (!value) {
        this.space_id = null;
      }
    }

    public String getSpace_title_id() {
      return this.space_title_id;
    }

    public create_space_args setSpace_title_id(String space_title_id) {
      this.space_title_id = space_title_id;
      return this;
    }

    public void unsetSpace_title_id() {
      this.space_title_id = null;
    }

    /** Returns true if field space_title_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSpace_title_id() {
      return this.space_title_id != null;
    }

    public void setSpace_title_idIsSet(boolean value) {
      if (!value) {
        this.space_title_id = null;
      }
    }

    public String getSpace_title() {
      return this.space_title;
    }

    public create_space_args setSpace_title(String space_title) {
      this.space_title = space_title;
      return this;
    }

    public void unsetSpace_title() {
      this.space_title = null;
    }

    /** Returns true if field space_title is set (has been assigned a value) and false otherwise */
    public boolean isSetSpace_title() {
      return this.space_title != null;
    }

    public void setSpace_titleIsSet(boolean value) {
      if (!value) {
        this.space_title = null;
      }
    }

    public String getSpace_tagline() {
      return this.space_tagline;
    }

    public create_space_args setSpace_tagline(String space_tagline) {
      this.space_tagline = space_tagline;
      return this;
    }

    public void unsetSpace_tagline() {
      this.space_tagline = null;
    }

    /** Returns true if field space_tagline is set (has been assigned a value) and false otherwise */
    public boolean isSetSpace_tagline() {
      return this.space_tagline != null;
    }

    public void setSpace_taglineIsSet(boolean value) {
      if (!value) {
        this.space_tagline = null;
      }
    }

    public String getSpace_fut_image() {
      return this.space_fut_image;
    }

    public create_space_args setSpace_fut_image(String space_fut_image) {
      this.space_fut_image = space_fut_image;
      return this;
    }

    public void unsetSpace_fut_image() {
      this.space_fut_image = null;
    }

    /** Returns true if field space_fut_image is set (has been assigned a value) and false otherwise */
    public boolean isSetSpace_fut_image() {
      return this.space_fut_image != null;
    }

    public void setSpace_fut_imageIsSet(boolean value) {
      if (!value) {
        this.space_fut_image = null;
      }
    }

    public int getSpace_time_created() {
      return this.space_time_created;
    }

    public create_space_args setSpace_time_created(int space_time_created) {
      this.space_time_created = space_time_created;
      setSpace_time_createdIsSet(true);
      return this;
    }

    public void unsetSpace_time_created() {
      __isset_bit_vector.clear(__SPACE_TIME_CREATED_ISSET_ID);
    }

    /** Returns true if field space_time_created is set (has been assigned a value) and false otherwise */
    public boolean isSetSpace_time_created() {
      return __isset_bit_vector.get(__SPACE_TIME_CREATED_ISSET_ID);
    }

    public void setSpace_time_createdIsSet(boolean value) {
      __isset_bit_vector.set(__SPACE_TIME_CREATED_ISSET_ID, value);
    }

    public int getIs_edit() {
      return this.is_edit;
    }

    public create_space_args setIs_edit(int is_edit) {
      this.is_edit = is_edit;
      setIs_editIsSet(true);
      return this;
    }

    public void unsetIs_edit() {
      __isset_bit_vector.clear(__IS_EDIT_ISSET_ID);
    }

    /** Returns true if field is_edit is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_edit() {
      return __isset_bit_vector.get(__IS_EDIT_ISSET_ID);
    }

    public void setIs_editIsSet(boolean value) {
      __isset_bit_vector.set(__IS_EDIT_ISSET_ID, value);
    }

    public int getIs_closed() {
      return this.is_closed;
    }

    public create_space_args setIs_closed(int is_closed) {
      this.is_closed = is_closed;
      setIs_closedIsSet(true);
      return this;
    }

    public void unsetIs_closed() {
      __isset_bit_vector.clear(__IS_CLOSED_ISSET_ID);
    }

    /** Returns true if field is_closed is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_closed() {
      return __isset_bit_vector.get(__IS_CLOSED_ISSET_ID);
    }

    public void setIs_closedIsSet(boolean value) {
      __isset_bit_vector.set(__IS_CLOSED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case SPACE_ID:
        if (value == null) {
          unsetSpace_id();
        } else {
          setSpace_id((String)value);
        }
        break;

      case SPACE_TITLE_ID:
        if (value == null) {
          unsetSpace_title_id();
        } else {
          setSpace_title_id((String)value);
        }
        break;

      case SPACE_TITLE:
        if (value == null) {
          unsetSpace_title();
        } else {
          setSpace_title((String)value);
        }
        break;

      case SPACE_TAGLINE:
        if (value == null) {
          unsetSpace_tagline();
        } else {
          setSpace_tagline((String)value);
        }
        break;

      case SPACE_FUT_IMAGE:
        if (value == null) {
          unsetSpace_fut_image();
        } else {
          setSpace_fut_image((String)value);
        }
        break;

      case SPACE_TIME_CREATED:
        if (value == null) {
          unsetSpace_time_created();
        } else {
          setSpace_time_created((Integer)value);
        }
        break;

      case IS_EDIT:
        if (value == null) {
          unsetIs_edit();
        } else {
          setIs_edit((Integer)value);
        }
        break;

      case IS_CLOSED:
        if (value == null) {
          unsetIs_closed();
        } else {
          setIs_closed((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case SPACE_ID:
        return getSpace_id();

      case SPACE_TITLE_ID:
        return getSpace_title_id();

      case SPACE_TITLE:
        return getSpace_title();

      case SPACE_TAGLINE:
        return getSpace_tagline();

      case SPACE_FUT_IMAGE:
        return getSpace_fut_image();

      case SPACE_TIME_CREATED:
        return Integer.valueOf(getSpace_time_created());

      case IS_EDIT:
        return Integer.valueOf(getIs_edit());

      case IS_CLOSED:
        return Integer.valueOf(getIs_closed());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case SPACE_ID:
        return isSetSpace_id();
      case SPACE_TITLE_ID:
        return isSetSpace_title_id();
      case SPACE_TITLE:
        return isSetSpace_title();
      case SPACE_TAGLINE:
        return isSetSpace_tagline();
      case SPACE_FUT_IMAGE:
        return isSetSpace_fut_image();
      case SPACE_TIME_CREATED:
        return isSetSpace_time_created();
      case IS_EDIT:
        return isSetIs_edit();
      case IS_CLOSED:
        return isSetIs_closed();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_space_args)
        return this.equals((create_space_args)that);
      return false;
    }

    public boolean equals(create_space_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_space_id = true && this.isSetSpace_id();
      boolean that_present_space_id = true && that.isSetSpace_id();
      if (this_present_space_id || that_present_space_id) {
        if (!(this_present_space_id && that_present_space_id))
          return false;
        if (!this.space_id.equals(that.space_id))
          return false;
      }

      boolean this_present_space_title_id = true && this.isSetSpace_title_id();
      boolean that_present_space_title_id = true && that.isSetSpace_title_id();
      if (this_present_space_title_id || that_present_space_title_id) {
        if (!(this_present_space_title_id && that_present_space_title_id))
          return false;
        if (!this.space_title_id.equals(that.space_title_id))
          return false;
      }

      boolean this_present_space_title = true && this.isSetSpace_title();
      boolean that_present_space_title = true && that.isSetSpace_title();
      if (this_present_space_title || that_present_space_title) {
        if (!(this_present_space_title && that_present_space_title))
          return false;
        if (!this.space_title.equals(that.space_title))
          return false;
      }

      boolean this_present_space_tagline = true && this.isSetSpace_tagline();
      boolean that_present_space_tagline = true && that.isSetSpace_tagline();
      if (this_present_space_tagline || that_present_space_tagline) {
        if (!(this_present_space_tagline && that_present_space_tagline))
          return false;
        if (!this.space_tagline.equals(that.space_tagline))
          return false;
      }

      boolean this_present_space_fut_image = true && this.isSetSpace_fut_image();
      boolean that_present_space_fut_image = true && that.isSetSpace_fut_image();
      if (this_present_space_fut_image || that_present_space_fut_image) {
        if (!(this_present_space_fut_image && that_present_space_fut_image))
          return false;
        if (!this.space_fut_image.equals(that.space_fut_image))
          return false;
      }

      boolean this_present_space_time_created = true;
      boolean that_present_space_time_created = true;
      if (this_present_space_time_created || that_present_space_time_created) {
        if (!(this_present_space_time_created && that_present_space_time_created))
          return false;
        if (this.space_time_created != that.space_time_created)
          return false;
      }

      boolean this_present_is_edit = true;
      boolean that_present_is_edit = true;
      if (this_present_is_edit || that_present_is_edit) {
        if (!(this_present_is_edit && that_present_is_edit))
          return false;
        if (this.is_edit != that.is_edit)
          return false;
      }

      boolean this_present_is_closed = true;
      boolean that_present_is_closed = true;
      if (this_present_is_closed || that_present_is_closed) {
        if (!(this_present_is_closed && that_present_is_closed))
          return false;
        if (this.is_closed != that.is_closed)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_space_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_space_args typedOther = (create_space_args)other;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpace_id()).compareTo(typedOther.isSetSpace_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpace_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.space_id, typedOther.space_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpace_title_id()).compareTo(typedOther.isSetSpace_title_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpace_title_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.space_title_id, typedOther.space_title_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpace_title()).compareTo(typedOther.isSetSpace_title());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpace_title()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.space_title, typedOther.space_title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpace_tagline()).compareTo(typedOther.isSetSpace_tagline());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpace_tagline()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.space_tagline, typedOther.space_tagline);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpace_fut_image()).compareTo(typedOther.isSetSpace_fut_image());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpace_fut_image()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.space_fut_image, typedOther.space_fut_image);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpace_time_created()).compareTo(typedOther.isSetSpace_time_created());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpace_time_created()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.space_time_created, typedOther.space_time_created);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_edit()).compareTo(typedOther.isSetIs_edit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_edit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_edit, typedOther.is_edit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIs_closed()).compareTo(typedOther.isSetIs_closed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_closed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_closed, typedOther.is_closed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_space_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("space_id:");
      if (this.space_id == null) {
        sb.append("null");
      } else {
        sb.append(this.space_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("space_title_id:");
      if (this.space_title_id == null) {
        sb.append("null");
      } else {
        sb.append(this.space_title_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("space_title:");
      if (this.space_title == null) {
        sb.append("null");
      } else {
        sb.append(this.space_title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("space_tagline:");
      if (this.space_tagline == null) {
        sb.append("null");
      } else {
        sb.append(this.space_tagline);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("space_fut_image:");
      if (this.space_fut_image == null) {
        sb.append("null");
      } else {
        sb.append(this.space_fut_image);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("space_time_created:");
      sb.append(this.space_time_created);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_edit:");
      sb.append(this.is_edit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_closed:");
      sb.append(this.is_closed);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_space_argsStandardSchemeFactory implements SchemeFactory {
      public create_space_argsStandardScheme getScheme() {
        return new create_space_argsStandardScheme();
      }
    }

    private static class create_space_argsStandardScheme extends StandardScheme<create_space_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_space_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.space_id = iprot.readString();
                struct.setSpace_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SPACE_TITLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.space_title_id = iprot.readString();
                struct.setSpace_title_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SPACE_TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.space_title = iprot.readString();
                struct.setSpace_titleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SPACE_TAGLINE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.space_tagline = iprot.readString();
                struct.setSpace_taglineIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SPACE_FUT_IMAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.space_fut_image = iprot.readString();
                struct.setSpace_fut_imageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SPACE_TIME_CREATED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.space_time_created = iprot.readI32();
                struct.setSpace_time_createdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // IS_EDIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_edit = iprot.readI32();
                struct.setIs_editIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // IS_CLOSED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.is_closed = iprot.readI32();
                struct.setIs_closedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_space_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.space_id != null) {
          oprot.writeFieldBegin(SPACE_ID_FIELD_DESC);
          oprot.writeString(struct.space_id);
          oprot.writeFieldEnd();
        }
        if (struct.space_title_id != null) {
          oprot.writeFieldBegin(SPACE_TITLE_ID_FIELD_DESC);
          oprot.writeString(struct.space_title_id);
          oprot.writeFieldEnd();
        }
        if (struct.space_title != null) {
          oprot.writeFieldBegin(SPACE_TITLE_FIELD_DESC);
          oprot.writeString(struct.space_title);
          oprot.writeFieldEnd();
        }
        if (struct.space_tagline != null) {
          oprot.writeFieldBegin(SPACE_TAGLINE_FIELD_DESC);
          oprot.writeString(struct.space_tagline);
          oprot.writeFieldEnd();
        }
        if (struct.space_fut_image != null) {
          oprot.writeFieldBegin(SPACE_FUT_IMAGE_FIELD_DESC);
          oprot.writeString(struct.space_fut_image);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SPACE_TIME_CREATED_FIELD_DESC);
        oprot.writeI32(struct.space_time_created);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_EDIT_FIELD_DESC);
        oprot.writeI32(struct.is_edit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_CLOSED_FIELD_DESC);
        oprot.writeI32(struct.is_closed);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_space_argsTupleSchemeFactory implements SchemeFactory {
      public create_space_argsTupleScheme getScheme() {
        return new create_space_argsTupleScheme();
      }
    }

    private static class create_space_argsTupleScheme extends TupleScheme<create_space_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_space_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetSpace_id()) {
          optionals.set(1);
        }
        if (struct.isSetSpace_title_id()) {
          optionals.set(2);
        }
        if (struct.isSetSpace_title()) {
          optionals.set(3);
        }
        if (struct.isSetSpace_tagline()) {
          optionals.set(4);
        }
        if (struct.isSetSpace_fut_image()) {
          optionals.set(5);
        }
        if (struct.isSetSpace_time_created()) {
          optionals.set(6);
        }
        if (struct.isSetIs_edit()) {
          optionals.set(7);
        }
        if (struct.isSetIs_closed()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetSpace_id()) {
          oprot.writeString(struct.space_id);
        }
        if (struct.isSetSpace_title_id()) {
          oprot.writeString(struct.space_title_id);
        }
        if (struct.isSetSpace_title()) {
          oprot.writeString(struct.space_title);
        }
        if (struct.isSetSpace_tagline()) {
          oprot.writeString(struct.space_tagline);
        }
        if (struct.isSetSpace_fut_image()) {
          oprot.writeString(struct.space_fut_image);
        }
        if (struct.isSetSpace_time_created()) {
          oprot.writeI32(struct.space_time_created);
        }
        if (struct.isSetIs_edit()) {
          oprot.writeI32(struct.is_edit);
        }
        if (struct.isSetIs_closed()) {
          oprot.writeI32(struct.is_closed);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_space_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.space_id = iprot.readString();
          struct.setSpace_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.space_title_id = iprot.readString();
          struct.setSpace_title_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.space_title = iprot.readString();
          struct.setSpace_titleIsSet(true);
        }
        if (incoming.get(4)) {
          struct.space_tagline = iprot.readString();
          struct.setSpace_taglineIsSet(true);
        }
        if (incoming.get(5)) {
          struct.space_fut_image = iprot.readString();
          struct.setSpace_fut_imageIsSet(true);
        }
        if (incoming.get(6)) {
          struct.space_time_created = iprot.readI32();
          struct.setSpace_time_createdIsSet(true);
        }
        if (incoming.get(7)) {
          struct.is_edit = iprot.readI32();
          struct.setIs_editIsSet(true);
        }
        if (incoming.get(8)) {
          struct.is_closed = iprot.readI32();
          struct.setIs_closedIsSet(true);
        }
      }
    }

  }

  public static class create_space_result implements org.apache.thrift.TBase<create_space_result, create_space_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_space_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_space_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_space_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_space_result.class, metaDataMap);
    }

    public create_space_result() {
    }

    public create_space_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_space_result(create_space_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public create_space_result deepCopy() {
      return new create_space_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public create_space_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_space_result)
        return this.equals((create_space_result)that);
      return false;
    }

    public boolean equals(create_space_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_space_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_space_result typedOther = (create_space_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_space_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_space_resultStandardSchemeFactory implements SchemeFactory {
      public create_space_resultStandardScheme getScheme() {
        return new create_space_resultStandardScheme();
      }
    }

    private static class create_space_resultStandardScheme extends StandardScheme<create_space_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_space_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_space_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_space_resultTupleSchemeFactory implements SchemeFactory {
      public create_space_resultTupleScheme getScheme() {
        return new create_space_resultTupleScheme();
      }
    }

    private static class create_space_resultTupleScheme extends TupleScheme<create_space_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_space_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_space_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
